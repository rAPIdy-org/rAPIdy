{"config":{"lang":["en","ru"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"home/","title":"rAPIdy","text":"<p> rAPIdy -         a fast, lightweight, and modern asynchronous web framework powered by         aiohttp         and         pydantic.      </p>"},{"location":"home/#why-rapidy","title":"\ud83d\ude80 Why rAPIdy?","text":"<p>rAPIdy is designed for developers who need a fast, async-first web framework that combines the performance of aiohttp with the simplicity and modern features of frameworks like FastAPI.</p> <p>Simple rAPIdy server: <pre><code>from rapidy import Rapidy\nfrom rapidy.http import get\n\n@get(\"/\")\nasync def hello() -&gt; dict[str, str]:\n    return {\"message\": \"Hello, rAPIdy!\"}\n\napp = Rapidy(http_route_handlers=[hello])\n</code></pre></p>"},{"location":"home/#key-features","title":"\ud83d\udd25 Key Features","text":"<ul> <li>Fast &amp; Lightweight \u2013 Minimal overhead, built on aiohttp</li> <li>Async-First \u2013 Fully asynchronous by design</li> <li>Built-in Validation \u2013 Uses pydantic for request validation</li> <li>Simple &amp; Flexible \u2013 Supports both rAPIdy-style handler definitions and traditional aiohttp function-based and class-based routing</li> <li>Middleware Support \u2013 Easily extend functionality with middleware, including built-in validation for HTTP parameters (headers, cookies, path params, query params and body).</li> </ul>"},{"location":"home/#installation-setup","title":"\ud83d\udce6 Installation &amp; Setup","text":"<p>Install rAPIdy via pip: <pre><code>pip install rapidy\n</code></pre></p>"},{"location":"home/#first-simple-server","title":"\ud83c\udfc1 First Simple Server","text":"<pre><code>from rapidy import Rapidy\nfrom rapidy.http import post, PathParam, Header, Body\n\nfrom pydantic import BaseModel, Field\n\nclass BodyRequestSchema(BaseModel):\n    username: str = Field(min_length=3, max_length=20)\n    password: str = Field(min_length=8, max_length=40)\n\n@post('/{user_id}')\nasync def handler(\n        user_id: str = PathParam(),\n        host: str = Header(alias='Host'),\n        body: BodyRequestSchema = Body(),\n) -&gt; dict[str, str]:\n    return {'hello': 'rapidy'}\n\nrapidy = Rapidy(\n    http_route_handlers=[handler],\n)\n</code></pre> <p>Successful request validation <pre><code>curl -X POST \\\n-H \"Content-Type: application/json\" -d '{\"username\": \"User\", \"password\": \"myAwesomePass\"}' -v \\\nhttp://127.0.0.1:8080/111\n</code></pre> <pre><code>&lt; HTTP/1.1 200 OK ... {\"data\": \"success\"}\n</code></pre></p> <p>Failed request validation <pre><code>curl -X POST \\\n-H \"Content-Type: application/json\" -d '{\"username\": \"U\", \"password\": \"m\"}' -v \\\nhttp://127.0.0.1:8080/111\n</code></pre> <pre><code>&lt; HTTP/1.1 422 Unprocessable Entity ...\n{\n    \"errors\": [\n        {\n            \"loc\": [\"body\", \"username\"],\n            \"type\": \"string_too_short\",\n            \"msg\": \"String must contain at least 3 characters,\n            \"ctx\": {\"min_length\": 3}\n        },\n        {\n            \"type\": \"string_too_short\",\n            \"loc\": [\"body\", \"password\"],\n            \"msg\": \"String must contain at least 8 characters\",\n            \"ctx\": {\"min_length\": 8}\n        }\n    ]\n}\n</code></pre></p> <p>Quickstart Guide Quickstart</p>"},{"location":"about/","title":"About","text":"<p>Welcome to the \"About\" section! Here you will find information about Rapidy.</p>"},{"location":"about/#about-the-project","title":"About the Project","text":""},{"location":"about/#owner","title":"Owner","text":"<p>My name is Daniil Grois @daniil-grois, and I am the creator, owner, and lead developer of Rapidy.</p> <p>Thank you for your interest in the project! I hope Rapidy helps you build your own solutions.</p> <p>I welcome your ideas and contributions\u2014feel free to open Pull Requests, and I will do my best to integrate your work into Rapidy.</p> <p>Let's make the world a better place together! \ud83d\ude80</p>"},{"location":"about/#maintenance-and-development","title":"Maintenance and Development","text":"<p>Current maintainers of Rapidy:</p> <ul> <li>Daniil Grois - @daniil-grois</li> <li>Lev Zaplatin - @LevZaplatin</li> <li>Nikita Tolstoy - @Nikita-Tolstoy</li> </ul> <p>The maintainers define the development strategy, prioritize enhancements, and manage the project's roadmap.</p>"},{"location":"about/#version-numbering","title":"Version Numbering","text":"<p>Rapidy follows the Semantic Versioning standard.</p> <pre><code>Version format: MAJOR.MINOR.PATCH\n\nMAJOR \u2013 incremented for incompatible API changes\nMINOR \u2013 incremented for new functionality that is backward compatible\nPATCH \u2013 incremented for bug fixes that do not break compatibility\nAdditional labels are available for pre-release and build metadata.\n</code></pre>"},{"location":"about/#how-to-contribute","title":"How to Contribute","text":"<p>Want to help improve Rapidy? Here\u2019s how!</p>"},{"location":"about/#workflow","title":"Workflow","text":"<ol> <li>Fork the Rapidy repository here.</li> <li>Clone your fork locally:    <pre><code>git clone https://github.com/your-username/rapidy.git\n</code></pre></li> <li>(Optional) Install Poetry if not already installed:    <pre><code>pipx install poetry\n</code></pre>    For more installation options, check the Poetry documentation.</li> <li>Navigate to the repository folder.</li> <li>Set up the environment:    <pre><code>poetry env use python3.9\n</code></pre></li> <li>Install dependencies:    <pre><code>poetry install --with dev,test,docs\n</code></pre></li> <li>Install pre-commit hooks:    <pre><code>pre-commit install\n</code></pre></li> <li>Activate the virtual environment:    <pre><code>poetry shell\n</code></pre></li> <li>Run tests to ensure everything is working:    <pre><code>pytest\n</code></pre></li> <li>Create a new branch. All branches should start with a <code>&lt;prefix&gt;/</code> indicating the type of change.     For example: <code>bug/fix-any</code> / <code>feature/my-awesome-feature</code>.</li> <li>Make your code changes.</li> <li>Write tests for your changes.</li> <li>Run linters and format the code:     <pre><code>pre-commit run --all-files\n</code></pre></li> <li>Commit your changes using the format <code>&lt;branch number&gt;: &lt;commit message&gt;</code>.</li> <li>Push your changes to your fork:     <pre><code>git push\n</code></pre></li> <li>Open a Pull Request here,     providing a clear description in the format <code>&lt;branch number&gt;: &lt;PR description&gt;</code>.</li> </ol>"},{"location":"about/#code-style","title":"Code Style","text":"<ol> <li>The code must be fully type-annotated.</li> <li>All changes must be covered by tests.</li> <li>The code should follow PEP 8.</li> <li>Backward compatibility should be maintained whenever possible.</li> <li>Add yourself to <code>CONTRIBUTORS.md</code> and this documentation section.</li> <li>Update the documentation (if needed).</li> </ol>"},{"location":"about/#discussion","title":"Discussion","text":"<ul> <li>Telegram (EN)</li> </ul>"},{"location":"aiohttp_migration/","title":"Migration to Rapidy from aiohttp","text":""},{"location":"aiohttp_migration/#description","title":"Description","text":"<p><code>rapidy</code> carefully extends <code>aiohttp</code>, which means that all code written for <code>aiohttp</code> will work without modifications.</p> <p><code>rapidy</code> uses the same module names as <code>aiohttp</code>.</p> <p>If the required object is not available in <code>rapidy</code>, it can be imported directly from <code>aiohttp</code>.</p>"},{"location":"aiohttp_migration/#aiohttp-issues-and-their-solutions-in-rapidy","title":"<code>aiohttp</code> issues and their solutions in <code>Rapidy</code>","text":"<p>The <code>aiohttp</code> framework has a number of features and limitations that <code>Rapidy</code> addresses in a more convenient and elegant way.</p>"},{"location":"aiohttp_migration/#simplified-handling-of-the-request-parameter","title":"Simplified handling of the <code>request</code> parameter","text":"<p>In <code>aiohttp</code>, route handlers require an explicit <code>request</code> parameter, even if it is not used.</p> <p>Example (<code>aiohttp</code>): <pre><code>from aiohttp import web\n\nrouter = web.RouteTableDef()\n\n@router.get('/hello')\nasync def hello(request: web.Request) -&gt; web.Response:  # `request` required\n    return web.json_response({'hello': 'aiohttp'})\n\napp = web.Application()\napp.add_routes(router)\n</code></pre></p> <p>In <code>Rapidy</code>, the <code>request</code> parameter is not required, making the code more concise:</p> <p>Example (<code>Rapidy</code>): <pre><code>from rapidy import Rapidy\nfrom rapidy.http import get\n\n@get('/hello')\nasync def handler() -&gt; dict[str, str]:\n    return {'hello': 'rapidy'}\n\nrapidy = Rapidy(http_route_handlers=[handler])\n</code></pre></p> <p>Learn more about <code>Request</code> handling here.</p>"},{"location":"aiohttp_migration/#simplified-background-task-handling","title":"Simplified background task handling","text":"<p>In <code>aiohttp</code>, background task handlers require an explicit <code>app</code> parameter: <pre><code>from typing import AsyncGenerator\nfrom aiohttp import web\n\nasync def bg_task(app: web.Application) -&gt; None:\n    print('run task')\n\nasync def app_ctx(app: web.Application) -&gt; AsyncGenerator[None, None]:\n    print('starting background task')\n    yield\n    print('finish')\n\napp = web.Application()\n\napp.on_startup.append(bg_task)\napp.on_shutdown.append(bg_task)\napp.on_cleanup.append(bg_task)\napp.cleanup_ctx.append(app_ctx)\n</code></pre></p> <p>In <code>Rapidy</code>, the <code>app</code> parameter is not required: <pre><code>from contextlib import asynccontextmanager\nfrom typing import AsyncGenerator\nfrom rapidy import Rapidy\n\nasync def bg_task() -&gt; None:\n    print('run task')\n\n@asynccontextmanager\nasync def app_ctx() -&gt; AsyncGenerator[None, None]:\n    print('starting background task')\n    yield\n    print('finishing background task')\n\nrapidy = Rapidy(\n    on_startup=[bg_task],\n    on_shutdown=[bg_task],\n    on_cleanup=[bg_task],\n    lifespan=[app_ctx()],\n)\n# or\nrapidy.lifespan.on_startup.append(bg_task)\nrapidy.lifespan.on_shutdown.append(bg_task)\nrapidy.lifespan.on_cleanup.append(bg_task)\nrapidy.lifespan.append(app_ctx())\n</code></pre></p> <p>The <code>app</code> attribute can still be passed if needed, learn more here.</p> <p>Learn more about background task handling here.</p>"},{"location":"aiohttp_migration/#improved-class-based-handler-routing","title":"Improved class-based handler routing","text":"<p>In <code>aiohttp</code>, class-based handler routing is tied to HTTP method names, limiting flexibility.</p> <p>In <code>Rapidy</code>, handlers can be conveniently grouped: <pre><code>from rapidy import Rapidy\nfrom rapidy.http import controller, get, PathParam\n\n@controller('/user')\nclass UserController:\n    @get('/{user_id}')\n    async def get_by_id(self, user_id: str = PathParam()) -&gt; dict[str, str]:\n        return {'user_id': user_id}\n\n    @get()\n    async def get_all_users(self) -&gt; list[dict[str, str]]:\n        return [{'user_id': '1'}, {'user_id': '2'}]\n\nrapidy = Rapidy(http_route_handlers=[UserController])\n</code></pre></p> <p>Learn more about HTTP handler functionality here.</p>"},{"location":"aiohttp_migration/#simple-data-validation-and-serialization","title":"Simple data validation and serialization","text":"<p>In <code>Rapidy</code>, request data can be easily validated and serialized using <code>pydantic</code>: <pre><code>from pydantic import BaseModel\nfrom rapidy.http import get, Body\n\nclass UserData(BaseModel):\n    name: str\n    age: int\n\n@get('/user')\nasync def handler(data: UserData = Body()) -&gt; dict[str, str]:\n    return {'message': f'User {data.name}, {data.age} years old'}\n</code></pre></p>"},{"location":"aiohttp_migration/#simpler-application-modularization","title":"Simpler Application Modularization","text":"<p>In <code>aiohttp</code>, adding sub-applications requires explicit route additions and <code>Application</code> object initialization: <pre><code>from aiohttp import web\n\nv1_app = web.Application()\napp = web.Application()\napp.add_subapp('/v1', v1_app)\n</code></pre></p> <p>In <code>Rapidy</code>, this process is simpler: <pre><code>from rapidy import Rapidy\nfrom rapidy.http import HTTPRouter\n\nv1_app = HTTPRouter('/v1')\nrapidy = Rapidy(http_route_handlers=[v1_app])\n</code></pre></p>"},{"location":"aiohttp_migration/#key-advantages-of-rapidy","title":"Key Advantages of <code>Rapidy</code>","text":"<ul> <li>More concise code: Reduces boilerplate without sacrificing readability.</li> <li>Convenient routing: Allows grouping handlers within classes.</li> <li>Flexible data validation and serialization: Built-in <code>pydantic</code> support.</li> <li>Simplified request and response handling: Access <code>Request</code> and <code>Response</code> via type annotations.</li> <li>Advanced application lifecycle management: Easy-to-use <code>on_startup</code>, <code>on_shutdown</code>, and <code>on_cleanup</code> hooks.</li> <li>Better integration with Python\u2019s async capabilities: Fewer unnecessary parameters and less manual data handling.</li> </ul> <p>Learn more about <code>Rapidy</code> features here.</p>"},{"location":"aiohttp_migration/#how-to-migrate-from-aiohttp-to-rapidy","title":"How to migrate from <code>aiohttp</code> to <code>Rapidy</code>","text":"<p>Migrating from <code>aiohttp</code> to <code>Rapidy</code> simplifies code, removes boilerplate, improves validation, and makes dependency management easier.</p>"},{"location":"aiohttp_migration/#full-migration","title":"Full migration","text":"<p>Suppose you have an <code>aiohttp</code> application with a request handler, request parameters, validation, and lifecycle hooks:</p> <p>Code in <code>aiohttp</code>: <pre><code>from aiohttp import web\nfrom pydantic import BaseModel, ValidationError\n\nroutes = web.RouteTableDef()\n\nclass UserData(BaseModel):\n    name: str\n    age: int\n\n@routes.post('/user')\nasync def create_user(request: web.Request) -&gt; web.Response:\n    data = await request.json()\n    try:\n        user = UserData(**data)\n    except ValidationError as validation_err:\n        return web.json_response({'error': validation_err.errors()}, status=400)\n    return web.json_response({'message': f'User {user.name}, {user.age} years old'})\n\nasync def on_startup(app: web.Application) -&gt; None:\n    print(\"App is starting...\")\n\napp = web.Application()\napp.on_startup.append(on_startup)\napp.add_routes(routes)\n\nweb.run_app(app)\n</code></pre></p> <p>Code in <code>Rapidy</code>: <pre><code>from rapidy import Rapidy\nfrom rapidy.http import post, Body\nfrom pydantic import BaseModel\n\nclass UserData(BaseModel):\n    name: str\n    age: int\n\n@post('/user')\nasync def create_user(user: UserData = Body()) -&gt; dict[str, str]:\n    return {'message': f'User {user.name}, {user.age} years old'}\n\nasync def on_startup() -&gt; None:\n    print(\"App is starting...\")\n\nrapidy = Rapidy(\n    http_route_handlers=[create_user],\n    on_startup=[on_startup],\n)\n</code></pre></p> <p>Key improvements:</p> <ul> <li>Less boilerplate \u2014 No explicit <code>request: web.Request</code>, <code>Rapidy</code> automatically parses and validates JSON using <code>pydantic</code>.</li> <li>Simplified lifecycle management \u2014 <code>on_startup</code> is passed as a list instead of using <code>app.on_startup.append()</code>.</li> <li>Routing without <code>app.add_routes()</code> \u2014 Handlers are provided via <code>http_route_handlers</code>.</li> </ul>"},{"location":"aiohttp_migration/#partial-migration","title":"Partial migration","text":"<p>Sometimes a full migration is not immediately possible, such as when new functionality needs to be added while retaining some <code>aiohttp</code> code. In this case, you can transition gradually.</p> <p>This approach allows you to migrate code to <code>Rapidy</code> by replacing parts of <code>aiohttp</code> with the new syntax without rewriting the entire project.</p>"},{"location":"aiohttp_migration/#adding-small-features","title":"Adding small features","text":"<p>Suppose you need to retrieve the <code>Host</code> header and include it in the response without changing the rest of the logic.</p> <p>Before (<code>aiohttp</code>): <pre><code>from aiohttp import web\nfrom pydantic import BaseModel, ValidationError\n\nroutes = web.RouteTableDef()\n\nclass UserData(BaseModel):\n    name: str\n    age: int\n\n@routes.post('/user')\nasync def create_user(\n    request: web.Request,\n) -&gt; web.Response:\n    data = await request.json()\n    try:\n        user = UserData(**data)\n    except ValidationError as validation_err:\n        return web.json_response({'error': validation_err.errors()}, status=400)\n    return web.json_response({'message': f'User {user.name}, {user.age} years old'})\n\nasync def on_startup(app: web.Application) -&gt; None:\n    print(\"App is starting...\")\n\napp = web.Application()\napp.on_startup.append(on_startup)\napp.add_routes(routes)\n</code></pre></p> <p>After (<code>Rapidy</code>): <pre><code>from rapidy import Rapidy, web\nfrom pydantic import BaseModel, ValidationError\n\nroutes = web.RouteTableDef()\n\nclass UserData(BaseModel):\n    name: str\n    age: int\n\n@routes.post('/user')\nasync def create_user(\n    request: web.Request,\n    host: str = web.Header(alias='Host'),\n) -&gt; web.Response:\n    data = await request.json()\n    try:\n        user = UserData(**data)\n    except ValidationError as validation_err:\n        return web.Response({'error': validation_err.errors()}, status=400)\n    return web.Response({'message': f'User {user.name}, {user.age} years old, host: {host}'})\n\nasync def on_startup(app: web.Application) -&gt; None:\n    print(\"App is starting...\")\n\napp = web.Application()\napp.on_startup.append(on_startup)\napp.add_routes(routes)\n</code></pre></p> <p>Changes:</p> <ol> <li>Updated imports.</li> <li>Added <code>host: str = web.Header(alias='Host')</code> in the <code>create_user</code> HTTP handler.</li> <li>Replaced <code>json_response</code> with <code>Response</code>, as its functionality is now built into <code>Response</code>.</li> </ol> <p><code>Response</code> in <code>Rapidy</code> offers more features, learn more here.</p> <p>Rapidy can do (almost) everything</p> <p>The example above shows how to extend code using <code>web.RouteTableDef()</code>, but <code>Rapidy</code> also supports all other <code>aiohttp</code> handler declaration styles. Learn more about <code>aiohttp</code>-style handlers here.</p>"},{"location":"aiohttp_migration/#adding-new-functionality-via-sub-applications","title":"Adding new functionality via sub-applications","text":"<p>You can easily extend an existing <code>aiohttp</code> application by adding new functionality through sub-applications.</p> <p>Before (<code>aiohttp</code>): <pre><code>from aiohttp import web\nfrom pydantic import BaseModel\n\nroutes = web.RouteTableDef()\n\nclass UserData(BaseModel):\n    name: str\n    age: int\n\n@routes.post('/user')\nasync def create_user(request: web.Request) -&gt; web.Response:\n    # ... some aiohttp code\n    return web.Response(text='User')\n\nv1_app = web.Application()\nv1_app.add_routes(routes)\n\napp = web.Application()\napp.add_subapp('/v1', v1_app)\n</code></pre></p> <p>After (<code>Rapidy</code>): <pre><code>from rapidy import web\nfrom rapidy.http import HTTPRouter, get\nfrom pydantic import BaseModel\n\nroutes = web.RouteTableDef()\n\nclass UserData(BaseModel):\n    name: str\n    age: int\n\n@routes.get('/user')\nasync def get_user_aiohttp(request: web.Request) -&gt; web.Response:\n    # ... some aiohttp code\n    return web.Response(text='User aiohttp')\n\nv1_app = web.Application()\nv1_app.add_routes(routes)\n\n# --- new functionality\n@get('/user')\nasync def get_user_rapidy() -&gt; str:\n    return 'User rapidy'\n\nv2_router = HTTPRouter('/v2', route_handlers=[get_user_rapidy])\n# ---\n\napp = web.Application(http_route_handlers=[v2_router])\napp.add_subapp('/v1', v1_app)\n</code></pre></p> <p>This approach enables seamless integration of <code>Rapidy</code> into existing code without requiring significant modifications.</p> <p>However, you will need to update <code>aiohttp</code> imports to <code>rapidy</code> and replace <code>json_response</code> with <code>Response</code> throughout your code.</p>"},{"location":"docs/","title":"Introduction","text":"<p>Welcome to the Rapidy documentation.</p> <p>Rapidy is a simple and fast web framework for building concise HTTP API servers. It provides built-in validation, serialization, and asynchronous support, making API development easy and efficient.</p> <p>A quick overview of features is available in the Quickstart section.</p> <p>Rapidy is built on two powerful tools:</p> <ul> <li>aiohttp \u2013 asynchronous web handling</li> <li>pydantic \u2013 data validation and serialization</li> </ul> <p>Since Rapidy relies on aiohttp and pydantic, we recommend exploring their official documentation alongside the Rapidy documentation.</p> <p>Documentation for aiohttp.</p> <p>Documentation for pydantic.</p>"},{"location":"docs/dependency_injection/","title":"Dependency Injection","text":"<p><code>Rapidy</code> uses the dishka library as its built-in Dependency Injection (DI) mechanism.</p> <p>We aimed to choose a DI library aligned with the philosophy of <code>Rapidy</code>: simplicity, speed, transparency, and scalability. <code>dishka</code> perfectly fits these principles, offering developers a powerful tool without unnecessary complexity.</p> <p><code>dishka</code> is a modern and lightweight library for asynchronous dependency injection in Python applications. It focuses on high performance, minimalism, and configuration flexibility, making it ideal for next-generation web frameworks like <code>Rapidy</code>.</p> <p>Its key advantages include:</p> <ul> <li>Native asyncio support: full support for <code>async</code>/<code>await</code>, proper lifecycle management of dependencies.</li> <li>Minimalist architecture: compact core, no magic, no excessive abstractions \u2014 dependency management is transparent and predictable.</li> <li>Invisibility to business logic: injection via type annotations (<code>FromDI</code>).</li> <li>Flexible scope management: <code>App</code>, <code>Session</code>, <code>Request</code>, etc.</li> <li>Variety of providers: factories, objects, async functions.</li> <li>Contextual injection: allows passing dynamic context \u2014 e.g., for the current user.</li> <li>Framework integration: <code>aiohttp</code>, <code>FastStream</code>, <code>Rapidy</code>, and others.</li> <li>Testing convenience: providers can be easily replaced in tests, no mocks or patches needed.</li> </ul> <p>In <code>Rapidy</code>, dishka is available out-of-the-box \u2014 no additional setup required.</p>"},{"location":"docs/dependency_injection/#examples-of-using-dishka-in-rapidy","title":"Examples of using dishka in Rapidy","text":""},{"location":"docs/dependency_injection/#simple-dependency-injection-example","title":"Simple dependency injection example","text":"<p><code>Rapidy</code> provides a <code>FromDI</code> wrapper (alias for <code>FromDishka</code>), which can be used to inject dependencies:</p> <pre><code>from rapidy import Rapidy\nfrom rapidy.http import get\nfrom rapidy.depends import FromDI, provide, Provider, Scope\n\nclass FooProvider(Provider):\n    @provide(scope=Scope.REQUEST)\n    async def c(self) -&gt; int:\n        return 1\n\n@get('/')\nasync def handler(c: FromDI[int]) -&gt; dict:\n    return {\"value\": c}\n\napp = Rapidy(\n    http_route_handlers=[handler],\n    di_providers=[FooProvider()],\n)\n</code></pre> <p>What happens here:</p> <ol> <li> <p>Provider definition    The <code>FooProvider</code> class inherits from <code>Provider</code> and defines a dependency <code>c</code> of type <code>int</code>, created per request (<code>Scope.REQUEST</code>).</p> </li> <li> <p>Request handler registration    The <code>@get('/')</code> decorator registers the <code>handler</code> function to handle GET requests at <code>/</code>.</p> </li> <li> <p>Injecting the dependency    The argument <code>c: FromDI[int]</code> indicates that <code>c</code> should be obtained from the DI container at call time.</p> </li> <li> <p>Creating the application    A <code>Rapidy</code> instance is created with the <code>handler</code> and the <code>FooProvider</code>.</p> </li> </ol>"},{"location":"docs/dependency_injection/#sqlalchemy-session-example","title":"SQLAlchemy session example","text":"Open example <pre><code>from typing import AsyncIterable\n\nfrom pydantic_settings import SettingsConfigDict, BaseSettings\nfrom rapidy import Rapidy, run_app\nfrom rapidy.depends import FromDI, Provider, Scope, provide, from_context\nfrom rapidy.web_response import Response\nfrom sqlalchemy import make_url, DateTime, MetaData, Table, delete, select, update\nfrom sqlalchemy.ext.asyncio import async_sessionmaker, AsyncSession, AsyncEngine, create_async_engine\nfrom rapidy.http import controller, get, post, PathParam, Body, put, delete\nfrom pydantic import BaseModel, ConfigDict\nfrom datetime import datetime\nfrom typing import Any, Callable\nfrom uuid import UUID, uuid4\n\nfrom sqlalchemy.ext.compiler import compiles\nfrom sqlalchemy.orm import DeclarativeBase, Mapped, mapped_column\nfrom sqlalchemy.sql import expression\nfrom sqlalchemy.sql.schema import ColumnCollectionConstraint, Column\n\n\n# --- App config ---\nclass PoolConfig(BaseModel):\n    recycle_sec: int = 3600\n    max_size: int = 10\n    max_overflow_size: int = 10\n\n\nclass DBConfig(BaseModel):\n    echo: bool = False\n    pool: PoolConfig = PoolConfig()\n\n    timeout: int = 30\n\n    db_name: str\n    user: str\n    password: str\n    host: str\n    port: int = 5432\n\n    @property\n    def dsn(self) -&gt; str:\n        return f'postgresql+asyncpg://{self.user}:{self.password}@{self.host}:{self.port}/{self.db_name}'\n\n\nclass AppConfig(BaseSettings):\n    host: str = \"0.0.0.0\"\n    port: int = 8080\n\n    db: DBConfig\n\n    model_config = SettingsConfigDict(\n        extra=\"ignore\",\n        env_file=\".env\",\n        env_file_encoding=\"utf-8\",\n        env_nested_delimiter=\"__\",\n    )\n\n\n# --- DB models ---\n\ndef _col_names_convertor(constraint: ColumnCollectionConstraint, table: Table) -&gt; str:\n    return \"_\".join([column.name for column in constraint.columns.values()])\n\n\nconvention: dict[str, str | Callable[[ColumnCollectionConstraint, Table], str]] = {\n    \"all_column_names\": _col_names_convertor,\n    \"ix\": \"ix__%(table_name)s__%(all_column_names)s\",\n    \"uq\": \"uq__%(table_name)s__%(all_column_names)s\",\n    \"ck\": \"ck__%(table_name)s__%(constraint_name)s\",\n    \"fk\": \"fk__%(table_name)s__%(all_column_names)s__%(referred_table_name)s\",\n    \"pk\": \"pk__%(table_name)s\",\n}\n\n\nclass UtcNow(expression.FunctionElement[Any]):\n    type = DateTime()\n    inherit_cache = True\n\n\n@compiles(UtcNow, \"postgresql\")\ndef pg_utcnow(element: Any, compiler: Any, **kw: Any) -&gt; str:\n    return \"TIMEZONE('utc', CURRENT_TIMESTAMP)\"\n\n\nclass BaseDBModel(DeclarativeBase):\n    __tablename__: str\n\n    id: Mapped[UUID] = mapped_column(primary_key=True, default=uuid4)\n\n    create_date: Mapped[datetime] = Column(\n        DateTime(timezone=True),\n        nullable=False,\n        server_default=UtcNow(),\n    )\n    update_date: Mapped[datetime] = Column(\n        DateTime(timezone=True),\n        nullable=False,\n        server_default=UtcNow(),\n        onupdate=UtcNow(),\n    )\n\n    metadata = MetaData(\n        schema=\"data\",\n        naming_convention=convention,\n    )\n\n\nclass Article(BaseDBModel):\n    __tablename__ = \"article\"\n\n    title: Mapped[str]\n    text: Mapped[str]\n\n\n# --- DI Providers ---\n\nclass ConfigProvider(Provider):\n    scope = Scope.APP\n    config = from_context(provides=AppConfig)\n\n    @provide\n    def get_db_config(self, config: AppConfig) -&gt; DBConfig:\n        return config.db\n\n\nclass DBProvider(Provider):\n    scope = Scope.APP\n\n    @provide\n    async def get_engine(self, db_config: DBConfig) -&gt; AsyncIterable[AsyncEngine]:\n        engine = create_async_engine(\n            url=make_url(db_config.dsn),\n            echo=db_config.echo,\n            pool_size=db_config.pool.max_size,\n            pool_recycle=db_config.pool.recycle_sec,\n            max_overflow=db_config.pool.max_overflow_size,\n            execution_options={\n                \"asyncpg_timeout\": db_config.timeout,\n            },\n        )\n        try:\n            yield engine\n        finally:\n            await engine.dispose(True)\n\n    @provide\n    def get_pool(self, engine: AsyncEngine) -&gt; async_sessionmaker[AsyncSession]:\n        return async_sessionmaker(bind=engine, autoflush=False)\n\n    @provide(scope=Scope.REQUEST)\n    async def get_session(self, pool: async_sessionmaker[AsyncSession]) -&gt; AsyncIterable[AsyncSession]:\n        async with pool() as session, session.begin():\n            exc = yield session\n            if exc is not None:\n                await session.rollback()\n\n\n# --- Api ---\n\nclass ArticleCreate(BaseModel):\n    title: str\n    text: str\n\n\nclass ArticleUpdate(BaseModel):\n    title: str | None = None\n    text: str | None = None\n\n\nclass ArticleResult(BaseModel):\n    model_config = ConfigDict(from_attributes=True)\n\n    id: UUID\n    title: str\n    text: str\n    create_date: datetime\n    update_date: datetime\n\n\n@controller(\"/article\")\nclass ArticleController:\n\n    @get(\"/{article_id}\")\n    async def get_one(\n        self,\n        session: FromDI[AsyncSession],\n        response: Response,\n        article_id: UUID = PathParam(),\n    ) -&gt; ArticleResult | None:\n        article = await session.get(Article, article_id)\n        if article is None:\n            response.set_status(404)\n            return None\n\n        return ArticleResult.model_validate(article)\n\n    @get(response_type=list[ArticleResult])\n    async def get_all(self, session: FromDI[AsyncSession]) -&gt; list[ArticleResult]:\n        result = await session.execute(select(Article))\n        return [ArticleResult.model_validate(row) for row in result.scalars().all()]\n\n    @post()\n    async def create(self, session: FromDI[AsyncSession], data: ArticleCreate = Body()) -&gt; ArticleResult:\n        article = Article(**data.model_dump())\n        session.add(article)\n\n        await session.flush()\n        await session.refresh(article)\n        return ArticleResult.model_validate(article)\n\n    @put(\"/{article_id}\")\n    async def put(\n        self,\n        session: FromDI[AsyncSession],\n        article_id: UUID = PathParam(),\n        data: ArticleUpdate = Body(),\n    ) -&gt; ArticleResult | None:\n        stmt = (\n            update(Article)\n            .where(Article.id == article_id)\n            .values(**data.model_dump(exclude_unset=True))\n            .returning(Article)\n        )\n        result = await session.execute(stmt)\n        updated_article = result.scalar_one_or_none()\n        return ArticleResult.model_validate(updated_article) if updated_article else None\n\n    @delete(\"/{article_id}\")\n    async def delete(\n        self,\n        session: FromDI[AsyncSession],\n        article_id: UUID = PathParam(),\n    ) -&gt; None:\n        await session.execute(delete(Article).where(Article.id == article_id))\n\n\ndef create_app() -&gt; Rapidy:\n    return Rapidy(\n        http_route_handlers=[ArticleController],\n        di_providers=[\n            ConfigProvider(),\n            DBProvider(),\n        ],\n        di_context={\n            AppConfig: AppConfig(),\n        },\n    )\n\nif __name__ == '__main__':\n    app = create_app()\n    run_app(app)\n</code></pre>"},{"location":"docs/dependency_injection/#injection-methods","title":"Injection methods","text":"<p>To inject dependencies, use <code>rapidy.depends.FromDI</code> (or <code>dishka.FromDishka</code>) and <code>rapidy.depends.FromComponent</code> (or <code>dishka.FromComponent</code>).</p> <pre><code>from rapidy import Rapidy\nfrom rapidy.http import get\nfrom rapidy.depends import FromDI, provide, Provider, Scope\n\nclass FooProvider(Provider):\n    @provide(scope=Scope.REQUEST)\n    async def c(self) -&gt; int:\n        return 1\n\n@get('/')\nasync def handler(c: FromDI[int]) -&gt; dict:\n    return {\"value\": c}\n\napp = Rapidy(\n    http_route_handlers=[handler],\n    di_providers=[FooProvider()],\n)\n</code></pre> <pre><code>from typing import Annotated\n\nfrom rapidy import Rapidy\nfrom rapidy.http import get\nfrom rapidy.depends import FromComponent, provide, Provider, Scope\n\nclass FooProvider(Provider):\n    @provide(scope=Scope.REQUEST)\n    async def c(self) -&gt; int:\n        return 1\n\n@get('/')\nasync def handler(c: Annotated[int, FromComponent()]) -&gt; dict:\n    return {\"value\": c}\n\napp = Rapidy(\n    http_route_handlers=[handler],\n    di_providers=[FooProvider()],\n)\n</code></pre>"},{"location":"docs/dependency_injection/#features","title":"Features","text":""},{"location":"docs/dependency_injection/#accessing-the-container","title":"Accessing the container","text":"<p>You can access the current async container via the root <code>Rapidy</code> application. In child apps, it will be <code>None</code>.</p> <pre><code>from rapidy import Rapidy\n\nroot_app = Rapidy()\nv1_app = Rapidy()\nroot_app.add_subapp('/v1', v1_app)\n\nroot_app.di_container  # AsyncContainer\nv1_app.di_container  # None\n</code></pre>"},{"location":"docs/dependency_injection/#handlers-and-middleware","title":"Handlers and middleware","text":"<p><code>dishka</code> is fully integrated with <code>Rapidy</code>, supporting auto-injection in all handler types:</p> <pre><code># providers.py\nfrom rapidy.depends import provide, Provider, Scope\n\nclass FooProvider(Provider):\n    @provide(scope=Scope.REQUEST)\n    async def c(self) -&gt; int:\n        return 1\n</code></pre> <p>Controllers:</p> <pre><code>from rapidy import Rapidy\nfrom rapidy.http import controller, get\nfrom rapidy.depends import FromDI\nfrom .providers import FooProvider\n\n@controller('/')\nclass MyController:\n    @get()\n    async def handler(self, c: FromDI[int]) -&gt; dict:\n        return {\"value\": c}\n\napp = Rapidy(http_route_handlers=[MyController], di_providers=[FooProvider()])\n</code></pre> <p>View classes:</p> <pre><code>from rapidy import Rapidy\nfrom rapidy.web import View\nfrom rapidy.depends import FromDI\nfrom .providers import FooProvider\n\nclass FooView(View):\n    async def get(self, c: FromDI[int]) -&gt; dict:\n        return {\"value\": c}\n\napp = Rapidy(di_providers=[FooProvider()])\napp.router.add_view('/', FooView)\n</code></pre> <p>Middleware:</p> <pre><code>from rapidy import Rapidy\nfrom rapidy.http import Request, StreamResponse, get, middleware\nfrom rapidy.typedefs import CallNext\nfrom rapidy.depends import FromDI\nfrom .providers import FooProvider\n\n@middleware\nasync def some_middleware(\n    request: Request,\n    call_next: CallNext,\n    c: FromDI[int],\n) -&gt; StreamResponse:\n    print({\"value\": c})\n    return await call_next(request)\n\n@get('/')\nasync def handler(c: FromDI[int]) -&gt; dict:\n    return {\"value\": c}\n\napp = Rapidy(\n    middlewares=[some_middleware],\n    http_route_handlers=[handler],\n    di_providers=[FooProvider()],\n)\n</code></pre>"},{"location":"docs/dependency_injection/#additional-notes","title":"Additional notes","text":"<ul> <li>If the first handler argument lacks an annotation, <code>Rapidy</code> skips it and continues injection.</li> <li>All <code>dishka</code> features are supported: factories, nested providers, lifecycle control, and explicit dependency retrieval.</li> </ul>"},{"location":"docs/dependency_injection/#external-container","title":"External container","text":"<p>You can manually pass your own <code>AsyncContainer</code> \u2014 useful if the container is pre-created and reused across contexts.</p> <pre><code>from rapidy import Rapidy\nfrom rapidy.depends import make_async_container  # or: from dishka import make_async_container\nfrom .providers import FooProvider\n\ncontainer = make_async_container(FooProvider())\n\nasync def shutdown_di_container() -&gt; None:\n    await container.close()\n\napp = Rapidy(\n   di_container=container,\n   http_route_handlers=[...],\n   on_shutdown=[shutdown_di_container],  # manual shutdown\n)\n</code></pre> <p>In this case:</p> <ul> <li><code>Rapidy</code> won\u2019t create a container.</li> <li>All <code>di_*</code> parameters are ignored.</li> <li>You must manually close the container.</li> </ul>"},{"location":"docs/dependency_injection/#dishka-limitations","title":"dishka limitations","text":"<p><code>dishka</code> only works with HTTP handlers and middleware. If you use a container in both <code>faststream</code> and <code>rapidy</code>, you\u2019ll need to use <code>@inject</code> explicitly in <code>faststream</code>.</p>"},{"location":"docs/dependency_injection/#rapidy-application-di-attributes","title":"Rapidy (Application) DI attributes","text":""},{"location":"docs/dependency_injection/#di_container","title":"di_container","text":"<p>External dependency container.</p> <pre><code>di_container: AsyncContainer | None = None\n</code></pre> <p>If <code>di_container</code> is provided, a new container won\u2019t be created.</p> <p>Dishka docs \u2014 container.</p>"},{"location":"docs/dependency_injection/#di_providers","title":"di_providers","text":"<p>List of providers to register.</p> <pre><code>di_providers: Sequence[BaseProvider] = ()\n</code></pre> <p>Ignored if <code>di_container</code> is provided.</p> <p>Dishka docs \u2014 providers.</p>"},{"location":"docs/dependency_injection/#di_scopes","title":"di_scopes","text":"<p>Scope class.</p> <pre><code>di_scopes: type[BaseScope] = Scope\n</code></pre> <p>Dishka docs \u2014 scopes.</p>"},{"location":"docs/dependency_injection/#di_context","title":"di_context","text":"<p>Additional context for providers.</p> <pre><code>di_context: dict[Any, Any] | None = None\n</code></pre> <p>Dishka docs \u2014 context.</p>"},{"location":"docs/dependency_injection/#di_lock_factory","title":"di_lock_factory","text":"<p>Factory for container locks.</p> <pre><code>di_lock_factory: Callable[[], contextlib.AbstractAsyncContextManager[Any]] | None = Lock\n</code></pre> <p>Dishka docs \u2014 lock_factory.</p> <pre><code>import threading\n\ncontainer = make_container(provider, lock_factory=threading.Lock):\nwith container(lock_factory=threading.Lock) as nested_container:\n    ...\n\nimport asyncio\n\ncontainer = make_async_container(provider, lock_factory=asyncio.Lock)\nasync with container(lock_factory=asyncio.Lock) as nested_container:\n    ...\n</code></pre>"},{"location":"docs/dependency_injection/#di_skip_validation","title":"di_skip_validation","text":"<p>Flag to disable provider type checks.</p> <pre><code>di_skip_validation: bool = False\n</code></pre> <p>Dishka docs \u2014 skip_validation.</p>"},{"location":"docs/dependency_injection/#di_start_scope","title":"di_start_scope","text":"<p>Initial container scope.</p> <pre><code>di_start_scope: BaseScope | None = None\n</code></pre> <p>Dishka docs \u2014 start_scope.</p>"},{"location":"docs/dependency_injection/#di_validation_settings","title":"di_validation_settings","text":"<p>Container validation settings.</p> <pre><code>di_validation_settings: ValidationSettings = DEFAULT_VALIDATION\n</code></pre> <p>Dishka docs \u2014 alias.</p> <p>Dishka docs \u2014 from_context.</p> <p>Dishka docs \u2014 provide.</p>"},{"location":"docs/encoders/","title":"JSONIFY","text":""},{"location":"docs/encoders/#description","title":"Description","text":"<p>jsonify is a <code>Rapidy</code> encoder used for converting complex Python objects into simpler Python objects or strings.</p> <p><code>jsonify</code> greatly simplifies the process of saving and sending complex data.</p> <pre><code>from datetime import datetime\nfrom decimal import Decimal\nfrom pydantic import BaseModel, Field\nfrom rapidy.encoders import jsonify\n\nclass InnerData(BaseModel):\n    text: str = 'text'\n\nclass ComplexData(BaseModel):\n    decimal: Decimal = Decimal('1.22223311')\n    date: datetime = datetime.now()\n    inner: InnerData = Field(default_factory=InnerData)\n\njsonify('text')  # 'text'\njsonify('text', dumps=True)  # '\"text\"'\n\njsonify(Decimal(\"1.22223311\"))  # '1.22223311'\n\njsonify(ComplexData())  # {'decimal': '1.22223311', 'date': '2024-10-30T10:51:07.884276', 'inner': {'text': 'text'}}\njsonify(ComplexData(), dumps=True)  # '{\"decimal\": \"1.22223311\", \"date\": \"2024-10-30T10:51:07.884276\", \"inner\": {\"text\": \"text\"}}'\n</code></pre> <p>jsonify allows you to convert any <code>python</code> object into a string or a simpler object that can be converted to a <code>json</code> format.</p> <p>You can use <code>jsonify</code> to prepare data for saving to a database (for example, for <code>MongoDB</code>/<code>Redis</code> or as a <code>JSON</code>/<code>JSONB</code> field in <code>Postgres</code>).</p> <p><code>Rapidy</code> also uses <code>jsonify</code> internally when preparing server responses.</p> <p><code>Decimal</code> is always converted to a string.</p>"},{"location":"docs/encoders/#jsonify-attributes","title":"<code>jsonify</code> Attributes","text":""},{"location":"docs/encoders/#obj","title":"obj","text":"<p>obj: <code>Any</code> \u2014 the object to be converted (can be practically anything).</p>"},{"location":"docs/encoders/#include","title":"include","text":"<p>include: <code>set[str] | dict[str, Any] | None = None</code> \u2014 Pydantic's <code>include</code> parameter, passed to Pydantic models to specify the fields to include. <pre><code>from pydantic import BaseModel, Field\nfrom rapidy.encoders import jsonify\n\nclass Result(BaseModel):\n    value: str = Field('data', alias='someValue')\n    another_value: str = Field('another_data', alias='someAnotherValue')\n\njsonify(\n    Result(),\n    include={'value'},\n)\n# {'someValue': 'data'}\n</code></pre></p>"},{"location":"docs/encoders/#exclude","title":"exclude","text":"<p>exclude: <code>set[str] | dict[str, Any] | None = None</code> \u2014 Pydantic's <code>exclude</code> parameter, passed to Pydantic models to specify the fields to exclude. <pre><code>from pydantic import BaseModel, Field\nfrom rapidy.encoders import jsonify\n\nclass Result(BaseModel):\n    value: str = Field('data', alias='someValue')\n    another_value: str = Field('another_data', alias='someAnotherValue')\n\njsonify(\n    Result(),\n    exclude={'value'},\n)\n# {'someAnotherValue': 'another_data'}\n</code></pre></p>"},{"location":"docs/encoders/#by_alias","title":"by_alias","text":"<p>by_alias: <code>bool = True</code> \u2014 Pydantic's <code>by_alias</code> parameter, passed to Pydantic models to determine whether to use the alias names (if provided) or the Python attribute names in the output. <pre><code>from pydantic import BaseModel, Field\nfrom rapidy.encoders import jsonify\n\nclass Result(BaseModel):\n    value: str = Field('data', alias='someValue')\n\njsonify(\n    Result(),\n    by_alias=True,  # &lt;-- default\n)\n# {\"someValue\": \"data\"}\n\n...\n\njsonify(\n    Result(),\n    by_alias=False,\n)\n# {\"value\": \"data\"}\n</code></pre></p>"},{"location":"docs/encoders/#exclude_unset","title":"exclude_unset","text":"<p>exclude_unset: <code>bool = False</code> \u2014 Pydantic's <code>exclude_unset</code> parameter, passed to Pydantic models to determine whether to exclude fields that were not explicitly set (and only have default values) from the output. <pre><code>from pydantic import BaseModel, Field\nfrom rapidy.encoders import jsonify\n\nclass Result(BaseModel):\n    value: str = Field('data', alias='someValue')\n    another_value: str = Field('another_data', alias='someAnotherValue')\n\njsonify(\n    Result(someAnotherValue='new_data'),\n    exclude_unset=False,  # &lt;-- default\n)\n# {\"someValue\": \"data\", \"someAnotherValue\": \"new_data\"}\n\n...\n\njsonify(\n    Result(someAnotherValue='new_data'),\n    exclude_unset=True,\n)\n# {\"someAnotherValue\": \"new_data\"}\n</code></pre></p>"},{"location":"docs/encoders/#exclude_defaults","title":"exclude_defaults","text":"<p>exclude_defaults: <code>bool = False</code> \u2014 Pydantic's <code>exclude_defaults</code> parameter, passed to Pydantic models to determine whether to exclude fields with default values, even if they were explicitly set. <pre><code>from pydantic import BaseModel, Field\nfrom rapidy.encoders import jsonify\n\nclass Result(BaseModel):\n    value: str = Field('data', alias='someValue')\n\njsonify(\n    Result(),\n    response_exclude_defaults=True,\n)\n# {}\n</code></pre></p>"},{"location":"docs/encoders/#exclude_none","title":"exclude_none","text":"<p>exclude_none: <code>bool = False</code> \u2014 Pydantic's <code>exclude_none</code> parameter, passed to Pydantic models to determine whether to exclude fields with a <code>None</code> value from the output. <pre><code>from pydantic import BaseModel, Field\nfrom rapidy.encoders import jsonify\n\nclass Result(BaseModel):\n    value: str = Field('data', alias='someValue')\n    none_value: None = None\n\njsonify(\n    Result(),\n    exclude_none=True,\n)\n# {\"someValue\": \"data\"}\n\n...\n\njsonify(\n    Result(),\n    exclude_none=False,  # default\n)\n# {\"someValue\": \"data\", \"none_value\": null}\n</code></pre></p>"},{"location":"docs/encoders/#charset","title":"charset","text":"<p>charset: <code>str = 'utf-8'</code> \u2014 the character set to be used for encoding and decoding the <code>obj</code> data. <pre><code>from rapidy.enums import Charset\nfrom rapidy.encoders import jsonify\n\njsonify(\n    'data',\n    charset=Charset.utf32,\n    # or\n    charset='utf32',\n)\n</code></pre></p>"},{"location":"docs/encoders/#dumps","title":"dumps","text":"<p>dumps: <code>bool = True</code> \u2014 a flag determining whether to convert the created object into a string. Can be set to <code>False</code> if the object is already a <code>json</code> string. <pre><code>from rapidy.encoders import jsonify\n\njsonify('text')  # 'text'\njsonify('text', dumps=True)  # '\"text\"'\n</code></pre></p>"},{"location":"docs/encoders/#dumps_encoder","title":"dumps_encoder","text":"<p>dumps_encoder: <code>Callable = json.dumps</code> \u2014 any callable object that takes an object and returns a JSON string. <pre><code>from typing import Any\nfrom rapidy.encoders import jsonify\n\ndef custom_encoder(obj: Any) -&gt; str:\n    ...\n\njsonify(\n    'data',\n    dumps_encoder=custom_encoder,\n)\n</code></pre></p>"},{"location":"docs/encoders/#custom_encoder","title":"custom_encoder","text":"<p>custom_encoder: <code>Callable | None = None</code> \u2014 Pydantic's <code>custom_encoder</code> parameter, passed to Pydantic models to define a custom encoder.</p>"},{"location":"docs/enums/","title":"Enums","text":""},{"location":"docs/enums/#description","title":"Description","text":"<p><code>Rapidy</code> supports multiple types of enumerations, making the code more readable and maintainable.</p> <p>Instead of using \"magic\" numbers or strings, clear and meaningful names are applied, which enhances code clarity and reduces the likelihood of errors.</p> <p>All enumerations (<code>enum</code>) are located in the <code>rapidy.enums</code> module.</p>"},{"location":"docs/enums/#contenttype","title":"ContentType","text":"<p><code>rapidy.enums.ContentType</code> \u2014 an enumeration containing commonly used <code>MIME types</code>.</p> <pre><code>class ContentType(str, Enum):\n    any = '*/*'\n\n    # application\n    json = 'application/json'\n    ldap = 'application/ld+json'\n    app_xml = 'application/xml'\n    zip = 'application/zip'\n    pdf = 'application/pdf'\n    stream = 'application/octet-stream'\n    x_www_form = 'application/x-www-form-urlencoded'\n\n    # text\n    text_plain = 'text/plain'\n    text_html = 'text/html'\n    text_css = 'text/css'\n    text_csv = 'text/csv'\n    text_js = 'text/javascript'\n    text_xml = 'text/xml'\n    text_any = 'text/*'\n\n    # multipart\n    m_part_mixed = 'multipart/mixed'\n    m_part_alt = 'multipart/alternative'\n    m_part_related = 'multipart/related'  # used by MHTML (HTML mail)\n    m_part_form_data = 'multipart/form-data'\n\n    # image\n    img_jpeg = 'image/jpeg'\n    img_png = 'image/png'\n    img_gif = 'image/gif'\n    img_tiff = 'image/tiff'\n    img_x_ico = 'image/x-icon'\n    img_ms_ico = 'image/vnd.microsoft.icon'\n    img_svg_xml = 'image/svg+xml'\n    img_vnd_djvu = 'image/vnd.djvu'\n\n    # audio\n    audio_mpeg = 'audio/mpeg'\n    audio_x_ms_wma = 'audio/x-ms-wma'\n    audio_x_wav = 'audio/x-wav'\n\n    # video\n    video_mpeg = 'video/mpeg'\n    video_mp4 = 'video/mp4'\n    video_quicktime = 'video/quicktime'\n    video_x_ms_wmv = 'video/x-ms-wmv'\n    video_x_flv = 'video/x-flv'\n    video_webm = 'video/webm'\n</code></pre> <p>Couldn't find what you were looking for?</p> <p>If you couldn't find the <code>MIME type</code> you need, you can specify it as a string (<code>application/some-type</code>) or suggest adding it to <code>ContentType</code> here.</p>"},{"location":"docs/enums/#charset","title":"Charset","text":"<p><code>rapidy.enums.Charset</code> \u2014 an enumeration containing commonly used character encodings (<code>charset</code>).</p> <pre><code>class Charset(str, Enum):\n    utf8 = 'utf-8'\n    utf16 = 'utf-16'\n    utf32 = 'utf-32'\n</code></pre> <p>Couldn't find the encoding you need?</p> <p>If the required encoding is not listed, you can specify it as a string (<code>utf-8</code>) or suggest adding it to <code>Charset</code> here.</p>"},{"location":"docs/enums/#headername","title":"HeaderName","text":"<p><code>rapidy.enums.HeaderName</code> \u2014 an enumeration containing commonly used HTTP header names.</p> <pre><code>class HeaderName(str, Enum):\n    content_type = 'Content-Type'\n    content_length = 'Content-Length'\n    content_encoding = 'Content-Encoding'\n    content_language = 'Content-Language'\n    content_location = 'Content-Location'\n    content_md5 = 'Content-MD5'\n    content_range = 'Content-Range'\n    expires = 'Expires'\n    last_modified = 'Last-Modified'\n\n    host = 'Host'\n    user_agent = 'User-Agent'\n    cookie = 'Cookie'\n\n    etag = 'ETag'\n    location = 'Location'\n    server = 'Server'\n    set_cookie = 'Set-Cookie'\n    retry_after = 'Retry-After'\n\n    authorization = 'Authorization'\n    www_authenticate = 'WWW-Authenticate'\n    proxy_authenticate = 'Proxy-Authenticate'\n    proxy_authorization = 'Proxy-Authorization'\n</code></pre> <p>Couldn't find the header you need?</p> <p>If the required header is not listed, you can specify it as a string (<code>Awesome-Header</code>) or suggest adding it to <code>HeaderName</code> here.</p>"},{"location":"docs/lifespan/","title":"lifespan","text":""},{"location":"docs/lifespan/#description","title":"Description","text":"<p>Lifespan is a lifecycle manager for background tasks in <code>Rapidy</code>.</p> <p>It manages tasks that should be started before or after the server starts or run continuously.</p>"},{"location":"docs/lifespan/#on_startup","title":"on_startup","text":"<p>on_startup refers to tasks that are executed in the event loop immediately after the application starts, along with the request handler.</p> <p><code>on_startup</code> handlers must have the following signature.</p> <p><pre><code>from rapidy import Rapidy\n\ndef startup() -&gt; None:\n    print('startup')\n\nrapidy = Rapidy(on_startup=[startup])\n</code></pre> <pre><code>from rapidy import Rapidy\n\ndef startup(rapidy: Rapidy) -&gt; None:\n    print(f'startup, application: {app}')\n\nrapidy = Rapidy(on_startup=[startup])\n</code></pre> <pre><code>from rapidy import Rapidy\n\nasync def async_startup() -&gt; None:\n    print('async_startup')\n\nrapidy = Rapidy(on_startup=[async_startup])\n</code></pre> <pre><code>from rapidy import Rapidy\n\nasync def async_startup(rapidy: Rapidy) -&gt; None:\n    print(f'async_startup, application: {app}')\n\nrapidy = Rapidy(on_startup=[async_startup])\n</code></pre></p> <p>If a handler has attributes, the current instance of <code>Rapidy</code> will always be passed as the first argument.</p> <p>Adding handlers to an already created <code>Rapidy</code> instance.</p> <pre><code>from rapidy import Rapidy\n\nasync def startup() -&gt; None:\n    print('startup')\n\nrapidy = Rapidy()\nrapidy.lifespan.on_startup.append(startup)\n</code></pre>"},{"location":"docs/lifespan/#on_shutdown","title":"on_shutdown","text":"<p>on_shutdown refers to tasks executed after the server stops.</p> <p>This mechanism can be used to properly close long-lived connections such as WebSockets or streaming data.</p> <p><code>on_shutdown</code> handlers must have the following signature.</p> <p><pre><code>from rapidy import Rapidy\n\ndef shutdown() -&gt; None:\n    print('shutdown')\n\nrapidy = Rapidy(on_shutdown=[shutdown])\n</code></pre> <pre><code>from rapidy import Rapidy\n\ndef shutdown(rapidy: Rapidy) -&gt; None:\n    print(f'shutdown, application: {rapidy}')\n\nrapidy = Rapidy(on_shutdown=[shutdown])\n</code></pre> <pre><code>from rapidy import Rapidy\n\nasync def async_shutdown() -&gt; None:\n    print('async_shutdown')\n\nrapidy = Rapidy(on_shutdown=[async_shutdown])\n</code></pre> <pre><code>from rapidy import Rapidy\n\nasync def async_shutdown(rapidy: Rapidy) -&gt; None:\n    print(f'async_shutdown, application: {rapidy}')\n\nrapidy = Rapidy(on_shutdown=[async_shutdown])\n</code></pre></p> <p>If a handler has attributes, the current instance of <code>Application</code> will always be passed as the first argument.</p> <p>Adding handlers to an already created <code>Application</code> instance.</p> <pre><code>from rapidy import Rapidy\n\nasync def shutdown() -&gt; None:\n    print('shutdown')\n\nrapidy = Rapidy()\nrapidy.lifespan.on_shutdown.append(shutdown)\n</code></pre>"},{"location":"docs/lifespan/#on_cleanup","title":"on_cleanup","text":"<p>on_cleanup refers to tasks executed after the server stops and all <code>on_shutdown</code> handlers have been completed.</p> <p>This signal can be used, for example, to properly close database connections.</p> <p><code>on_cleanup</code> handlers must have the following signature.</p> <p><pre><code>from rapidy import Rapidy\n\ndef cleanup() -&gt; None:\n    print('cleanup')\n\nrapidy = Rapidy(on_cleanup=[cleanup])\n</code></pre> <pre><code>from rapidy import Rapidy\n\ndef cleanup(rapidy: Rapidy) -&gt; None:\n    print(f'cleanup, application: {rapidy}')\n\nrapidy = Rapidy(on_cleanup=[cleanup])\n</code></pre> <pre><code>from rapidy import Rapidy\n\nasync def async_cleanup() -&gt; None:\n    print('async_cleanup')\n\nrapidy = Rapidy(on_cleanup=[async_cleanup])\n</code></pre> <pre><code>from rapidy import Rapidy\n\nasync def async_cleanup(rapidy: Rapidy) -&gt; None:\n    print(f'async_cleanup, application: {rapidy}')\n\nrapidy = Rapidy(on_cleanup=[async_cleanup])\n</code></pre></p> <p>If a handler has attributes, the current instance of <code>Application</code> will always be passed as the first argument.</p> <p>Adding handlers to an already created <code>Application</code> instance.</p> <pre><code>from rapidy import Rapidy\n\nasync def cleanup() -&gt; None:\n    print('cleanup')\n\nrapidy = Rapidy()\nrapidy.lifespan.on_cleanup.append(cleanup)\n</code></pre> <p><code>on_cleanup</code> signals are executed last.</p>"},{"location":"docs/lifespan/#lifespan_1","title":"lifespan","text":"<p>lifespan is responsible for managing background tasks.</p> <p>This mechanism is useful when working with long-running tasks or when it is necessary to maintain a specific context object, such as connections.</p> <p><code>lifespan</code> handlers must have the following signature.</p> <p><pre><code>from contextlib import asynccontextmanager\nfrom typing import AsyncGenerator\nfrom rapidy import Rapidy\n\n@asynccontextmanager\nasync def bg_task() -&gt; AsyncGenerator[None, None]:\n    try:\n        print('starting background task')\n        yield\n    finally:\n        print('finishing background task')\n\nrapidy = Rapidy(\n    lifespan=[bg_task()],\n)\n</code></pre> <pre><code>from contextlib import asynccontextmanager\nfrom typing import AsyncGenerator\nfrom rapidy import Rapidy\n\n@asynccontextmanager\nasync def bg_task_with_app(rapidy: Rapidy) -&gt; AsyncGenerator[None, None]:\n    try:\n        print('starting background task')\n        yield\n    finally:\n        print('finishing background task')\n\nrapidy = Rapidy(\n    lifespan=[bg_task_with_app],\n)\n</code></pre></p> <p>Adding handlers to an already created <code>Application</code> instance.</p> <pre><code>from contextlib import asynccontextmanager\nfrom typing import AsyncGenerator\n\nfrom rapidy import Rapidy\n\n@asynccontextmanager\nasync def bg_task() -&gt; AsyncGenerator[None, None]:\n    try:\n        print('starting background task')\n        yield\n    finally:\n        print('finishing background task')\n\nrapidy = Rapidy()\nrapidy.lifespan.append(bg_task())\n</code></pre> <p><code>lifespan</code> tasks complete before <code>on_cleanup</code> handlers are executed.</p>"},{"location":"docs/mypy/","title":"mypy","text":""},{"location":"docs/mypy/#description","title":"Description","text":"<p><code>Rapidy</code> supports its own <code>mypy</code> plugin.</p> <p>To enable the <code>mypy</code> plugin, simply add it to one of the configuration files.</p> <pre><code># pyproject.toml\n[tool.mypy]\nplugins = [\n    \"pydantic.mypy\",\n    \"rapidy.mypy\"     # &lt;-- enable rapidy plugin\n]\n</code></pre>"},{"location":"docs/server/","title":"HTTP Server","text":""},{"location":"docs/server/#description","title":"Description","text":"<p><code>Rapidy</code> allows you to create high-performance web servers in <code>Python</code> that can receive, send, and automatically validate any incoming or outgoing information.</p> <p>A simple server can be launched in just a few lines of code:</p> <pre><code>from rapidy import Rapidy, run_app\nfrom rapidy.http import get\n\n@get('/hello')\nasync def hello() -&gt; dict[str, str]:\n    return {'message': 'Hello, Web-Server!'}\n\nrapidy = Rapidy(http_route_handlers=[hello])\n\nif __name__ == '__main__':\n    run_app(rapidy, host='0.0.0.0', port=8080)\n</code></pre>"},{"location":"docs/server/#documentation-sections","title":"Documentation Sections","text":"<ul> <li>\ud83d\ude80 Creating a Web Server</li> <li>\ud83d\uddfa\ufe0f Routing and Creating HTTP Handlers</li> <li>\ufe0f\ud83e\udded Advanced Routing (HTTPRouter)</li> <li>\ud83d\udce9 Working with Requests and Data Validation</li> <li>\ud83d\udce4 Working with Responses and Data Serialization</li> <li>\ud83c\udfaf Middleware</li> <li>\u26a0\ufe0f Handling HTTP Errors</li> <li>\ud83d\udd04 Application Lifecycle</li> </ul>"},{"location":"docs/server/#lets-start-developing","title":"Let's Start Developing!","text":"<p>This framework is designed to speed up development and simplify working with web applications.</p> <p>Ready to give it a try?</p> <p>Read the documentation and get started now! \ud83d\ude80</p>"},{"location":"docs/server/application/","title":"Application","text":""},{"location":"docs/server/application/#description","title":"Description","text":"<p><code>Application</code> is the core of the web server responsible for handling all incoming requests.</p> <p>It allows you to register and manage:</p> <ul> <li>Web handlers (endpoint)</li> <li>Middleware</li> <li>Sub-applications</li> <li>Background tasks</li> </ul> <p><code>rapidy.Rapidy</code> is an alias for <code>rapidy.web.Application</code></p>"},{"location":"docs/server/application/#application-entities","title":"Application Entities","text":""},{"location":"docs/server/application/#endpoint","title":"Endpoint","text":"<p>An endpoint is a final point of a web service that a client application interacts with to perform specific operations or retrieve data, such as <code>/api/user/get-data</code>. <pre><code>from rapidy.http import get\n\n@get('/')\nasync def handler() -&gt; dict[str, str]:\n    return {'hello': 'rapidy'}\n</code></pre></p> <p>For more details on creating an <code>endpoint</code>, see the Handlers section.</p>"},{"location":"docs/server/application/#middleware","title":"Middleware","text":"<p><code>Middleware</code> allows you to perform actions on a request before and after it is processed by a web handler. <pre><code>from rapidy.http import middleware, Request, StreamResponse, Header\nfrom rapidy.typedefs import CallNext\n\nTOKEN_REGEXP = '^[Bb]earer (?P&lt;token&gt;[A-Za-z0-9-_=.]*)'\n\n@middleware\nasync def get_bearer_middleware(\n        request: Request,\n        call_next: CallNext,\n        bearer_token: str = Header(alias='Authorization', pattern=TOKEN_REGEXP),\n) -&gt; StreamResponse:\n    # process token here...\n    return await call_next(request)\n</code></pre></p> <p>For more details on creating <code>middleware</code>, see the Middlewares section.</p> Applying <code>middleware</code> for different API versions. <pre><code>from rapidy import web\nfrom rapidy.typedefs import Handler\n\nroutes = web.RouteTableDef()\n\n\ndef get_token_data(token: str) -&gt; ...:\n    ...\n\n\ndef get_session_data(session: str) -&gt; ...:\n    ...\n\n\n@web.middleware\nasync def keycloak_auth_middleware(\n        request: web.Request,\n        handler: Handler,\n        bearer_token: str = web.Header(alias='Authorization'),\n) -&gt; web.StreamResponse:\n    try:\n        parsed_token_data = get_token_data(bearer_token)\n    except Exception:\n        return web.HTTPUnauthorized(text='Failed to authenticate with bearer')\n\n    return await handler(request)\n\n\n@web.middleware\nasync def cookie_session_auth_middleware(\n        request: web.Request,\n        handler: Handler,\n        session: str = web.Cookie(alias='UserSession'),\n) -&gt; web.StreamResponse:\n    try:\n        parsed_session_data = get_session_data(session)\n    except Exception:\n        return web.HTTPUnauthorized(text='Failed to authenticate with session')\n\n    return await handler(request)\n\n\n@routes.get('/get_hello')\nasync def handler() -&gt; dict[str, str]:\n    return {'hello': 'rapidy'}\n\n\nv1_app = web.Application(middlewares=[cookie_session_auth_middleware])\nv1_app.add_routes(routes)\n\nv2_app = web.Application(middlewares=[keycloak_auth_middleware])\nv2_app.add_routes(routes)\n\napp = web.Application()\napp.add_subapp('/v1', v1_app)\napp.add_subapp('/v2', v2_app)\n</code></pre>"},{"location":"docs/server/application/#routing","title":"Routing","text":"<p>This section demonstrates how to organize groups of <code>web handlers</code>.</p> Example of bad practice. <pre><code>@routes.get('/api/v1/get_hello')  # &lt;-- bad practice\nasync def handler() -&gt; ...:\n</code></pre> <p>It is recommended to use <code>rapidy.http.HTTPRouter</code> or child <code>rapidy.web.Application</code> instead.</p>"},{"location":"docs/server/application/#httprouter","title":"HTTPRouter","text":"<p>Using <code>HTTPRouter</code> makes the code more concise and convenient. <pre><code>from rapidy import Rapidy  # &lt;-- rapidy.Rapidy == rapidy.web.Application\nfrom rapidy.http import get, HTTPRouter\n\n@get('/get_hello')\nasync def handler() -&gt; dict[str, str]:\n    return {'hello': 'rapidy'}\n\nv1_app = HTTPRouter('/v1', route_handlers=[handler])\nrapidy = Rapidy(http_route_handlers=[v1_app])\n</code></pre> <pre><code>curl -X GET http://127.0.0.1:8080/v1/get_hello\n</code></pre></p> <p>For more details on <code>HTTPRouter</code>, see the HTTPRouter section.</p>"},{"location":"docs/server/application/#sub-application-aiohttp-style","title":"Sub-application (aiohttp-style)","text":"<p>Creating child <code>Application</code>: <pre><code>from rapidy import web\n\nroutes = web.RouteTableDef()\n\n@routes.get('/get_hello')\nasync def handler() -&gt; dict[str, str]:\n    return {'hello': 'rapidy'}\n\nv1_app = web.Application()\nv1_app.add_routes(routes)\n\napp = web.Application()\napp.add_subapp('/v1', v1_app)\n</code></pre> <pre><code>curl -X GET http://127.0.0.1:8080/v1/get_hello\n</code></pre></p> <p>Using child applications in the <code>aiohttp</code> style for new code is not recommended.</p>"},{"location":"docs/server/application/#lifespan","title":"Lifespan","text":"<p>Lifespan is a mechanism for managing the lifecycle of background tasks in <code>Rapidy</code>.</p> <p>It controls tasks that should be executed: before or after the server starts, as well as tasks that should run continuously. <pre><code>from contextlib import asynccontextmanager\nfrom typing import AsyncGenerator\nfrom rapidy import Rapidy\n\nasync def startup() -&gt; None:\n    print('startup')\n\nasync def shutdown() -&gt; None:\n    print('shutdown')\n\nasync def cleanup() -&gt; None:\n    print('cleanup')\n\n@asynccontextmanager\nasync def bg_task() -&gt; AsyncGenerator[None, None]:\n    try:\n        print('starting background task')\n        yield\n    finally:\n        print('finishing background task')\n\nrapidy = Rapidy(\n    on_startup=[startup],\n    on_shutdown=[shutdown],\n    on_cleanup=[cleanup],\n    lifespan=[bg_task()],\n)\n</code></pre></p> <p>For more details on <code>lifespan</code>, see the Lifespan section.</p>"},{"location":"docs/server/application/#application-attributes","title":"Application Attributes","text":""},{"location":"docs/server/application/#additional-attributes-in-rapidy","title":"Additional Attributes in <code>Rapidy</code>","text":""},{"location":"docs/server/application/#server_info_in_response","title":"server_info_in_response","text":"<p>Defines whether to include server information in the <code>Server</code> header. <pre><code>server_info_in_response: bool = False\n</code></pre></p>"},{"location":"docs/server/application/#lifespan_1","title":"lifespan","text":"<p>A list of background tasks that start and stop along with the server. <pre><code>lifespan: Optional[List[LifespanCTX]] = None\n</code></pre></p>"},{"location":"docs/server/application/#on_startup","title":"on_startup","text":"<p>A list of tasks executed immediately after the application starts. <pre><code>on_startup: Optional[List[LifespanHook]] = None\n</code></pre></p>"},{"location":"docs/server/application/#on_shutdown","title":"on_shutdown","text":"<p>Tasks executed when the server stops. <pre><code>on_shutdown: Optional[List[LifespanHook]] = None\n</code></pre></p>"},{"location":"docs/server/application/#on_cleanup","title":"on_cleanup","text":"<p>Tasks executed after <code>on_shutdown</code>. <pre><code>on_cleanup: Optional[List[LifespanHook]] = None\n</code></pre></p>"},{"location":"docs/server/application/#http_route_handlers","title":"http_route_handlers","text":"<p>HTTP routers that can be either individual handlers or groups of <code>HTTPRouter</code>. <pre><code>http_route_handlers: Iterable[HTTPRouterType] = ()\n</code></pre></p>"},{"location":"docs/server/application/#di-attributes-dishka","title":"DI Attributes (dishka)","text":"<p>Rapidy uses the Dishka library as its dependency injection engine.</p> <p>Learn more about the DI mechanism and integration details here.</p>"},{"location":"docs/server/application/#di_container","title":"di_container","text":"<p>An external DI container that can be passed to Rapidy.</p> <pre><code>di_container: AsyncContainer | None = None\n</code></pre> <p>By default, Rapidy creates and manages its own container. If you pass a container manually, you must manage its lifecycle yourself (startup and shutdown).</p> <p>Rapidy will not create a new container even if other DI parameters are specified.</p> <p>Dishka documentation \u2014 container.</p>"},{"location":"docs/server/application/#di_providers","title":"di_providers","text":"<p>Providers that will be registered in the container.</p> <p>A provider is an object whose members are used to build dependencies.</p> <pre><code>di_providers: Sequence[BaseProvider] = ()\n</code></pre> <p>This parameter will be ignored if <code>di_container</code> is specified.</p> <p>Dishka documentation \u2014 providers.</p>"},{"location":"docs/server/application/#di_scopes","title":"di_scopes","text":"<p>The <code>Scope</code> class that the container will use.</p> <pre><code>di_scopes: type[BaseScope] = Scope\n</code></pre> <p>This parameter will be ignored if <code>di_container</code> is specified.</p> <p>Dishka documentation \u2014 scopes.</p>"},{"location":"docs/server/application/#di_context","title":"di_context","text":"<p>A dictionary that allows passing additional context into already declared providers.</p> <pre><code>di_context: dict[Any, Any] | None = None\n</code></pre> <p>This parameter will be ignored if <code>di_container</code> is specified.</p> <p>Dishka documentation \u2014 context.</p>"},{"location":"docs/server/application/#di_lock_factory","title":"di_lock_factory","text":"<p>A factory for creating locks that the container will use.</p> <pre><code>di_lock_factory: Callable[[], contextlib.AbstractAsyncContextManager[Any]] | None = Lock\n</code></pre> <p>This parameter will be ignored if <code>di_container</code> is specified.</p> <p>Dishka documentation \u2014 lock_factory.</p> <pre><code>import threading\n\ncontainer = make_container(provider, lock_factory=threading.Lock):\nwith container(lock_factory=threading.Lock) as nested_container:\n    ...\n\nimport asyncio\n\ncontainer = make_async_container(provider, lock_factory=asyncio.Lock)\nasync with container(lock_factory=asyncio.Lock) as nested_container:\n    ...\n</code></pre>"},{"location":"docs/server/application/#di_skip_validation","title":"di_skip_validation","text":"<p>A flag indicating whether to skip validation for providers of the same type.</p> <pre><code>di_skip_validation: bool = False\n</code></pre> <p>This parameter will be ignored if <code>di_container</code> is specified.</p> <p>Dishka documentation \u2014 skip_validation.</p> <pre><code>from rapidy.depends import make_container, Provider, provide, Scope\n\nclass MainProvider(Provider):\n    # default component is used here\n\n    @provide(scope=Scope.APP)\n    def foo(self, a: int) -&gt; float:\n        return a/10\n\nclass AdditionalProvider(Provider):\n    component = \"X\"\n\n    @provide(scope=Scope.APP)\n    def foo(self) -&gt; int:\n        return 1\n\n# we will get error immediately during container creation, skip validation for demo needs\ncontainer = make_container(MainProvider(), AdditionalProvider(), skip_validation=True)\n# retrieve from component \"X\"\ncontainer.get(int, component=\"X\")  # value 1 would be returned\n# retrieve from default component\ncontainer.get(float)  # raises NoFactoryError because int is in another component\n</code></pre>"},{"location":"docs/server/application/#di_start_scope","title":"di_start_scope","text":"<p>A parameter specifying the initial <code>Scope</code>.</p> <pre><code>di_start_scope: BaseScope | None = None\n</code></pre> <p>This parameter will be ignored if <code>di_container</code> is specified.</p> <p>Dishka documentation \u2014 start_scope.</p>"},{"location":"docs/server/application/#di_validation_settings","title":"di_validation_settings","text":"<p>Configuration for overriding the container's validation settings.</p> <pre><code>di_validation_settings: ValidationSettings = DEFAULT_VALIDATION\n</code></pre> <p>This parameter will be ignored if <code>di_container</code> is specified.</p> <p>Dishka documentation \u2014 alias.</p> <p>Dishka documentation \u2014 from_context.</p> <p>Dishka documentation \u2014 provide.</p>"},{"location":"docs/server/application/#aiohttp-attributes","title":"<code>aiohttp</code> Attributes","text":""},{"location":"docs/server/application/#middlewares","title":"middlewares","text":"<p>A list of <code>middleware</code> applied to all handlers, including child applications. <pre><code>middlewares: Optional[Iterable[Middleware]] = None\n</code></pre></p>"},{"location":"docs/server/application/#client_max_size","title":"client_max_size","text":"<p>Maximum request size in bytes. <pre><code>client_max_size: int = 1024**2\n</code></pre></p>"},{"location":"docs/server/application/#logger","title":"logger","text":"<p>Logger for receiving logs from <code>Application</code>. <pre><code>logger: logging.Logger = logging.getLogger(\"aiohttp.web\")\n</code></pre></p>"},{"location":"docs/server/application/#running-the-application","title":"Running the Application","text":""},{"location":"docs/server/application/#simple-run","title":"Simple Run","text":"<p>Copy the following code into <code>main.py</code>. <pre><code>from rapidy import Rapidy, run_app\nfrom rapidy.http import post\n\n@post('/')\nasync def handler() -&gt; dict[str, str]:\n    return {'hello': 'rapidy'}\n\nrapidy = Rapidy()\nrapidy.add_http_router(handler)\n\nif __name__ == '__main__':\n    run_app(rapidy)\n</code></pre> Start the server: <pre><code>python3 main.py\n</code></pre></p> <p>You can specify parameters like <code>host</code> or <code>port</code>.</p> <pre><code>run_app(app, host='0.0.0.0', port=8080)\n</code></pre>"},{"location":"docs/server/application/#wsgi-run-gunicorn","title":"WSGI Run (Gunicorn)","text":"<p>Install <code>gunicorn</code>: <pre><code>pip install gunicorn\n</code></pre> Copy the following code into <code>main.py</code>: <pre><code>from rapidy import Rapidy\nfrom rapidy.http import post\n\n@post('/')\nasync def handler() -&gt; dict[str, str]:\n    return {'hello': 'rapidy'}\n\nrapidy = Rapidy()\nrapidy.add_http_router(handler)\n</code></pre> Start the server: <pre><code>gunicorn main:rapidy --bind localhost:8080 --reload --worker-class aiohttp.GunicornWebWorker\n</code></pre></p> <p>The <code>gunicorn main:app</code> command refers to:</p> <ul> <li><code>main</code>: the <code>main.py</code> file (Python module).</li> <li><code>rapidy</code>: the object created inside <code>main.py</code> in the line <code>rapidy = Rapidy()</code>.</li> <li><code>--reload</code>: restarts the server when the code changes. Use only for development.</li> </ul>"},{"location":"docs/server/handlers/","title":"Routing and Creating HTTP Handlers","text":"<p>Web handlers are designed to process incoming HTTP requests.</p> <p>In <code>Rapidy</code>, routing and handler creation are closely related: routing determines which handler will be invoked in response to a request.</p>"},{"location":"docs/server/handlers/#defining-routes","title":"Defining Routes","text":"<p>A route is a <code>URL</code> string that triggers a handler.</p> <p>There are two types of routes: static and dynamic.</p> <p>Difference Between Static and Dynamic Routing</p> Route Type Example URL Description Static /about The URL is fixed. Dynamic /users/{user_id} The URL changes depending on parameters. <p><code>Rapidy</code> supports multiple ways of defining routes similar to <code>aiohttp</code>. More details on this are provided below in the section <code>Creating and Registering HTTP Handlers</code>.</p> <p>You can learn more about <code>aiohttp</code> handlers here.</p>"},{"location":"docs/server/handlers/#static-routes","title":"Static Routes","text":"<p>Static HTTP routing is a type of routing where the path (URL) is predefined and does not change dynamically. This means that every request to a specific route always leads to the same handler.</p> <p>Simple Static Route <pre><code>from rapidy.http import get\n\n@get('/hello_rapidy')\nasync def handler() -&gt; str:\n    return 'Hello Rapidy!'\n</code></pre></p> <p>This route is always available via <code>GET /hello</code> and returns the same response.</p> <pre><code>curl http://localhost:8000/hello_rapidy\n</code></pre> <p>Similarly, you can define other methods such as <code>get</code>, <code>post</code>, <code>put</code>, <code>delete</code>, and so on.</p>"},{"location":"docs/server/handlers/#dynamic-routes","title":"Dynamic Routes","text":"<p>Dynamic routing allows you to define routes that accept variable parameters. This is useful when working with different entities (e.g., <code>user_id</code>, <code>post_id</code>, etc.) by passing them in the <code>URL</code>.</p> <p>The examples below use <code>PathParam</code>, which is required for extracting path parameters. You can read more about it here.</p>"},{"location":"docs/server/handlers/#simple-dynamic-route","title":"Simple Dynamic Route","text":"<p>Suppose we have an API to retrieve user information based on <code>user_id</code>:</p> <pre><code>from rapidy.http import get, PathParam\n\n@get('/users/{user_id}')\nasync def handler(user_id: int = PathParam()) -&gt; dict[str, int]:\n    return {'user_id': user_id}\n</code></pre> <p>How does this route work?</p> <ol> <li><code>user_id</code> is a dynamic parameter passed in the URL.</li> <li><code>Rapidy</code> automatically converts it to <code>int</code> (if a string is passed, the API will return a <code>422</code> error).</li> </ol> <p>Example request: <pre><code>curl http://localhost:8000/users/123\n</code></pre></p> <p>Response: <pre><code>{\"user_id\": 123}\n</code></pre></p>"},{"location":"docs/server/handlers/#dynamic-routes-with-multiple-parameters","title":"Dynamic Routes with Multiple Parameters","text":"<p>You can add multiple dynamic parameters: <pre><code>from rapidy.http import get, PathParam\n\n@get('/posts/{post_id}/comments/{comment_id}')\nasync def handler(\n    post_id: int = PathParam(),\n    comment_id: int = PathParam(),\n) -&gt; dict[str, int]:\n    return {'post_id': post_id, 'comment_id': comment_id}\n</code></pre></p> <p>Now, the request <code>GET /posts/10/comments/5</code> will return: <pre><code>{\"post_id\": 10, \"comment_id\": 5}\n</code></pre></p>"},{"location":"docs/server/handlers/#grouping-routes","title":"Grouping Routes","text":"<p>If you have many routes, you can use one of the available approaches to group HTTP requests.</p> <p>It is recommended to stick to a single approach within a project.</p>"},{"location":"docs/server/handlers/#httprouter","title":"HTTPRouter","text":"<p><code>Rapidy</code> provides an <code>HTTPRouter</code> object for grouping requests.</p> <p><code>HTTPRouter</code> allows registering groups of handlers and plays a key role in routing by directing requests to the appropriate handlers based on the HTTP method, path, parameters, and other conditions.</p> <p><code>HTTPRouter</code> is registered just like any other HTTP handler.</p> <pre><code>from rapidy import Rapidy\nfrom rapidy.http import HTTPRouter, controller, get\n\n@get('/healthcheck')  # /healthcheck\nasync def healthcheck() -&gt; str:\n    return 'ok'\n\n@get('/hello')  # /api/hello\nasync def hello_handler() -&gt; dict[str, str]:\n    return {'hello': 'rapidy'}\n\napi_router = HTTPRouter('/api', [hello_handler])\n\nrapidy = Rapidy(http_route_handlers=[healthcheck, api_router])\n</code></pre> <p><code>HTTPRouter</code> can do more!</p> <p><code>HTTPRouter</code> also has several attributes that extend its capabilities, such as <code>middleware</code> handling, background task management, and more.</p> <p>You can also create nested <code>HTTPRouter</code> instances.</p> <p>You can read more about <code>HTTPRouter</code> here.</p>"},{"location":"docs/server/handlers/#creating-and-registering-http-handlers","title":"Creating and Registering HTTP Handlers","text":""},{"location":"docs/server/handlers/#functional-handlers","title":"Functional Handlers","text":"<p>The simplest way to create a handler: <pre><code>from rapidy import Rapidy\nfrom rapidy.http import post\n\n@post('/')\nasync def handler() -&gt; dict[str, str]:\n    return {'hello': 'rapidy'}\n\nrapidy = Rapidy(http_route_handlers=[handler])\n</code></pre></p>"},{"location":"docs/server/handlers/#examples-of-handler-registration","title":"Examples of Handler Registration","text":"Registering a Handler Without a Decorator <pre><code>from rapidy import Rapidy\nfrom rapidy.http import post\n\nasync def handler() -&gt; dict[str, str]:\n    return {'hello': 'rapidy'}\n\nrapidy = Rapidy(\n    http_route_handlers=[\n        post.reg('/', handler),\n    ]\n)\n</code></pre> Adding a Handler via the Application <code>router</code> (aiohttp style) <pre><code>from rapidy import Rapidy\n\nasync def handler() -&gt; dict[str, str]:\n    return {'hello': 'rapidy'}\n\nrapidy = Rapidy()\nrapidy.router.add_post('/', handler)\n</code></pre> <p>Supported methods correspond to HTTP methods with the <code>add_</code> prefix.</p> <ul> <li><code>add_get</code></li> <li><code>add_post</code></li> <li><code>add_put</code></li> <li><code>add_patch</code></li> <li><code>add_delete</code></li> </ul> <p>Exception \u2014 <code>view</code>.</p> <ul> <li><code>add_view</code></li> </ul> Adding a Handler with a Decorator via <code>RouteTableDef</code> (aiohttp style) <pre><code>from rapidy import web, Rapidy\n\nroutes = web.RouteTableDef()\n\n@routes.post('/')\nasync def handler() -&gt; dict[str, str]:\n    return {'hello': 'rapidy'}\n\nrapidy = Rapidy()\nrapidy.add_routes(routes)\n</code></pre> Adding a Handler Without a Decorator via <code>rapidy.web</code> (aiohttp style) <pre><code>from rapidy import web, Rapidy\n\nasync def handler() -&gt; dict[str, str]:\n    return {'hello': 'rapidy'}\n\nrapidy = Rapidy()\nrapidy.add_routes([web.post('/', handler)])\n</code></pre>"},{"location":"docs/server/handlers/#class-based-handlers","title":"Class-Based Handlers","text":"<p>Class-based handlers allow grouping multiple methods within a single class: <pre><code>from rapidy import Rapidy\nfrom rapidy.http import PathParam, controller, get, post, put, patch, delete\n\n@controller('/')\nclass UserController:\n    @get('/{user_id}')\n    async def get_by_id(self, user_id: str = PathParam()) -&gt; dict[str, str]:\n        return {'user_id': user_id}\n\n    @get()\n    async def get_all_users(self) -&gt; list[dict[str, str]]:\n        return [{'name': 'John'}, {'name': 'Felix'}]\n\n    @post()\n    async def create_user(self) -&gt; str:\n        return 'ok'\n\n    @put()\n    async def update_user(self) -&gt; str:\n        return 'ok'\n\n    @patch()\n    async def patch_user(self) -&gt; str:\n        return 'ok'\n\n    @delete()\n    async def delete_user(self) -&gt; str:\n        return 'ok'\n\nrapidy = Rapidy(http_route_handlers=[UserController])\n</code></pre></p>"},{"location":"docs/server/handlers/#examples-of-class-based-handler-registration","title":"Examples of Class-Based Handler Registration","text":"Registering a Handler Without a Decorator <pre><code>from rapidy import Rapidy\nfrom rapidy.http import PathParam, controller, get\n\nclass UserController:\n    @get('/{user_id}')\n    async def get_by_id(self, user_id: str = PathParam()) -&gt; dict[str, str]:\n        return {'user_id': user_id}\n\n    @get()\n    async def get_all_users(self) -&gt; list[dict[str, str]]:\n        return [{'name': 'John'}, {'name': 'Felix'}]\n\nrapidy = Rapidy(\n    http_route_handlers=[\n        controller.reg('/', UserController),\n    ]\n)\n</code></pre>"},{"location":"docs/server/handlers/#using-view-aiohttp-style","title":"Using <code>View</code> (aiohttp style)","text":"Adding a Handler via the Application <code>router</code> (aiohttp style) <pre><code>from rapidy import Rapidy\nfrom rapidy.web import View\n\nclass Handler(View):\n    async def get(self) -&gt; dict[str, str]:\n        return {'hello': 'rapidy'}\n\n    async def post(self) -&gt; dict[str, str]:\n        return {'hello': 'rapidy'}\n\n    async def put(self) -&gt; dict[str, str]:\n        return {'hello': 'rapidy'}\n\n    async def patch(self) -&gt; dict[str, str]:\n        return {'hello': 'rapidy'}\n\n    async def delete(self) -&gt; dict[str, str]:\n        return {'hello': 'rapidy'}\n\nrapidy = Rapidy()\nrapidy.router.add_view('/', Handler)\n</code></pre> Adding a Handler via <code>router</code> with Different Paths (aiohttp style) <pre><code>from rapidy import Rapidy\nfrom rapidy.web import View, PathParam\n\nclass Handler(View):\n    async def get(self, user_id: str = PathParam()) -&gt; dict[str, str]:\n        return {'hello': 'rapidy'}\n\n    async def post(self) -&gt; dict[str, str]:\n        return {'hello': 'rapidy'}\n\n    async def put(self) -&gt; dict[str, str]:\n        return {'hello': 'rapidy'}\n\n    async def patch(self) -&gt; dict[str, str]:\n        return {'hello': 'rapidy'}\n\n    async def delete(self) -&gt; dict[str, str]:\n        return {'hello': 'rapidy'}\n\nrapidy = Rapidy()\nrapidy.router.add_get('/{user_id}', Handler)\nrapidy.router.add_view('/', Handler)\n</code></pre> Adding a Handler with a Decorator via <code>RouteTableDef</code> (aiohttp style) <pre><code>from rapidy import web\n\nroutes = web.RouteTableDef()\n\n@routes.view('/')\nclass Handler(web.View):\n    async def get(self) -&gt; dict[str, str]:\n        return {'hello': 'rapidy'}\n\n    async def post(self) -&gt; dict[str, str]:\n        return {'hello': 'rapidy'}\n\n    async def put(self) -&gt; dict[str, str]:\n        return {'hello': 'rapidy'}\n\n    async def patch(self) -&gt; dict[str, str]:\n        return {'hello': 'rapidy'}\n\n    async def delete(self) -&gt; dict[str, str]:\n        return {'hello': 'rapidy'}\n\nrapidy = web.Application()\nrapidy.add_routes(routes)\n</code></pre> Adding a Handler with a Decorator via <code>RouteTableDef</code> with Different Paths (aiohttp style) <pre><code>from rapidy import web\n\nroutes = web.RouteTableDef()\n\n@routes.view('/')\nclass Handler(web.View):\n    @routes.get('/{user_id}')\n    async def get(self, user_id: str = web.PathParam()) -&gt; dict[str, str]:\n        return {'hello': 'rapidy'}\n\n    async def post(self) -&gt; dict[str, str]:\n        return {'hello': 'rapidy'}\n\n    async def put(self) -&gt; dict[str, str]:\n        return {'hello': 'rapidy'}\n\n    async def patch(self) -&gt; dict[str, str]:\n        return {'hello': 'rapidy'}\n\n    async def delete(self) -&gt; dict[str, str]:\n        return {'hello': 'rapidy'}\n\nrapidy = web.Application()\nrapidy.add_routes(routes)\n</code></pre> Adding a Handler Without a Decorator via <code>rapidy.web</code> (aiohttp style) <pre><code>from rapidy import web\n\nroutes = web.RouteTableDef()\n\nclass Handler(web.View):\n    async def get(self) -&gt; dict[str, str]:\n        return {'hello': 'rapidy'}\n\n    async def post(self) -&gt; dict[str, str]:\n        return {'hello': 'rapidy'}\n\n    async def put(self) -&gt; dict[str, str]:\n        return {'hello': 'rapidy'}\n\n    async def patch(self) -&gt; dict[str, str]:\n        return {'hello': 'rapidy'}\n\n    async def delete(self) -&gt; dict[str, str]:\n        return {'hello': 'rapidy'}\n\nrapidy = web.Application()\nrapidy.add_routes([web.view('/', Handler)])\n</code></pre> Adding a Handler Without a Decorator via <code>rapidy.web</code> with Different Paths (aiohttp style) <pre><code>from rapidy import web\n\nroutes = web.RouteTableDef()\n\nclass Handler(web.View):\n    async def get(self, user_id: str = web.PathParam()) -&gt; dict[str, str]:\n        return {'hello': 'rapidy'}\n\n    async def post(self) -&gt; dict[str, str]:\n        return {'hello': 'rapidy'}\n\n    async def put(self) -&gt; dict[str, str]:\n        return {'hello': 'rapidy'}\n\n    async def patch(self) -&gt; dict[str, str]:\n        return {'hello': 'rapidy'}\n\n    async def delete(self) -&gt; dict[str, str]:\n        return {'hello': 'rapidy'}\n\nrapidy = web.Application()\nrapidy.add_routes([\n    web.get('/{user_id}', Handler),\n    web.view('/', Handler),\n])\n</code></pre>"},{"location":"docs/server/handlers/#handler-attributes","title":"Handler Attributes","text":"<p>Attributes allow managing handler behavior and responses.</p> <p>Attributes are automatically applied to handler responses if the handler returns anything other than <code>Response</code> (does not apply to <code>path</code> and <code>allow_head</code> attributes for the <code>get</code> method).</p> <p>Attributes are applied to responses.</p> <p>The <code>response_content_type</code> attribute will be applied to each handler response because the handler returns a <code>python</code> object. <pre><code>from rapidy.http import get, ContentType\n\n@get('/', response_content_type=ContentType.text_plain)\nasync def handler() -&gt; str:\n    return 'Hello Rapidy!'\n</code></pre></p> <p>Attributes are not applied to responses.</p> <p>The <code>response_content_type</code> attribute will not be applied to the handler response because the handler returns a low-level <code>Response</code> object. <pre><code>from rapidy.http import get, ContentType, Response\n\n@get('/', response_content_type=ContentType.text_plain)\nasync def handler() -&gt; Response:\n    return Response('Hello Rapidy!')\n</code></pre></p> <p>All handler creation methods support the same attributes for managing web requests.</p>"},{"location":"docs/server/handlers/#core-attributes-always-applied","title":"Core Attributes (Always Applied)","text":""},{"location":"docs/server/handlers/#path","title":"path","text":"<p><code>path</code>: <code>str</code> \u2014 the handler's route on the server. <pre><code>@get(\n    '/',\n)\nasync def handler() -&gt; str:\n    return 'ok'\n</code></pre></p>"},{"location":"docs/server/handlers/#allow_head","title":"allow_head","text":"<p><code>allow_head</code>: <code>bool = True</code> \u2014 if set to <code>True</code> (default), a route is added for the <code>head</code> method with the same handler as <code>get</code>.</p> <pre><code>@get(\n    '/',\n    allow_head=True,\n)\nasync def handler() -&gt; str:\n    return 'ok'\n</code></pre> <p>This attribute can only be applied to the <code>get</code> method.</p>"},{"location":"docs/server/handlers/#response-validation","title":"Response Validation","text":""},{"location":"docs/server/handlers/#response_validate","title":"response_validate","text":"<p><code>response_validate</code>: <code>bool = True</code> \u2014 whether to validate the handler response. <pre><code>@get(\n    '/',\n    response_validate=False,\n)\nasync def handler() -&gt; str:  # &lt;-- `str` will be ignored\n    return {'hello': 'rapidy'}\n</code></pre></p>"},{"location":"docs/server/handlers/#response_type","title":"response_type","text":"<p><code>response_type</code>: <code>Type[Any] | None = ...</code> \u2014 defines the response type (overrides return annotation). <pre><code>@get(\n    '/',\n    response_type=dict[str, str],  # &lt;-- `dict[str, str]` will be used for validation\n)\nasync def handler() -&gt; str:  # &lt;-- `str` will be ignored\n    return {'hello': 'rapidy'}\n</code></pre></p> <p>This flag adds flexibility for serialization and validation but is rarely used.</p>"},{"location":"docs/server/handlers/#managing-headers-and-encoding","title":"Managing Headers and Encoding","text":""},{"location":"docs/server/handlers/#response_content_type","title":"response_content_type","text":"<p><code>response_content_type</code>: <code>str = 'application/json'</code> \u2014 an attribute that allows managing the <code>Content-Type</code> header.</p> <p>The <code>Content-Type</code> header informs the client (browser, API client, another server) about the type of data contained in the HTTP response body.</p> <pre><code>from rapidy.enums import ContentType\n\n@get(\n    '/',\n    response_content_type=ContentType.text_plain,\n)\nasync def handler() -&gt; str:\n    return 'hello, rapidy!'\n</code></pre> <p>If <code>content_type</code> is specified, the provided data will be converted accordingly.</p> <p>If <code>content_type</code> is not specified, it will be determined automatically based on the type of data returned by the server.</p> content_type=\"application/json <p><code>content_type=\"application/json\"</code> \u2014 data is converted to <code>JSON</code> using jsonify(dumps=True) and encoded according to response_charset.</p> <pre><code>from rapidy.http import get, ContentType\n\n@get(\n    '/',\n    content_type=ContentType.json,\n)\nasync def handler() -&gt; dict[str, str]:\n    return {'hello': 'rapidy!'}  # {\"hello\": \"rapidy!\"}\n</code></pre> <p>If the provided object is a string <code>Response(body=\"string\")</code>, then the string, according to the JSON standard, will be escaped twice: <pre><code>from rapidy.http import get, ContentType\n\n@get(\n    '/',\n    content_type=ContentType.json,\n)\nasync def handler() -&gt; str:\n    return 'hello rapidy!'  # \"'hello rapidy!'\"\n</code></pre></p> content_type=\"text/* <p><code>content_type=\"text/*\"</code> (any text type: <code>text/plain</code>, <code>text/html</code>, etc.) - if the data is of type <code>str</code>, it is sent as is. Otherwise, it is converted to a string via jsonify(dumps=False).</p> <pre><code>from rapidy.http import get, ContentType\n\n@get(\n    '/',\n    content_type=ContentType.text_any,\n)\nasync def handler() -&gt; str:\n    return 'hello rapidy!'  # \"hello rapidy!\"\n</code></pre> <p>If the object is still not a string after <code>jsonify(dumps=False)</code>, it is further converted using response_json_encoder.</p> content_type - any other MIME type. <p>If the data is of type <code>bytes</code>, it is sent as is. Otherwise, it is converted to a string using jsonify(dumps=True) and encoded according to response_json_encoder.</p> <p>If <code>content_type</code> is not specified, it is set automatically:</p> <ul> <li> <p><code>body: dict | BaseModel | dataclass</code> \u2192 <code>content_type=\"application/json\"</code> <pre><code>async def handler() -&gt; dict[str, str]:\n    return {\"hello\": \"rapidy\"}\n\nasync def handler() -&gt; SomeModel:\n    return SomeModel(hello=\"rapidy\")  # `SomeModel` inherits from `pydantic.BaseModel`\n</code></pre></p> </li> <li> <p><code>body: str | Enum | int | float | Decimal | bool</code> \u2192 <code>content_type=\"text/plain\"</code> <pre><code>async def handler() -&gt; str:\n    return 'string'\n\nasync def handler() -&gt; str:\n    return SomeEnum.string\n\nasync def handler() -&gt; int:\n    return 1\n\nasync def handler() -&gt; float:\n    return 1.0\n\nasync def handler() -&gt; Decimal:\n    return Decimal(\"1.0\")\n\nasync def handler() -&gt; bool:\n    return True\n</code></pre></p> </li> <li> <p><code>body: Any</code> \u2192 <code>content_type=\"application/octet-stream\"</code> <pre><code>async def handler() -&gt; bytes:\n    return b'bytes'\n\nasync def handler() -&gt; AnotherType:\n    return AnotherType()\n</code></pre></p> </li> </ul>"},{"location":"docs/server/handlers/#response_charset","title":"response_charset","text":"<p><code>response_charset</code>: <code>str = 'utf-8'</code> \u2014 the encoding used for response data.</p> <pre><code>from rapidy.enums import Charset\n\n@get(\n    '/',\n    response_charset=Charset.utf8,\n)\nasync def handler() -&gt; str:\n    return 'hello, rapidy!'\n</code></pre>"},{"location":"docs/server/handlers/#response_json_encoder","title":"response_json_encoder","text":"<p><code>response_json_encoder</code>: <code>Callable = json.dumps</code> \u2014 a function that takes an object and returns its JSON representation.</p> <p>Automatically applied to any Python object after validation through <code>pydantic</code>. <pre><code>from typing import Any\n\ndef custom_encoder(obj: Any) -&gt; str:\n    ...\n\n@get(\n    '/',\n    response_json_encoder=custom_encoder,  # Converts the obtained string above into a JSON object using the `custom_encoder` function\n)\nasync def handler() -&gt; dict[str, str]:\n    return {'hello': 'rapidy!'}  # will be converted to a string by Rapidy's internal tools\n</code></pre></p>"},{"location":"docs/server/handlers/#data-compression","title":"Data Compression","text":""},{"location":"docs/server/handlers/#response_zlib_executor","title":"response_zlib_executor","text":"<p><code>response_zlib_executor</code>: <code>concurrent.futures.Executor | None = None</code> \u2014 <code>zlib</code> compression function. <pre><code>from concurrent.futures import Executor\n\nclass SomeExecutor(Executor):\n    ...\n\n@get(\n    '/',\n    response_zlib_executor=SomeExecutor,\n)\nasync def handler() -&gt; str:\n    return 'hello, rapidy!'\n</code></pre></p> <p>More about <code>zlib_executor</code></p> <p><code>zlib_executor</code> is an <code>aiohttp</code> mechanism. More details here.</p>"},{"location":"docs/server/handlers/#response_zlib_executor_size","title":"response_zlib_executor_size","text":"<p><code>response_zlib_executor_size</code>: <code>int | None = None</code> \u2014 body size in bytes to enable compression. <pre><code>@get(\n    '/',\n    response_zlib_executor_size=1024,\n)\nasync def handler() -&gt; str:\n    return 'hello, rapidy!'\n</code></pre></p>"},{"location":"docs/server/handlers/#managing-pydantic-fields","title":"Managing Pydantic Fields","text":""},{"location":"docs/server/handlers/#response_include_fields","title":"response_include_fields","text":"<p><code>response_include_fields</code>: <code>set[str] | dict[str, Any] | None = None</code> \u2014 <code>include</code> parameter from <code>Pydantic</code>, specifying which fields to include. <pre><code>from pydantic import BaseModel, Field\n\nclass Result(BaseModel):\n    value: str = Field('data', alias='someValue')\n    another_value: str = Field('another_data', alias='someAnotherValue')\n\n@get(\n    '/',\n    response_include_fields={'value'},\n)\nasync def handler() -&gt; Result:\n    return Result()  # {'someValue': 'data'}\n</code></pre></p>"},{"location":"docs/server/handlers/#response_exclude_fields","title":"response_exclude_fields","text":"<p><code>response_exclude_fields</code>: <code>set[str] | dict[str, Any] | None</code> \u2014 list of fields to exclude. <pre><code>from pydantic import BaseModel, Field\n\nclass Result(BaseModel):\n    value: str = Field('data', alias='someValue')\n    another_value: str = Field('another_data', alias='someAnotherValue')\n\n@get(\n    '/',\n    response_exclude_fields={'value'},\n)\nasync def handler() -&gt; Result:\n    return Result()  # {\"someValue\": \"data\"}\n</code></pre></p>"},{"location":"docs/server/handlers/#response_by_alias","title":"response_by_alias","text":"<p><code>response_by_alias</code>: <code>bool = True</code> \u2014 whether to use <code>Pydantic</code> aliases. <pre><code>from pydantic import BaseModel, Field\n\nclass Result(BaseModel):\n    value: str = Field('data', alias='someValue')\n\n@get(\n    '/',\n    response_by_alias=True,  # &lt;-- default\n)\nasync def handler() -&gt; Result:\n    return Result()  # {\"someValue\": \"data\"}\n\n...\n\n@get(\n    '/',\n    response_by_alias=False,\n)\nasync def handler() -&gt; Result:\n    return Result()  # {\"value\": \"data\"}\n</code></pre></p>"},{"location":"docs/server/handlers/#response_exclude_unset","title":"response_exclude_unset","text":"<p><code>response_exclude_unset</code>: <code>bool = False</code> \u2014 whether to exclude default values. <pre><code>from pydantic import BaseModel, Field\n\nclass Result(BaseModel):\n    value: str = Field('data', alias='someValue')\n    another_value: str = Field('another_data', alias='someAnotherValue')\n\n@get(\n    '/',\n    exclude_unset=False,  # &lt;-- default\n)\nasync def handler() -&gt; Result:\n    Result(someAnotherValue='new_data')  # {\"someValue\": \"data\", \"someAnotherValue\": \"new_data\"}\n\n...\n\n@get(\n    '/',\n    exclude_unset=True,\n)\nasync def handler() -&gt; Result:\n    return Result(someAnotherValue='new_data')  # {\"someAnotherValue\": \"new_data\"}\n</code></pre></p>"},{"location":"docs/server/handlers/#response_exclude_defaults","title":"response_exclude_defaults","text":"<p><code>response_exclude_defaults</code>: <code>bool = False</code> \u2014 whether to exclude explicitly set values if they match the defaults. <pre><code>from pydantic import BaseModel, Field\n\nclass Result(BaseModel):\n    value: str = Field('data', alias='someValue')\n\n@get(\n    '/',\n    exclude_defaults=False,  # &lt;-- default\n)\nasync def handler() -&gt; Result:\n    return Result()  # {\"value\": \"data\"}\n\n...\n\n@get(\n    '/',\n    exclude_defaults=True,\n)\nasync def handler() -&gt; Result:\n    return Result()  # {}\n</code></pre></p>"},{"location":"docs/server/handlers/#response_exclude_none","title":"response_exclude_none","text":"<p><code>response_exclude_none</code>: <code>bool = False</code> \u2014 whether to exclude <code>None</code> values. <pre><code>from pydantic import BaseModel, Field\n\nclass Result(BaseModel):\n    value: str = Field('data', alias='someValue')\n    none_value: None = None\n\n@get(\n    '/',\n    exclude_none=False,  # &lt;-- default\n)\nasync def handler() -&gt; Result:\n    return Result()  # {\"someValue\": \"data\", \"none_value\": null}\n\n...\n\n@get(\n    '/',\n    exclude_none=True,\n)\nasync def handler() -&gt; Result:\n    return Result()  # {\"someValue\": \"data\"}\n</code></pre></p>"},{"location":"docs/server/handlers/#response_custom_encoder","title":"response_custom_encoder","text":"<p><code>response_custom_encoder</code>: <code>Callable | None = None</code> \u2014 <code>custom_encoder</code> parameter from <code>Pydantic</code>, allowing a custom encoder to be specified.</p>"},{"location":"docs/server/handlers/http_router/","title":"HTTPRouter","text":""},{"location":"docs/server/handlers/http_router/#description","title":"Description","text":"<p><code>HTTPRouter</code> allows registering groups of handlers and plays a key role in routing, directing requests to the appropriate handlers based on HTTP methods, paths, parameters, and other conditions.</p> <p>HTTPRouter is registered in the same way as any HTTP handler.</p> <pre><code>from rapidy import Rapidy\nfrom rapidy.http import HTTPRouter, get\n\n@get('/healthcheck')  # /healthcheck\nasync def healthcheck() -&gt; str:\n    return 'ok'\n\n@get('/hello')  # /api/hello\nasync def hello_handler() -&gt; dict[str, str]:\n    return {'hello': 'rapidy'}\n\napi_router = HTTPRouter('/api', [hello_handler])\n\nrapidy = Rapidy(http_route_handlers=[healthcheck, api_router])\n</code></pre> <p><code>HTTPRouter</code> does not support handler registration in the <code>aiohttp</code> style.</p> <p>None of the <code>aiohttp</code> style handler registration methods will work.</p> <p>If you need to register an HTTP handler in <code>HTTPRouter</code>, use the methods from the <code>rapidy.http</code> module (<code>get</code>, <code>post</code>, ...).</p>"},{"location":"docs/server/handlers/http_router/#nested-routers-httprouter","title":"Nested Routers (<code>HTTPRouter</code>)","text":"<p><code>HTTPRouter</code> can be nested within each other, allowing for the creation of modular applications.</p> <p>This is useful, for example, for API versioning.</p> <pre><code>from rapidy import Rapidy\nfrom rapidy.http import HTTPRouter, get\n\n@get('/hello')  # /api/v1/hello\nasync def hello_handler_v1() -&gt; dict[str, str | int]:\n    return {'hello': 'rapidy', 'version': 1}\n\n@get('/hello')  # /api/v2/hello\nasync def hello_handler_v2() -&gt; dict[str, str | int]:\n    return {'hello': 'rapidy', 'version': 2}\n\nv1_router = HTTPRouter('/v1', [hello_handler_v1])\nv2_router = HTTPRouter('/v2', [hello_handler_v2])\n\napi_router = HTTPRouter('/api', [v1_router, v2_router])\n\nrapidy = Rapidy(http_route_handlers=[api_router])\n</code></pre> <p>Each <code>HTTPRouter</code> can have its own middleware.</p> <p>This allows, for example, applying different authentication mechanisms to different route groups.</p> <pre><code>from rapidy import Rapidy\nfrom rapidy.http import get, HTTPRouter, middleware, Request, StreamResponse\nfrom rapidy.typedefs import CallNext\n\n@get('/hello')  # /api/v1/hello &amp; /api/v2/hello\nasync def hello_handler() -&gt; dict[str, str]:\n    return {'hello': 'rapidy'}\n\n@middleware\nasync def auth_middleware_1(request: Request, call_next: CallNext) -&gt; StreamResponse:\n    # auth logic 1 ...\n    print('auth 1 ...')\n    return await call_next(request)\n\n@middleware\nasync def auth_middleware_2(request: Request, call_next: CallNext) -&gt; StreamResponse:\n    # auth logic 2 ...\n    print('auth 2 ...')\n    return await call_next(request)\n\nrouter_auth_1 = HTTPRouter('/v1', [hello_handler], middlewares=[auth_middleware_1])\nrouter_auth_2 = HTTPRouter('/v2', [hello_handler], middlewares=[auth_middleware_2])\n\napi_router = HTTPRouter('/api', [router_auth_1, router_auth_2])\n\nrapidy = Rapidy(http_route_handlers=[api_router])\n</code></pre>"},{"location":"docs/server/handlers/http_router/#httprouter-attributes","title":"<code>HTTPRouter</code> Attributes","text":""},{"location":"docs/server/handlers/http_router/#path","title":"path","text":"<p><code>path</code>: <code>str</code> \u2014 the handler's route on the server.</p> <pre><code>from rapidy.http import HTTPRouter\n\nrouter = HTTPRouter(\n    path='/api',\n)\n</code></pre>"},{"location":"docs/server/handlers/http_router/#route_handlers","title":"route_handlers","text":"<p><code>route_handlers</code>: <code>Iterable[BaseHTTPRouter] = ()</code> \u2014 a list of route handlers. It can include both individual handlers and nested <code>HTTPRouter</code> instances.</p> <pre><code>from rapidy.http import get, HTTPRouter\n\n@get('/hello')  # /api/hello\nasync def hello_handler() -&gt; str:\n    return 'hello rapidy!'\n\nrouter = HTTPRouter(\n    path='/api',\n    route_handlers=[hello_handler],\n)\n</code></pre>"},{"location":"docs/server/handlers/http_router/#middlewares","title":"middlewares","text":"<p><code>middlewares</code>: <code>Optional[Iterable[Middleware]] = None</code> \u2014 a list of middleware applied to all handlers, including child routers.</p> <pre><code>from rapidy.http import middleware, Request, StreamResponse, HTTPRouter\nfrom rapidy.typedefs import CallNext\n\n@middleware\nasync def hello_middleware(request: Request, call_next: CallNext) -&gt; StreamResponse:\n    print('hello')\n    return await call_next(request)\n\nrouter = HTTPRouter(\n    path='/api',\n    middlewares=[hello_middleware],\n)\n</code></pre> <p>Read more about <code>Middlewares</code> here.</p>"},{"location":"docs/server/handlers/http_router/#client_max_size","title":"client_max_size","text":"<p><code>client_max_size</code>: <code>int = 1024**2</code> \u2014 The maximum request size in bytes.</p> <pre><code>from rapidy.http import HTTPRouter\n\nrouter = HTTPRouter(\n    path='/api',\n    client_max_size=1000,\n)\n</code></pre>"},{"location":"docs/server/handlers/http_router/#lifecycle-management","title":"Lifecycle Management","text":"<p><code>HTTPRouter</code> supports lifecycle management just like the main application.</p> <p>Read more about <code>Lifespan</code> here.</p>"},{"location":"docs/server/handlers/http_router/#on_startup","title":"on_startup","text":"<p><code>on_startup</code>: <code>Optional[List[LifespanHook]]</code> \u2014 a list of tasks executed when the application starts.</p> <pre><code>from rapidy.http import HTTPRouter\n\nasync def startup() -&gt; None:\n    print('startup')\n\nrouter = HTTPRouter(\n    path='/api',\n    on_startup=[startup],\n)\n</code></pre>"},{"location":"docs/server/handlers/http_router/#on_shutdown","title":"on_shutdown","text":"<p><code>on_shutdown</code>: <code>Optional[List[LifespanHook]]</code> \u2014 tasks executed when the server shuts down.</p> <pre><code>from rapidy.http import HTTPRouter\n\nasync def shutdown() -&gt; None:\n    print('shutdown')\n\nrouter = HTTPRouter(\n    path='/api',\n    on_shutdown=[shutdown],\n)\n</code></pre>"},{"location":"docs/server/handlers/http_router/#on_cleanup","title":"on_cleanup","text":"<p><code>on_cleanup</code>: <code>Optional[List[LifespanHook]]</code> \u2014 tasks executed after <code>on_shutdown</code>.</p> <pre><code>from rapidy.http import HTTPRouter\n\nasync def cleanup() -&gt; None:\n    print('cleanup')\n\nrouter = HTTPRouter(\n    path='/api',\n    on_cleanup=[cleanup],\n)\n</code></pre>"},{"location":"docs/server/handlers/http_router/#lifespan","title":"lifespan","text":"<p><code>lifespan</code>: <code>Optional[List[LifespanCTX]] = None</code> \u2014 a list of context managers that support application lifecycle management.</p> <pre><code>from contextlib import asynccontextmanager\nfrom typing import AsyncGenerator\nfrom rapidy import Rapidy\nfrom rapidy.http import HTTPRouter\n\n@asynccontextmanager\nasync def bg_task(rapidy: Rapidy) -&gt; AsyncGenerator[None, None]:\n    try:\n        print('starting background task')\n        yield\n    finally:\n        print('finishing background task')\n\nrouter = HTTPRouter(\n    path='/api',\n    lifespan=[bg_task],\n)\n</code></pre>"},{"location":"docs/server/http_errors/","title":"HTTP errors","text":""},{"location":"docs/server/http_errors/#description","title":"Description","text":"<p>HTTP errors are objects with specific logic that can return a web server response with a predefined <code>HTTP code</code>.</p> <p>Errors are raised using the <code>raise</code> statement.</p> <pre><code>from rapidy import Rapidy\nfrom rapidy.http import get, HTTPBadRequest\n\n@get('/')\nasync def handler() -&gt; None:\n    raise HTTPBadRequest()  # 400\n\napp = Rapidy(http_route_handlers=[handler])\n</code></pre> <p>HTTP errors can be raised either by the developer or by the <code>Rapidy</code> web server itself if a client or server makes a mistake.</p> <p>All errors are located in the <code>rapidy.web_exceptions</code> module, but they can also be imported from <code>rapidy.http</code>.</p>"},{"location":"docs/server/http_errors/#types-of-http-errors","title":"Types of HTTP errors","text":"<p><code>Rapidy</code> supports four types of HTTP errors:</p> <ul> <li>2xx \u2014 successful responses (base class \u2014 <code>HTTPSuccessful</code>)</li> <li>3xx \u2014 redirections (base class \u2014 <code>HTTPRedirection</code>)</li> <li>4xx \u2014 client errors (base class \u2014 <code>HTTPClientError</code>)</li> <li>5xx \u2014 server errors (base class \u2014 <code>HTTPServerError</code>)</li> </ul> <p>Base classes can be used to handle all child errors.</p> <p>More details about HTTP errors can be found in the <code>aiohttp</code> documentation here.</p>"},{"location":"docs/server/http_errors/#raising-http-errors","title":"Raising HTTP errors","text":""},{"location":"docs/server/http_errors/#raising-an-http-error-by-the-developer","title":"Raising an HTTP error by the developer","text":"<p>A developer can manually raise an error if request processing follows an unsuccessful scenario.</p> <pre><code>from rapidy import Rapidy\nfrom rapidy.http import get, HTTPBadRequest\n\n@get('/')\nasync def handler() -&gt; None:\n    raise HTTPBadRequest()  # 400\n\napp = Rapidy(http_route_handlers=[handler])\n</code></pre> <pre><code>curl -X GET http://127.0.0.1:8080\n</code></pre> <pre><code>400: Bad Request\n</code></pre>"},{"location":"docs/server/http_errors/#raising-an-http-error-by-the-web-server","title":"Raising an HTTP error by the web server","text":"<p>The web server will automatically raise an error if a request cannot be processed.</p> Not Found \u2014 <code>404</code> <p><pre><code>from rapidy import Rapidy\nfrom rapidy.http import get\n\n@get('/')\nasync def handler() -&gt; ...:\n    ...\n\napp = Rapidy(http_route_handlers=[handler])\n</code></pre> <pre><code>curl -X POST http://127.0.0.1:8080/some_api\n</code></pre> <pre><code>404: Not Found\n</code></pre></p> Method Not Allowed \u2014 <code>405</code> <p><pre><code>from rapidy import Rapidy\nfrom rapidy.http import get\n\n\n@get('/')\nasync def handler() -&gt; str:\n    return 'ok'\n\n\nrapidy = Rapidy(http_route_handlers=[handler])\n</code></pre> <pre><code>curl -X POST http://127.0.0.1:8080\n</code></pre> <pre><code>405: Method Not Allowed\n</code></pre></p>"},{"location":"docs/server/http_errors/#validation-error","title":"Validation Error","text":"<p>If a web request fails validation, the client will receive a response in <code>application/json</code> format with an error description.</p> <p><pre><code>from pydantic import BaseModel, Field\nfrom rapidy import Rapidy\nfrom rapidy.http import post, Body\n\nclass BodyRequestSchema(BaseModel):\n    data: str = Field(min_length=3, max_length=20)\n\n@post('/')\nasync def handler(\n        body: BodyRequestSchema = Body(),\n) -&gt; dict[str, str]:\n    return {'hello': 'rapidy'}\n\nrapidy = Rapidy(http_route_handlers=[handler])\n</code></pre> <pre><code>curl -X POST \\\n-H \"Content-Type: application/json\" -d '{\"data\": \"d\"}' -v \\\nhttp://127.0.0.1:8080\n</code></pre> <pre><code>&lt; HTTP/1.1 422 Unprocessable Entity ...\n{\n    \"errors\": [\n        {\n            \"loc\": [\"body\", \"data\"],\n            \"type\": \"string_too_short\",\n            \"msg\": \"String should have at least 3 characters\",\n            \"ctx\": {\"min_length\": 3}\n        }\n    ]\n}\n</code></pre></p> <p>The <code>HTTPValidationFailure</code> error contains a list of errors in the <code>validation_errors</code> field.</p> <p>To access these errors, you can catch <code>HTTPValidationFailure</code>: <pre><code>try:\n    return await handler(request)\nexcept HTTPValidationFailure as validation_failure_error:\n    errors = validation_failure_error.validation_errors\n    ...\n</code></pre></p> <p><code>HTTPValidationFailure</code> inherits from <code>HTTPUnprocessableEntity</code>.</p> <p>This means that both errors can be handled using <code>HTTPUnprocessableEntity</code> if you do not need to disclose detailed error information to the client. <pre><code>try:\n    return await handler(request)\nexcept HTTPUnprocessableEntity:\n    ...\n</code></pre></p>"},{"location":"docs/server/http_errors/#error-handling","title":"Error Handling","text":"<p>Sometimes it is necessary to catch an error, for example, to modify the server response.</p> <p>This can be done using <code>middleware</code>:</p> <pre><code>from logging import getLogger\nfrom rapidy.http import (\n    middleware, Request, StreamResponse, HTTPValidationFailure, HTTPInternalServerError, HTTPException,\n)\nfrom rapidy.typedefs import CallNext\n\nlogger = getLogger(__name__)\n\n\n@middleware\nasync def error_catch_middleware(\n        request: Request,\n        call_next: CallNext,\n) -&gt; StreamResponse:\n    try:\n        return await call_next(request)\n\n    except HTTPValidationFailure as validation_failure_error:\n        validation_errors = validation_failure_error.validation_errors\n        logger.debug('Validation error: `%s request: %s`', str(request.rel_url), validation_errors)\n        raise validation_failure_error\n\n    except HTTPInternalServerError as server_error:\n        logger.info('Internal server error: %s', server_error)\n        raise server_error\n\n    except HTTPException as unhandled_http_error:\n        raise unhandled_http_error\n\n    except Exception as unhandled_error:\n        logger.exception('Unhandled error `%s`: %s', str(request.rel_url), unhandled_error)\n        raise HTTPInternalServerError\n</code></pre> Example of handling all errors with a unified response <pre><code>from http import HTTPStatus\nfrom logging import getLogger\nfrom typing import Any\nfrom pydantic import BaseModel\nfrom rapidy import Rapidy, run_app\nfrom rapidy.http import (\n    get,\n    middleware,\n    Request,\n    Response,\n    StreamResponse,\n    HTTPValidationFailure,\n    HTTPClientError,\n    HTTPInternalServerError,\n    HTTPException,\n)\nfrom rapidy.typedefs import CallNext, ValidationErrorList\n\nlogger = getLogger(__name__)\n\nclass ServerResponse(BaseModel):\n    message: str = 'Success'\n    result: Any | None = None\n    errors: ValidationErrorList | None = None\n\n@middleware\nasync def error_catch_middleware(\n        request: Request,\n        call_next: CallNext,\n        response: Response,\n) -&gt; StreamResponse | ServerResponse:\n    try:\n        return await call_next(request)\n\n    except HTTPValidationFailure as validation_failure_error:\n        validation_errors = validation_failure_error.validation_errors\n        logger.debug('Validation error while processing: `%s request: %s', str(request.rel_url), validation_errors)\n        response.set_status(validation_failure_error.status)\n        return ServerResponse(message='Validation error', errors=validation_errors)\n\n    except HTTPClientError as client_error:  # all other `4xx' errors\n        logger.info('Client error while processing: %s request: %s', str(request.rel_url), client_error)\n        response.set_status(client_error.status)\n        return ServerResponse(message=client_error.reason)\n\n    except HTTPInternalServerError as server_error:\n        logger.info('Internal error - server raise HTTPInternalServerError: %s', server_error)\n        response.set_status(server_error.status)\n        return ServerResponse(message=server_error.reason)\n\n    except HTTPException as unhandled_http_error:  # all other unhandled http-errors\n        raise unhandled_http_error\n\n    except Exception as unhandled_error:\n        logger.exception('Internal error while processing `%s` error: %s', str(request.rel_url), unhandled_error)\n        response.set_status(HTTPStatus.INTERNAL_SERVER_ERROR)\n        return ServerResponse(message='Internal server error')\n\n@get('/')\nasync def handler() -&gt; ServerResponse:\n    return ServerResponse(result={'hello': 'rapidy'})\n\napp = Rapidy(middlewares=[error_catch_middleware], http_route_handlers=[handler])\n\nif __name__ == '__main__':\n    run_app(app)\n</code></pre>"},{"location":"docs/server/middlewares/","title":"Middlewares","text":""},{"location":"docs/server/middlewares/#description","title":"Description","text":"<p><code>Middleware</code> is an intermediate software layer that allows performing specific actions before and after processing a request by a route.</p> <pre><code>from rapidy import Rapidy\nfrom rapidy.http import middleware, get, Request, StreamResponse\nfrom rapidy.typedefs import CallNext\n\n@middleware\nasync def hello_rapidy_middleware(request: Request, call_next: CallNext) -&gt; StreamResponse:\n    print('before')\n    handler_response = await call_next(request)\n    print('after')\n    return handler_response\n\n@get('/')\nasync def handler() -&gt; dict[str, str]:\n    return {'hello': 'rapidy'}\n\nrapidy = Rapidy(\n    http_route_handlers=[handler],\n    middlewares=[hello_rapidy_middleware],\n)\n</code></pre> <p>Attribute Order</p> <p>In a web handler, the first argument is always <code>Request</code>, and the second is <code>CallNext</code> (the request handler or <code>middleware</code> in the chain). (They have the same signature \u2014 <code>rapidy.typedefs.CallNext</code>.)</p> <p>Handler Response Type</p> <p>The response from a web handler or the next <code>middleware</code> in the chain will always be <code>StreamResponse</code>. Keep this in mind when designing your <code>middleware</code>.</p>"},{"location":"docs/server/middlewares/#creation-methods","title":"Creation Methods","text":"<p>There are two ways to create <code>middleware</code>.</p>"},{"location":"docs/server/middlewares/#without-parameters","title":"Without Parameters","text":"<p>This approach is suitable if you do not need to manage the request within the <code>middleware</code>.</p> <pre><code>@middleware\nasync def hello_middleware(request: Request, call_next: CallNext) -&gt; StreamResponse:\n</code></pre>"},{"location":"docs/server/middlewares/#with-parameters","title":"With Parameters","text":"<p>Use this approach if you want more flexibility in managing the response to a request.</p> <pre><code>@middleware(\n    response_validate=...,\n    response_type = ...,\n    response_content_type = ...,\n    response_charset = ...,\n    response_zlib_executor = ...,\n    response_zlib_executor_size = ...,\n    response_include_fields = ...,\n    response_exclude_fields = ...,\n    response_by_alias = ...,\n    response_exclude_unset = ...,\n    response_exclude_defaults = ...,\n    response_exclude_none = ...,\n    response_custom_encoder = ...,\n    response_json_encoder = ...,\n)\nasync def hello_middleware(request: Request, call_next: CallNext) -&gt; StreamResponse:\n</code></pre>"},{"location":"docs/server/middlewares/#attributes","title":"Attributes","text":"<p><code>Rapidy-middleware</code> supports all data validation mechanisms available in web handlers, as well as response handling.</p>"},{"location":"docs/server/middlewares/#validation","title":"Validation","text":"<p>Like web handlers, <code>middleware</code> can access request objects via attributes.</p> <p>Before proceeding, we recommend reviewing the section Request \u2014 Managing HTTP Requests since <code>middleware</code> follows the same logic for handling request parameters.</p> <p>Processing a <code>Bearer</code> token.</p> <pre><code>from rapidy.http import middleware, StreamResponse, Header, Request\nfrom rapidy.typedefs import CallNext\n\nTOKEN_REGEXP = '^[Bb]earer (?P&lt;token&gt;[A-Za-z0-9-_=.]*)'\n\n@middleware\nasync def get_bearer_middleware(\n    request: Request,\n    call_next: CallNext,\n    bearer_token: str = Header(alias='Authorization', pattern=TOKEN_REGEXP),\n) -&gt; StreamResponse:\n    # process token here ...\n    return await call_next(request)\n</code></pre> <p>If you extract the <code>body</code> both in <code>middleware</code> and in the handler, you will not encounter an error about data being read multiple times.</p> <p>Extracted data is cached in memory and reused during validation.</p>"},{"location":"docs/server/middlewares/#response-management","title":"Response Management","text":"<p>Like web handlers, <code>middleware</code> can manage responses using its own attributes.</p> <p>Before proceeding, we recommend reviewing the section Response \u2014 Managing HTTP Responses since <code>middleware</code> follows the same response handling logic.</p> <p>Response management is only possible if the <code>middleware</code> returns an unprocessed data type (anything other than <code>Response</code> or <code>StreamResponse</code>).</p> <code>Middleware</code> manages the response using attributes. <pre><code>from rapidy import Rapidy\nfrom rapidy.http import middleware, StreamResponse, get, Request\nfrom rapidy.enums import ContentType\nfrom rapidy.typedefs import CallNext\n\n@middleware(response_content_type=ContentType.text_html)\nasync def hello_rapidy_middleware(request: Request, call_next: CallNext) -&gt; StreamResponse | str:\n    try:\n        return await call_next(request)\n    except Exception:\n        return 'server error'  # Content-Type='text/html'\n\n@get('/')\nasync def handler() -&gt; dict[str, str]:\n    raise Exception\n\nrapidy = Rapidy(middlewares=[hello_rapidy_middleware], http_route_handlers=[handler])\n</code></pre> <code>Middleware</code> cannot manage the response using attributes. <pre><code>from rapidy import Rapidy\nfrom rapidy.http import middleware, StreamResponse, get, Request, Response\nfrom rapidy.enums import ContentType\nfrom rapidy.typedefs import CallNext\n\n@middleware(response_content_type=ContentType.text_html)\nasync def hello_rapidy_middleware(request: Request, call_next: CallNext) -&gt; StreamResponse:\n    try:\n        return await call_next(request)\n    except Exception:\n        return Response(status=500)  # Content-Type='application/octet-stream'\n\n@get('/')\nasync def handler() -&gt; dict[str, str]:\n    raise Exception\n\nrapidy = Rapidy(middlewares=[hello_rapidy_middleware], http_route_handlers=[handler])\n</code></pre> <p>Accessing <code>Response</code>.</p> <pre><code>@middleware\nasync def hello_rapidy_middleware(\n    request: Request,\n    call_next: CallNext,\n    response: Response,\n) -&gt; StreamResponse:\n</code></pre> <p><code>Response</code> is created only for the current <code>middleware</code>.</p>"},{"location":"docs/server/middlewares/#middleware-returns-a-different-data-type","title":"<code>Middleware</code> Returns a Different Data Type","text":"<p>If <code>middleware</code> returns any data type other than <code>StreamResponse</code>, specify this type in <code>Union</code> so that <code>Rapidy</code> can use it for response validation.</p> <pre><code>@middleware\nasync def my_middleware(\n    request: Request,\n    call_next: CallNext,\n) -&gt; int | str | StreamResponse:  # or Union[int, str, StreamResponse]\n    if ...:\n        return 1\n    elif ...:\n        return 'string'\n    return await call_next(request)\n</code></pre>"},{"location":"docs/server/request/","title":"Request","text":"<p>The section describes the structure of HTTP requests and methods for handling them in <code>Rapidy</code>.</p>"},{"location":"docs/server/request/#description","title":"Description","text":"<p>A web request is a request sent by a client, such as a web browser, to a server to retrieve a web page or another resource.</p>"},{"location":"docs/server/request/#http-request-structure","title":"HTTP Request Structure","text":"<p>An HTTP request consists of a start line, headers, and a body.</p>"},{"location":"docs/server/request/#start-line","title":"Start Line","text":"<p>Example: <code>GET /index.html HTTP/1.1</code></p> <p>The HTTP request start line includes:</p> <ul> <li>HTTP request method (method, sometimes referred to as verb) \u2014 a short word that defines the action to be performed on the requested resource.</li> <li>Request target \u2014 the resource URL, consisting of the protocol, domain name (or IP address), path to the resource on the server, and optionally, the port, HTTP request parameters, and other optional elements.</li> <li>Protocol version (HTTP protocol) \u2014 HTTP/1.1.</li> </ul> HTTP Request Methods Method Description GET Requests information. HEAD Requests only headers. POST Sends data (e.g., login form, text, PDF documents, binary data). PUT Creates a new resource. PATCH Partially updates a resource. DELETE Deletes a resource. OPTIONS Requests information about the server (e.g., supported HTTP methods for a resource). HTTP Protocol Versions <p>HTTP standards are developed by the Internet Engineering Task Force (IETF) and the World Wide Web Consortium (W3C), leading to the publication of a series of Requests for Comments (RFC).</p> Version Protocol Type Transport Layer Description HTTP/1.1 Text-based TCP Requires waiting for a response before sending the next request within the same connection. HTTP/2 Binary TCP Allows multiplexing, meaning multiple requests can be processed concurrently. HTTP/3 Binary UDP (QUIC) Operates over UDP, providing faster and more reliable data transmission."},{"location":"docs/server/request/#request-headers","title":"Request Headers","text":"<p>An HTTP header is a line formatted as <code>Header-Name: Value</code>, where a colon (<code>:</code>) serves as a separator. Header names are case-insensitive: <code>Host</code> and <code>host</code> are treated the same. By convention, each word in a header name starts with a capital letter.</p> Header Examples Category Description Host Specifies the host from which the resource is requested (can be a domain name or IP address). User-Agent Contains information about the client (browser, version, user's OS). Referer Indicates the origin of the current request. Cookie Transfers user cookies. Content-Type Specifies the type of data being transmitted in the request body. Authorization Provides credentials for authenticating the client on the server."},{"location":"docs/server/request/#request-body","title":"Request Body","text":"<p>The request body is optional and contains data related to the request. The type of transmitted information is specified in the <code>Content-Type</code> header. The request body can be a JSON object, media file, document, text, byte sequence, etc.</p>"},{"location":"docs/server/request/#managing-http-requests","title":"Managing HTTP Requests","text":"<p>To handle HTTP requests, <code>Rapidy</code> uses the <code>Request</code> entity.</p> More about the <code>Request</code> object <p><code>Rapidy</code> is based on <code>aiohttp</code> mechanisms and uses <code>aiohttp.web.Request</code>. In fact, <code>rapidy.http.Request</code> is a reference to <code>aiohttp.web.Request</code> for ease of use.</p> <p>More details on <code>aiohttp.web.Request</code> can be found here.</p> <p>This section explains how to extract and validate data from an incoming HTTP request using <code>Rapidy</code>.</p>"},{"location":"docs/server/request/#retrieving-data-via-request-parameters","title":"Retrieving Data via Request Parameters","text":"<p>You can extract and validate any HTTP request parameter using <code>pydantic</code> and <code>Rapidy</code>'s functionality.</p> <p>Extract a parameter from <code>rapidy.http</code>, <code>rapidy.parameters.http</code>, or <code>rapidy.web</code> (<code>aiohttp</code> style).</p> <pre><code>from rapidy.http import PathParam, Header, Cookie, QueryParam, Body, get\n\n@get('/{user_id}')\nasync def handler(\n        user_id: int = PathParam(),\n        host: str = Header(alias='Host'),\n        session: str = Cookie(alias='UserSession'),\n        age_filter: str = QueryParam(alias='AgeFilter'),\n        data: str = Body(),\n) -&gt; ...:\n</code></pre> Import from <code>rapidy.parameters.http</code>. <pre><code>from rapidy.http import get\nfrom rapidy.parameters.http import PathParam, Header, Cookie, QueryParam, Body\n\n@get('/{user_id}')\nasync def handler(\n        user_id: int = PathParam(),\n        host: str = Header(alias='Host'),\n        session: str = Cookie(alias='UserSession'),\n        age_filter: str = QueryParam(alias='AgeFilter'),\n        data: str = Body(),\n) -&gt; ...:\n</code></pre> Import from <code>rapidy.web</code> (<code>aiohttp</code> style). <pre><code>from rapidy import web\n\nroutes = web.RouteTableDef()\n\n@routes.get('/{user_id}')\nasync def handler(\n        user_id: int = web.PathParam(),\n        host: str = web.Header(alias='Host'),\n        session: str = web.Cookie(alias='UserSession'),\n        age_filter: str = web.QueryParam(alias='AgeFilter'),\n        data: str = web.Body(),\n) -&gt; ...:\n</code></pre> <p>For more details, see the Parameters section.</p>"},{"location":"docs/server/request/#retrieving-data-via-the-request-object","title":"Retrieving Data via the Request Object","text":"<p>You can also retrieve data directly from the <code>rapidy.http.Request</code> object by adding it as an argument to your HTTP handler.</p> <pre><code>from rapidy.http import get, Request\n\n@get('/{user_id}')\nasync def handler(\n    request: Request,\n) -&gt; ...:\n    path_params = request.match_info  # dict[str, str]\n    headers = request.headers  # CIMultiDictProxy[str]\n    cookies = request.cookies  # Mapping[str, str]\n    query_params = request.rel_url.query  # MultiDictProxy[str]\n    json_body = await request.json()  # Any\n    text_body = await request.text()  # str\n    bytes_body = await request.read()  # bytes\n    stream_body = request.content  # StreamReader\n</code></pre> <p>If the handler argument has a <code>Request</code> type annotation, its order does not matter.</p> <pre><code>from rapidy.http import get, Header, Request\n\n@get('/')\nasync def handler(\n        host: str = Header(alias='Host'),\n        *,\n        request: Request,\n) -&gt; ...:\n</code></pre> <p>If the first argument of the handler does not have a type annotation, <code>Rapidy</code> will automatically assume <code>Request</code>.</p> <pre><code>from rapidy.http import get\n\n@get('/')\nasync def handler(\n        any_attr,\n) -&gt; ...:\n    print(type(any_attr))\n    # web.Request\n</code></pre> <p><code>Rapidy</code> utilizes built-in <code>aiohttp</code> data extraction mechanisms.</p> <p>More details on <code>aiohttp.web.Request</code> and its data extraction methods can be found here.</p>"},{"location":"docs/server/request/parameters/","title":"Parameters","text":"<p>In this section, we will explore how to extract and validate HTTP parameters using <code>Rapidy</code>.</p>"},{"location":"docs/server/request/parameters/#basics-of-data-extraction-and-validation","title":"Basics of Data Extraction and Validation","text":"<p>To validate and extract data from an incoming HTTP request, Rapidy uses its internal data types \u2014 rapidy parameters.</p> <p>The example below extracts and validates a dynamic path variable <code>user_id</code> and the header <code>Host</code>:</p> <pre><code>from rapidy.http import get, PathParam, Header\n\n@get('/{user_id}')\nasync def handler(\n    user_id: int = PathParam(),\n    host: str = Header(alias='Host'),\n) -&gt; ...:\n</code></pre>"},{"location":"docs/server/request/parameters/#what-is-a-rapidy-parameter","title":"What is a rapidy parameter?","text":"<p>A rapidy parameter is a <code>meta-object</code> that contains information on how parameters from an incoming HTTP request should be extracted.</p> <p>All rapidy parameters are located in the <code>rapidy.parameters.http</code> module:</p> <pre><code>from rapidy.parameters.http import Header, Cookie, QueryParam, ..., Body\n\nasync def handler(\n    user_id: int = QueryParam(),\n) -&gt; ...:\n    ...\n</code></pre> <p>They can also be accessed via the <code>rapidy.http</code> module:</p> <pre><code>from rapidy.http import Header, Cookie, QueryParam, ..., Body\n\nasync def handler(\n    user_id: int = QueryParam(),\n) -&gt; ...:\n    ...\n</code></pre>"},{"location":"docs/server/request/parameters/#http-request-parameters","title":"HTTP Request Parameters","text":"<p>You can learn more about each parameter type in the corresponding sections:</p> <ul> <li>Path \u2014 path parameters (used for creating dynamic APIs)</li> <li>Headers \u2014 request header parameters</li> <li>Cookies \u2014 cookie parameters (automatically extracted from headers)</li> <li>Query Parameters \u2014 query parameters passed in the URL</li> <li>Body \u2014 request body parameters</li> </ul>"},{"location":"docs/server/request/parameters/#data-extraction","title":"Data Extraction","text":"<p>Data can be extracted using either the rapidy parameter's <code>attribute name</code> or its <code>alias</code>.</p> <p>Extraction using attribute name</p> <p><pre><code>from rapidy.http import QueryParam\n\nasync def handler(\n    test_query_param_name: int = QueryParam(),\n) -&gt; int:\n    return test_query_param_name\n</code></pre> <pre><code>curl -G -v -d \"test_query_param_name=123456789\" http://127.0.0.1:8080\n# &lt; HTTP/1.1 200 OK ...\n# 123456789\n</code></pre></p> <p>Extraction using alias</p> <p><pre><code>from rapidy.http import QueryParam\n\nasync def handler(\n    test_query_param_name: int = QueryParam(alias='TestQueryParamName'),\n) -&gt; int:\n    return test_query_param_name\n</code></pre> <pre><code>curl -G -v -d \"TestQueryParamName=123456789\" http://127.0.0.1:8080\n# &lt; HTTP/1.1 200 OK ...\n# 123456789\n</code></pre></p>"},{"location":"docs/server/request/parameters/#validation-capabilities","title":"Validation Capabilities","text":"<p>Each rapidy parameter inherits from pydantic.Field and supports all of its features.</p> <pre><code>@get('/')\nasync def handler(\n    positive: int = QueryParam(gt=0),\n    non_negative: int = QueryParam(ge=0),\n    negative: int = QueryParam(lt=0),\n    non_positive: int = QueryParam(le=0),\n    even: int = QueryParam(multiple_of=2),\n    love_for_pydantic: float = QueryParam(allow_inf_nan=True),\n    short: str = QueryParam(min_length=3),\n    long: str = QueryParam(max_length=10),\n    regex: str = QueryParam(pattern=r'^\\d*$'),\n    precise: Decimal = QueryParam(max_digits=5, decimal_places=2),\n) -&gt; ...:\n    ...\n</code></pre>"},{"location":"docs/server/request/parameters/#parameter-annotation-methods","title":"Parameter Annotation Methods","text":""},{"location":"docs/server/request/parameters/#defining-a-parameter-as-a-default-value","title":"Defining a Parameter as a Default Value","text":"<p>The simplest and most intuitive way to define a parameter:</p> <pre><code>from rapidy.http import get, PathParam\n\n@get('/{user_id}')\nasync def handler(\n    user_id: int = PathParam(),\n) -&gt; ...:\n    ...\n</code></pre> <p>However, if you use static code analyzers like <code>mypy</code>, you might encounter errors: <pre><code>main.py:4: error: Incompatible default for argument \"user_id\" (default has type \"PathParam\", argument has type\n\"int\")  [assignment]\n</code></pre></p> <p>To prevent this, enable the mypy plugin for Rapidy: <pre><code># pyproject.toml\n[tool.mypy]\nplugins = [\n    \"pydantic.mypy\",\n    \"rapidy.mypy\"     # &lt;-- enable Rapidy plugin\n]\n</code></pre></p>"},{"location":"docs/server/request/parameters/#annotation-using-typingannotated","title":"Annotation Using <code>typing.Annotated</code>","text":"<p>You can read more about <code>typing.Annotated</code> in the official Python documentation here.</p> <pre><code>from typing import Annotated\nfrom rapidy.http import get, PathParam\n\n@get('/{user_id}')\nasync def handler(\n    user_id: Annotated[int, PathParam()],\n) -&gt; ...:\n    ...\n</code></pre> <p>The <code>Annotated</code> annotation uses two key arguments:</p> <ul> <li>The first argument Annotated[int, ...] defines the expected data type   (in this case, <code>int</code>).</li> <li>The last argument Annotated[..., PathParam()] must be one of the   Rapidy HTTP parameters (<code>Header</code>, <code>Headers</code>, <code>Cookie</code>, ..., <code>Body</code>).   In this case, the server expects the <code>Host</code> header.</li> </ul> <p>Since <code>Annotated</code> can accept an unlimited number of parameters, Rapidy explicitly takes only the first and last arguments for validation. Other parameters may be used as metadata for the validation model in <code>pydantic</code>, if supported, to perform additional type checks.</p> <p>Missing HTTP Parameters in <code>Annotated</code></p> <p>If <code>Annotated</code> does not contain an HTTP parameter, such as <code>Annotated[str, str]</code>, the attribute will be ignored.</p> <p>Support for Default Values</p> <p><code>Header(default=..., default_factory=...)</code></p> <p>You can read more about default values in the corresponding section of each HTTP parameter.</p>"},{"location":"docs/server/request/parameters/cookies/","title":"Cookies","text":"<p>This section explains how to extract and validate cookies using <code>Rapidy</code>.</p> <p>You can validate the data using any type supported by <code>pydantic</code>.</p>"},{"location":"docs/server/request/parameters/cookies/#description","title":"Description","text":"<p>A cookie is a small set of user data stored on their device without modifications or processing.</p> <p>The web client sends this data to the web server as part of an HTTP request each time it accesses the corresponding website.</p>"},{"location":"docs/server/request/parameters/cookies/#extracting-a-single-cookie","title":"Extracting a Single Cookie","text":"<p><code>Cookie</code> allows retrieving a specific cookie by its name.</p> <p><pre><code>from rapidy.http import get, Cookie\n\n@get('/')\nasync def handler(\n    user_id: str = Cookie(alias='UserID'),\n) -&gt; ...:\n</code></pre> <pre><code>from rapidy.http import get, Cookie\n\n@get('/')\nasync def handler(\n    user_id: str = Cookie(alias='UserID'),\n    user_session: str = Cookie(alias='UserSession'),\n) -&gt; ...:\n</code></pre></p>"},{"location":"docs/server/request/parameters/cookies/#extracting-all-cookies","title":"Extracting All Cookies","text":"<p><code>Cookies</code> allows retrieving all cookies at once.</p>"},{"location":"docs/server/request/parameters/cookies/#extracting-into-a-predefined-schema","title":"Extracting into a Predefined Schema","text":""},{"location":"docs/server/request/parameters/cookies/#pydanticbasemodel","title":"pydantic.BaseModel","text":"<pre><code>from pydantic import BaseModel, Field\nfrom rapidy.http import get, Cookies\n\nclass CookieData(BaseModel):\n    user_id: str = Field(alias='UserID')\n    user_session: str = Field(alias='User-Session')\n\n@get('/')\nasync def handler(\n    cookie_data: CookieData = Cookies(),\n) -&gt; ...:\n</code></pre>"},{"location":"docs/server/request/parameters/cookies/#dataclassesdataclass","title":"dataclasses.dataclass","text":"<p><code>dataclasses.dataclass</code> is supported as a model type, but it is not possible to set an <code>alias</code> using standard <code>dataclasses</code> tools.</p> <pre><code>from dataclasses import dataclass\nfrom rapidy.http import get, Cookies\n\n@dataclass\nclass CookieData:\n    UserID: str  # camelCase syntax if cookie name is 'UserID'\n    user_session: str  # cannot extract if cookie name is 'User-Session'\n\n@get('/')\nasync def handler(\n    cookie_data: CookieData = Cookies(),\n) -&gt; ...:\n# {\"errors\": [{\"type\": \"missing\", \"loc\": [\"cookie\", \"user_session\"], \"msg\": \"Field required\"}]}\n</code></pre>"},{"location":"docs/server/request/parameters/cookies/#extracting-into-a-dictionary","title":"Extracting into a Dictionary","text":"<pre><code>from rapidy.http import get, Cookies\n\n@get('/')\nasync def handler(\n    cookie_data: dict[str, str] = Cookies(),\n) -&gt; ...:\n# {'UserID': ..., 'User-Session': ...}\n</code></pre>"},{"location":"docs/server/request/parameters/cookies/#extracting-without-validation","title":"Extracting Without Validation","text":"<p>Disabling validation is not recommended.</p> <p>If validation is disabled, the parameter will return a basic <code>aiohttp</code> structure:</p> <ul> <li><code>Cookie</code> \u2192 <code>str</code></li> <li><code>Cookies</code> \u2192 <code>Mapping[str, str]</code></li> </ul>"},{"location":"docs/server/request/parameters/cookies/#ways-to-disable-validation","title":"Ways to Disable Validation","text":""},{"location":"docs/server/request/parameters/cookies/#explicit-disabling","title":"Explicit Disabling","text":"<pre><code>from rapidy.http import get, Cookie, Cookies\n\n@get('/')\nasync def handler_1(\n    user_id: int = Cookie(alias='UserID', validate=False)\n) -&gt; ...:\n    # ...\n\n@get('/')\nasync def handler_2(\n    cookie_data: int = Cookies(validate=False)\n) -&gt; ...:\n    # # {'UserID': ..., 'User-Session': ...}\n</code></pre>"},{"location":"docs/server/request/parameters/cookies/#using-any","title":"Using <code>Any</code>","text":"<pre><code>from typing import Any\n\n@get('/')\nasync def handler_1(\n    user_id: Any = Cookie(alias='UserID', validate=False)\n) -&gt; ...:\n    # ...\n\n@get('/')\nasync def handler_2(\n    cookie_data: Any = Cookies(validate=False)\n) -&gt; ...:\n    # # {'UserID': ..., 'User-Session': ...}\n</code></pre>"},{"location":"docs/server/request/parameters/cookies/#no-type-annotation","title":"No Type Annotation","text":"<p>If no type is specified, it defaults to <code>Any</code>. <pre><code>@get('/')\nasync def handler_1(\n    user_id=Cookie(alias='UserID')\n) -&gt; ...:\n    # ...\n\n@get('/')\nasync def handler_2(\n    cookie_data=Cookies()\n) -&gt; ...:\n    # # {'UserID': ..., 'User-Session': ...}\n</code></pre></p>"},{"location":"docs/server/request/parameters/cookies/#default-values","title":"Default Values","text":"<p>The default value for <code>Cookie</code> will be used if no cookie with the specified name is found in the request.</p> <p>The default value for <code>Cookies</code> will be used if no cookies are found in the request.</p>"},{"location":"docs/server/request/parameters/cookies/#using-default","title":"Using <code>default</code>","text":"<p><pre><code>@get('/')\nasync def handler(\n    some_cookie: str = Cookie(alias='Some-Cookie', default='SomeValue'),\n) -&gt; ...:\n</code></pre> <pre><code>from typing import Annotated\n\n@get('/')\nasync def handler(\n    some_cookie: Annotated[str, Cookie(alias='Some-Cookie', default='SomeValue')],\n) -&gt; ...:\n</code></pre> <pre><code>from typing import Annotated\n\n@get('/')\nasync def handler(\n    some_cookie: Annotated[str, Cookie(alias='Some-Cookie')] = 'SomeValue',\n) -&gt; ...:\n</code></pre></p>"},{"location":"docs/server/request/parameters/cookies/#using-default_factory","title":"Using <code>default_factory</code>","text":"<p><pre><code>@get('/')\nasync def handler(\n    some_cookie: str = Cookie(alias='Some-Cookie', default_factory=lambda: 'SomeValue'),\n) -&gt; ...:\n</code></pre> <pre><code>from typing import Annotated\n\n@get('/')\nasync def handler(\n    some_cookie: Annotated[str, Cookie(alias='Some-Cookie', default_factory=lambda:'SomeValue')],\n) -&gt; ...:\n</code></pre></p> <p>You cannot use <code>default</code> and <code>default_factory</code> simultaneously.</p> <p>Attempting to specify both will raise a <code>pydantic</code> exception: <pre><code>TypeError('cannot specify both default and default_factory')\n</code></pre></p>"},{"location":"docs/server/request/parameters/cookies/#warnings-and-considerations","title":"Warnings and Considerations","text":""},{"location":"docs/server/request/parameters/cookies/#using-cookie-and-cookies-together","title":"Using <code>Cookie</code> and <code>Cookies</code> together","text":"<p>It is not possible to use <code>Cookie</code> and <code>Cookies</code> in the same handler.</p> <pre><code>@get('/')\nasync def handler(\n    user_id: str = Cookie(alias='UserID'),\n    cookie_data: CookieData = Cookies(),\n) -&gt; ...:\n</code></pre> <p>When the application starts, an <code>AnotherDataExtractionTypeAlreadyExistsError</code> exception will be raised.</p> <pre><code>------------------------------\nAttribute with this data extraction type cannot be added to the handler - another data extraction type is already in use.\n\nHandler path: `main.py`\nHandler name: `handler`\nAttribute name: `cookie_data`\n------------------------------\n</code></pre>"},{"location":"docs/server/request/parameters/cookies/#the-alias-attribute-in-cookies","title":"The <code>alias</code> Attribute in <code>Cookies</code>","text":"<p>The <code>alias</code> attribute does not work in the <code>Cookies()</code> parameter.</p> <pre><code>@get('/')\nasync def handler(\n    cookie_data: CookieData = Cookies(alias='SomeName'),  # &lt;-- alias not working\n) -&gt; ...:\n</code></pre>"},{"location":"docs/server/request/parameters/cookies/#how-raw-data-is-extracted","title":"How Raw Data Is Extracted","text":"<p><code>Rapidy</code> uses the <code>cookies</code> method of the <code>Request</code> object and then passes the retrieved data to a <code>pydantic</code> model for validation.</p> <p>How data extraction works in <code>Rapidy</code></p> <pre><code>async def extract_cookies(request: Request) -&gt; Mapping[str, str]:\n    return request.cookies\n</code></pre> <p><code>Rapidy</code> uses built-in <code>aiohttp</code> mechanisms for data extraction.</p> <p>More details about the <code>aiohttp.Request</code> object and methods for extracting data from it can be found here.</p>"},{"location":"docs/server/request/parameters/headers/","title":"Headers","text":"<p>This section covers how to extract and validate headers using <code>Rapidy</code>.</p> <p>You can validate the data using any type supported by <code>pydantic</code>.</p>"},{"location":"docs/server/request/parameters/headers/#description","title":"Description","text":"<p>HTTP headers allow the client and server to exchange additional information in HTTP requests and responses.</p>"},{"location":"docs/server/request/parameters/headers/#extracting-a-single-header","title":"Extracting a Single Header","text":"<p><code>Header</code> allows you to retrieve a specific header.</p> <p><pre><code>from rapidy.http import get, Header\n\n@get('/')\nasync def handler(\n    host: str = Header(alias='Host'),\n) -&gt; ...:\n</code></pre> <pre><code>from rapidy.http import get, Header\n\n@get('/')\nasync def handler(\n    host: str = Header(alias='Host'),\n    keep_alive: str = Header(alias='Keep-Alive'),\n) -&gt; ...:\n</code></pre></p>"},{"location":"docs/server/request/parameters/headers/#extracting-all-headers","title":"Extracting All Headers","text":"<p><code>Headers</code> allows you to extract all headers at once.</p>"},{"location":"docs/server/request/parameters/headers/#extracting-into-a-predefined-schema","title":"Extracting into a Predefined Schema","text":""},{"location":"docs/server/request/parameters/headers/#pydanticbasemodel","title":"pydantic.BaseModel","text":"<pre><code>from pydantic import BaseModel, Field\nfrom rapidy.http import get, Headers\n\nclass HeadersData(BaseModel):\n    host: str = Field(alias='Host')\n    keep_alive: str = Field(alias='Keep-Alive')\n\n@get('/')\nasync def handler(\n    headers_data: HeadersData = Headers(),\n) -&gt; ...:\n</code></pre>"},{"location":"docs/server/request/parameters/headers/#dataclassesdataclass","title":"dataclasses.dataclass","text":"<p><code>dataclasses.dataclass</code> is supported as a model type, but you cannot set an <code>alias</code> using standard <code>dataclasses</code> tools.</p> <pre><code>from dataclasses import dataclass\nfrom rapidy.http import get, Headers\n\n@dataclass\nclass HeadersData:\n    host: str\n    keep_alive: str  # cannot extract if header name is 'Keep-Alive'\n\n@get('/')\nasync def handler(\n    headers_data: HeadersData = Headers(),\n) -&gt; ...:\n# {\"errors\": [{\"type\": \"missing\", \"loc\": [\"header\", \"keep_alive\" ], \"msg\": \"Field required\"}]}\n</code></pre>"},{"location":"docs/server/request/parameters/headers/#extracting-into-a-dictionary","title":"Extracting into a Dictionary","text":"<pre><code>from rapidy.http import get, Headers\n\n@get('/')\nasync def handler(\n    headers_data: dict[str, str] = Headers(),\n) -&gt; ...:\n# {Host': '0.0.0.0:8080', 'Connection': 'keep-alive', 'Upgrade-Insecure-Requests': '1', 'User-Agent': '...'}\n</code></pre>"},{"location":"docs/server/request/parameters/headers/#extracting-without-validation","title":"Extracting Without Validation","text":"<p>Disabling validation is not recommended.</p> <p>If validation is disabled, the parameter will return the basic <code>aiohttp</code> structure:</p> <ul> <li><code>Header</code> \u2192 <code>str</code></li> <li><code>Headers</code> \u2192 <code>CIMultiDictProxy[str]</code></li> </ul>"},{"location":"docs/server/request/parameters/headers/#ways-to-disable-validation","title":"Ways to Disable Validation","text":""},{"location":"docs/server/request/parameters/headers/#explicit-disabling","title":"Explicit Disabling","text":"<pre><code>from multidict import CIMultiDictProxy\nfrom rapidy.http import get, Header, Headers\n\n@get('/')\nasync def handler_1(\n    header_host: str = Header(alias='Host', validate=False)\n) -&gt; ...:\n    # \"0.0.0.0:8080\"\n\n@get('/')\nasync def handler_2(\n    headers_data: CIMultiDictProxy[str] = Headers(validate=False)\n) -&gt; ...:\n    # &lt;CIMultiDictProxy('Host': '0.0.0.0:8080', 'Connection': 'keep-alive', 'Upgrade-Insecure-Requests': '1', 'User-Agent': '...')&gt;\n</code></pre>"},{"location":"docs/server/request/parameters/headers/#using-any","title":"Using <code>Any</code>","text":"<pre><code>from typing import Any\n\n@get('/')\nasync def handler_1(\n    header_host: Any = Header(alias='Host')\n) -&gt; ...:\n    # \"0.0.0.0:8080\"\n\n@get('/')\nasync def handler_2(\n    headers_data: Any = Headers()\n) -&gt; ...:\n    # &lt;CIMultiDictProxy('Host': '0.0.0.0:8080', 'Connection': 'keep-alive', 'Upgrade-Insecure-Requests': '1', 'User-Agent': '...')&gt;\n</code></pre>"},{"location":"docs/server/request/parameters/headers/#no-type-annotation","title":"No Type Annotation","text":"<p>If the type is not specified, it defaults to <code>Any</code>. <pre><code>from typing import Any\n\n@get('/')\nasync def handler_1(\n    header_host=Header(alias='Host')\n) -&gt; ...:\n    # \"0.0.0.0:8080\"\n\n@get('/')\nasync def handler_2(\n    headers_data=Headers()\n) -&gt; ...:\n    # &lt;CIMultiDictProxy('Host': '0.0.0.0:8080', 'Connection': 'keep-alive', 'Upgrade-Insecure-Requests': '1', 'User-Agent': '...')&gt;\n</code></pre></p>"},{"location":"docs/server/request/parameters/headers/#default-values","title":"Default Values","text":"<p>The default value for <code>Header</code> is used if the request does not contain a header with the specified name.</p> <p>The default value for <code>Headers</code> is used if the request contains no headers at all.</p> <p>A default value for <code>Headers</code> is practically never used.</p> <p>Any HTTP client will always send basic headers, making this case nearly impossible. However, if it ever happens, it will work as expected.</p>"},{"location":"docs/server/request/parameters/headers/#using-default","title":"Using <code>default</code>","text":"<p><pre><code>@get('/')\nasync def handler(\n    some_header: str = Header(alias='Some-Header', default='SomeValue'),\n) -&gt; ...:\n</code></pre> <pre><code>from typing import Annotated\n\n@get('/')\nasync def handler(\n    some_header: Annotated[str, Header(alias='Some-Header', default='SomeValue')],\n) -&gt; ...:\n</code></pre> <pre><code>from typing import Annotated\n\n@get('/')\nasync def handler(\n    some_header: Annotated[str, Header(alias='Some-Header')] = 'SomeValue',\n) -&gt; ...:\n</code></pre></p>"},{"location":"docs/server/request/parameters/headers/#using-default_factory","title":"Using <code>default_factory</code>","text":"<p><pre><code>@get('/')\nasync def handler(\n    some_header: str = Header(alias='Some-Header', default_factory=lambda: 'SomeValue'),\n) -&gt; ...:\n</code></pre> <pre><code>from typing import Annotated\n\n@get('/')\nasync def handler(\n    some_header: Annotated[str, Header(alias='Some-Header', default_factory=lambda:'SomeValue')],\n) -&gt; ...:\n</code></pre></p> <p>You cannot use <code>default</code> and <code>default_factory</code> at the same time.</p> <p>Attempting to specify both will raise a <code>pydantic</code> exception: <pre><code>TypeError('cannot specify both default and default_factory')\n</code></pre></p>"},{"location":"docs/server/request/parameters/headers/#warnings-and-considerations","title":"Warnings and Considerations","text":""},{"location":"docs/server/request/parameters/headers/#using-header-and-headers-together","title":"Using <code>Header</code> and <code>Headers</code> together","text":"<p>You cannot use <code>Header</code> and <code>Headers</code> in the same handler.</p> <pre><code>@get('/')\nasync def handler(\n    host: str = Header(alias='Host'),\n    headers_data: HeadersData = Headers(),\n) -&gt; ...:\n</code></pre> <p>When the application starts, an <code>AnotherDataExtractionTypeAlreadyExistsError</code> exception will be raised.</p> <pre><code>------------------------------\nAttribute with this data extraction type cannot be added to the handler - another data extraction type is already use in handler.\n\nHandler path: `main.py`\nHandler name: `handler`\nAttribute name: `headers_data`\n------------------------------\n</code></pre>"},{"location":"docs/server/request/parameters/headers/#the-alias-attribute-in-headers","title":"The <code>alias</code> Attribute in <code>Headers</code>","text":"<p>The <code>alias</code> attribute does not work in the <code>Headers()</code> parameter.</p> <pre><code>@get('/')\nasync def handler(\n    headers_data: HeadersData = Headers(alias='SomeName'),  # &lt;-- alias not working\n) -&gt; ...:\n</code></pre>"},{"location":"docs/server/request/parameters/headers/#how-raw-data-is-extracted","title":"How Raw Data is Extracted","text":"<p><code>Rapidy</code> uses the <code>headers</code> method of the <code>Request</code> object and then passes the retrieved data to a <code>pydantic</code> model for validation.</p> <p>How data extraction works in <code>Rapidy</code></p> <pre><code>async def extract_headers(request: Request) -&gt; CIMultiDictProxy[str]:\n    return request.headers\n</code></pre> <p><code>Rapidy</code> uses built-in <code>aiohttp</code> mechanisms.</p> <p>For more details on the <code>aiohttp.Request</code> object and data extraction methods, see here.</p>"},{"location":"docs/server/request/parameters/path/","title":"Path","text":"<p>This section explains how to extract and validate path parameters in <code>Rapidy</code>.</p> <p>You can validate data using any type supported by <code>pydantic</code>.</p>"},{"location":"docs/server/request/parameters/path/#description","title":"Description","text":"<p>Path parameters allow you to create dynamic routes in your application.</p> <p>You can define path parameters using Python's formatted string syntax:</p> <pre><code>from rapidy.http import get, PathParam\n\n@get('/{user_id}')\nasync def handler(\n    user_id: str = PathParam(),\n) -&gt; ...:\n</code></pre> <p>For more details on dynamic routes in <code>aiohttp</code>, see here.</p>"},{"location":"docs/server/request/parameters/path/#extracting-a-single-path-parameter","title":"Extracting a Single Path Parameter","text":"<p><code>PathParam</code> allows you to extract a single path parameter.</p> <p><pre><code>from rapidy.http import get, PathParam\n\n@get('/{user_id}')\nasync def handler(\n    user_id: str = PathParam(),\n) -&gt; ...:\n</code></pre> <pre><code>from rapidy.http import get, PathParam\n\n@get('/{user_id}/{user_data}')\nasync def handler(\n    user_id: str = PathParam(),\n    user_data: str = PathParam(),\n) -&gt; ...:\n</code></pre></p>"},{"location":"docs/server/request/parameters/path/#extracting-all-path-parameters","title":"Extracting All Path Parameters","text":"<p><code>PathParams</code> allows you to extract all path parameters at once.</p>"},{"location":"docs/server/request/parameters/path/#extraction-into-a-predefined-schema","title":"Extraction into a Predefined Schema","text":""},{"location":"docs/server/request/parameters/path/#pydanticbasemodel","title":"pydantic.BaseModel","text":"<pre><code>from pydantic import BaseModel\nfrom rapidy.http import get, PathParams\n\nclass PathData(BaseModel):\n    user_id: str\n    user_data: str\n\n@get('/{user_id}/{user_data}')\nasync def handler(\n    path_data: PathData = PathParams(),\n) -&gt; ...:\n</code></pre>"},{"location":"docs/server/request/parameters/path/#dataclassesdataclass","title":"dataclasses.dataclass","text":"<p><code>dataclasses.dataclass</code> is supported as a model type, but setting an <code>alias</code> using standard <code>dataclasses</code> tools is not possible.</p> <pre><code>from dataclasses import dataclass\nfrom rapidy.http import get, PathParams\n\n@dataclass\nclass PathData:\n    user_id: str\n    user_data: str\n\n@get('/{user_id}/{user_data}')\nasync def handler(\n    path_data: PathData = PathParams(),\n) -&gt; ...:\n</code></pre>"},{"location":"docs/server/request/parameters/path/#extraction-into-a-dictionary","title":"Extraction into a Dictionary","text":"<pre><code>from rapidy.http import get, PathParams\n\n@get('/{user_id}/{user_data}')\nasync def handler(\n    path_data: dict[str, str] = PathParams(),\n) -&gt; ...:\n# {'user_id': ..., 'user_data': ...}\n</code></pre>"},{"location":"docs/server/request/parameters/path/#extraction-without-validation","title":"Extraction Without Validation","text":"<p>Disabling validation is not recommended.</p> <p>If validation is disabled, parameters are returned in the base <code>aiohttp</code> structure:</p> <ul> <li><code>PathParam</code> \u2192 <code>str</code></li> <li><code>PathParams</code> \u2192 <code>dict[str, str]</code></li> </ul>"},{"location":"docs/server/request/parameters/path/#ways-to-disable-validation","title":"Ways to Disable Validation","text":""},{"location":"docs/server/request/parameters/path/#explicit-disabling","title":"Explicit Disabling","text":"<pre><code>from rapidy.http import get, PathParam, PathParams\n\n@get('/')\nasync def handler_1(\n    user_id: int = PathParam(validate=False)\n) -&gt; ...:\n    # ...\n\n@get('/')\nasync def handler_2(\n    path_data: int = PathParams(validate=False)\n) -&gt; ...:\n    # {'user_id': ..., 'user_data': ...}\n</code></pre>"},{"location":"docs/server/request/parameters/path/#using-any","title":"Using <code>Any</code>","text":"<pre><code>from typing import Any\n\n@get('/')\nasync def handler_1(\n    user_id: Any = PathParam()\n) -&gt; ...:\n    # \"0.0.0.0:8080\"\n\n@get('/')\nasync def handler_2(\n    path_data: Any = PathParams()\n) -&gt; ...:\n    # {'user_id': ..., 'user_data': ...}\n</code></pre>"},{"location":"docs/server/request/parameters/path/#no-type-annotation","title":"No Type Annotation","text":"<p>If the type is not specified, <code>Any</code> is used by default. <pre><code>@get('/')\nasync def handler_1(\n    user_id=PathParam()\n) -&gt; ...:\n    # ...\n\n@get('/')\nasync def handler_2(\n    path_data=PathParams()\n) -&gt; ...:\n    # {'user_id': ..., 'user_data': ...}\n</code></pre></p>"},{"location":"docs/server/request/parameters/path/#default-values","title":"Default Values","text":"<p><code>PathParam</code> and <code>PathParams</code> do not support default values.</p> <p>This is an intentional architectural limitation: without it, dynamic routing cannot be properly implemented.</p> <p>Attempting to set <code>default</code> or <code>default_factory</code> for a path parameter will raise a <code>ParameterCannotUseDefaultError</code> or <code>ParameterCannotUseDefaultFactoryError</code> exception.</p>"},{"location":"docs/server/request/parameters/path/#warnings-and-specifics","title":"Warnings and Specifics","text":""},{"location":"docs/server/request/parameters/path/#using-pathparam-and-pathparams-together","title":"Using <code>PathParam</code> and <code>PathParams</code> together","text":"<p>You cannot use <code>Header</code> and <code>Headers</code> in the same handler.</p> <pre><code>@get('/{user_id}/{user_data}')\nasync def handler(\n    user_id: str = PathParam(),\n    path_data: PathData = PathParams(),\n) -&gt; ...:\n</code></pre> <p>When the application starts, an <code>AnotherDataExtractionTypeAlreadyExistsError</code> exception will be raised.</p> <pre><code>------------------------------\nAttribute with this data extraction type cannot be added to the handler - another data extraction type is already used in the handler.\n\nHandler path: `main.py`\nHandler name: `handler`\nAttribute name: `path_data`\n------------------------------\n</code></pre>"},{"location":"docs/server/request/parameters/path/#the-alias-attribute-for-pathparams","title":"The <code>alias</code> Attribute for <code>PathParams</code>","text":"<p>The <code>alias</code> attribute does not work for <code>PathParams()</code>.</p> <pre><code>@get('/{user_id}/{user_data}')\nasync def handler(\n    path_data: PathData = PathParams(alias='SomeName'),  # &lt;-- alias not working\n) -&gt; ...:\n</code></pre>"},{"location":"docs/server/request/parameters/path/#how-raw-data-is-extracted","title":"How Raw Data is Extracted","text":"<p>In <code>Rapidy</code>, the <code>match_info</code> method of the <code>Request</code> object is used, after which the obtained data is passed to <code>pydantic</code> for validation.</p> <p>How Extraction Works Inside <code>Rapidy</code></p> <pre><code>async def extract_path(request: Request) -&gt; dict[str, str]:\n    return dict(request.match_info)\n</code></pre> <p><code>Rapidy</code> uses built-in <code>aiohttp</code> mechanisms.</p> <p>For more information about the <code>aiohttp.Request</code> object and data extraction methods, see here.</p>"},{"location":"docs/server/request/parameters/query/","title":"Query Parameters","text":"<p>This section explains how to extract and validate query parameters using <code>Rapidy</code>.</p> <p>Remember, you can validate data using any type supported by <code>pydantic</code>.</p>"},{"location":"docs/server/request/parameters/query/#description","title":"Description","text":"<p>Query parameters are key-value pairs that appear after the ? in a URL, separated by &amp;.</p> <p>Example of a URL with a query string containing three parameters.</p> <p>https://www.rapidy.com/search?query=database+tools&amp;star_rating=4&amp;order=alphabetical</p>"},{"location":"docs/server/request/parameters/query/#extracting-a-single-queryparam","title":"Extracting a Single QueryParam","text":"<p><code>QueryParam</code> extracts a single query parameter by its name.</p> <p><pre><code>from rapidy.http import get, QueryParam\n\n@get('/')\nasync def handler(\n    query: str = QueryParam(),\n) -&gt; ...:\n</code></pre> <pre><code>from rapidy.http import get, QueryParam\n\n@get('/')\nasync def handler(\n    query: str = QueryParam(),\n    star_rating: str = QueryParam(),\n) -&gt; ...:\n</code></pre></p>"},{"location":"docs/server/request/parameters/query/#extracting-all-queryparams","title":"Extracting All QueryParams","text":"<p><code>QueryParams</code> extracts all query parameters at once.</p> <p>You can validate the data using any type supported by <code>pydantic</code>.</p>"},{"location":"docs/server/request/parameters/query/#extracting-into-a-predefined-schema","title":"Extracting into a Predefined Schema","text":""},{"location":"docs/server/request/parameters/query/#pydanticbasemodel","title":"pydantic.BaseModel","text":"<pre><code>from pydantic import BaseModel\nfrom rapidy.http import get, QueryParams\n\nclass QueryParamsData(BaseModel):\n    query: str\n    star_rating: str\n\n@get('/')\nasync def handler(\n    query_params_data: QueryParamsData = QueryParams(),\n) -&gt; ...:\n</code></pre>"},{"location":"docs/server/request/parameters/query/#dataclassesdataclass","title":"dataclasses.dataclass","text":"<p><code>dataclasses.dataclass</code> is supported as a model type, but you cannot set an <code>alias</code> using standard <code>dataclasses</code> tools.</p> <pre><code>from dataclasses import dataclass\nfrom rapidy.http import get, QueryParams\n\n@dataclass\nclass QueryParamsData:\n    query: str\n    star_rating: str\n\n@get('/')\nasync def handler(\n    query_params_data: QueryParamsData = QueryParams(),\n) -&gt; ...:\n</code></pre>"},{"location":"docs/server/request/parameters/query/#extracting-into-a-dictionary","title":"Extracting into a Dictionary","text":"<pre><code>from rapidy.http import get, QueryParams\n\n@get('/')\nasync def handler(\n    query_params_data: dict[str, str] = QueryParams(),\n) -&gt; ...:\n# {'query': ..., 'star_rating': ...}\n</code></pre>"},{"location":"docs/server/request/parameters/query/#extraction-without-validation","title":"Extraction Without Validation","text":"<p>Disabling validation is not recommended.</p> <p>If validation is disabled, parameters will be returned in the base <code>aiohttp</code> structure:</p> <ul> <li><code>QueryParam</code> \u2192 <code>str</code></li> <li><code>QueryParams</code> \u2192 <code>MultiDictProxy[str]</code></li> </ul>"},{"location":"docs/server/request/parameters/query/#ways-to-disable-validation","title":"Ways to Disable Validation","text":""},{"location":"docs/server/request/parameters/query/#explicit-disabling","title":"Explicit Disabling","text":"<pre><code>from rapidy.http import get, QueryParam, QueryParams\n\n@get('/')\nasync def handler_1(\n    query: int = QueryParam(validate=False)\n) -&gt; ...:\n    # ...\n\n@get('/')\nasync def handler_2(\n    query_params_data: int = QueryParams(validate=False)\n) -&gt; ...:\n    # &lt;MultiDictProxy('query': ..., 'star_rating', ...)&gt;\n</code></pre>"},{"location":"docs/server/request/parameters/query/#using-any","title":"Using <code>Any</code>","text":"<pre><code>from typing import Any\n\n@get('/')\nasync def handler_1(\n    query: Any = QueryParam(),\n) -&gt; ...:\n    # ...\n\n@get('/')\nasync def handler_2(\n    query_params_data: Any = QueryParams(),\n) -&gt; ...:\n    # &lt;MultiDictProxy('query': ..., 'star_rating', ...)&gt;\n</code></pre>"},{"location":"docs/server/request/parameters/query/#no-type-annotation","title":"No Type Annotation","text":"<p>If the type is not specified, it defaults to <code>Any</code>. <pre><code>@get('/')\nasync def handler_1(\n    query=QueryParam(),\n) -&gt; ...:\n    # ...\n\n@get('/')\nasync def handler_2(\n    query_params_data=QueryParams(),\n) -&gt; ...:\n    # &lt;MultiDictProxy('query': ..., 'star_rating', ...)&gt;\n</code></pre></p>"},{"location":"docs/server/request/parameters/query/#default-values","title":"Default Values","text":"<p>The default value for <code>QueryParam</code> is used if the incoming request does not contain the specified query parameter.</p> <p>The default value for <code>QueryParams</code> is used if the request does not contain any query parameters.</p>"},{"location":"docs/server/request/parameters/query/#using-default","title":"Using <code>default</code>","text":"<p><pre><code>@get('/')\nasync def handler(\n    some_query_param: str = QueryParam(default='SomeValue'),\n) -&gt; None:\n</code></pre> <pre><code>from typing import Annotated\n\n@get('/')\nasync def handler(\n    some_query_param: Annotated[str, QueryParam(default='SomeValue')],\n) -&gt; None:\n</code></pre> <pre><code>from typing import Annotated\n\n@get('/')\nasync def handler(\n    some_query_param: Annotated[str, QueryParam()] = 'SomeValue',\n) -&gt; None:\n</code></pre></p>"},{"location":"docs/server/request/parameters/query/#using-default_factory","title":"Using <code>default_factory</code>","text":"<p><pre><code>@get('/')\nasync def handler(\n    some_query_param: str = QueryParam(default_factory=lambda: 'SomeValue'),\n) -&gt; None:\n</code></pre> <pre><code>from typing import Annotated\n\n@get('/')\nasync def handler(\n    some_query_param: Annotated[str, QueryParam(default_factory=lambda:'SomeValue')],\n) -&gt; None:\n</code></pre></p> <p>You cannot use both <code>default</code> and <code>default_factory</code> at the same time.</p> <p>Attempting to set both will raise a <code>pydantic</code> exception: <pre><code>TypeError('cannot specify both default and default_factory')\n</code></pre></p>"},{"location":"docs/server/request/parameters/query/#warnings-and-specifics","title":"Warnings and Specifics","text":""},{"location":"docs/server/request/parameters/query/#using-queryparam-and-queryparams-together","title":"Using <code>QueryParam</code> and <code>QueryParams</code> Together","text":"<p>You cannot use <code>QueryParam</code> and <code>QueryParams</code> together in the same handler.</p> <pre><code>@get('/')\nasync def handler(\n    query: str = QueryParam(),\n    query_params_data: QueryParamsData = QueryParams(),\n) -&gt; ...:\n</code></pre> <p>When the application starts, an <code>AnotherDataExtractionTypeAlreadyExistsError</code> exception will be raised.</p> <pre><code>------------------------------\nAttribute with this data extraction type cannot be added to the handler - another data extraction type is already used in the handler.\n\nHandler path: `main.py`\nHandler name: `handler`\nAttribute name: `headers_data`\n------------------------------\n</code></pre>"},{"location":"docs/server/request/parameters/query/#the-alias-attribute-in-headers","title":"The <code>alias</code> Attribute in <code>Headers</code>","text":"<p>The <code>alias</code> attribute does not work in <code>QueryParams()</code>.</p> <pre><code>@get('/')\nasync def handler(\n    query_params_data: QueryParamsData = QueryParams(alias='SomeName'),  # &lt;-- alias not working\n) -&gt; ...:\n</code></pre>"},{"location":"docs/server/request/parameters/query/#how-raw-data-is-extracted","title":"How Raw Data is Extracted","text":"<p><code>Rapidy</code> uses the <code>rel_url.query</code> method of the <code>Request</code> object and then passes the retrieved data to a <code>pydantic</code> model for validation.</p> <p>How Extraction Works Inside <code>Rapidy</code></p> <pre><code>async def extract_query(request: Request) -&gt; MultiDictProxy[str]:\n    return request.rel_url.query\n</code></pre> <p><code>Rapidy</code> uses built-in <code>aiohttp</code> mechanisms.</p> <p>For more details on the <code>aiohttp.Request</code> object and data extraction methods, see here.</p>"},{"location":"docs/server/request/parameters/body/","title":"Body","text":"<p>This section will demonstrate how to extract and validate the <code>body</code> using <code>Rapidy</code>.</p>"},{"location":"docs/server/request/parameters/body/#description","title":"Description","text":"<p>The HTTP request body is the part of the request that transmits data from the client to the server. It plays a key role in the <code>POST</code>, <code>PUT</code>, and <code>PATCH</code> methods, which are used to create, update, and modify resources.</p> <p>For example, in a <code>POST</code> request to create a user account, the user data is sent in the request body.</p> <pre><code>from pydantic import BaseModel\nfrom rapidy.http import post, Body\n\nclass UserData(BaseModel):\n    username: str\n    password: str\n\n@post('/')\nasync def handler(\n    user_data: UserData = Body(),\n) -&gt; ...:\n</code></pre>"},{"location":"docs/server/request/parameters/body/#body-attributes","title":"Body Attributes","text":""},{"location":"docs/server/request/parameters/body/#content_type","title":"<code>content_type</code>","text":"<p><pre><code># `application/json` by default\ncontent_type: str | ContentType = ContentType.json\n</code></pre> Defines the expected data type in the <code>body</code> that the server accepts.</p> <p>More details about <code>enum ContentType</code> can be found here.</p> <p><code>Rapidy</code> uses the specified <code>content_type</code> to extract data correctly.</p> <p>Supported content types:</p> <ul> <li><code>application/json</code></li> <li><code>application/x-www-form-urlencoded</code></li> <li><code>multipart/form-data</code></li> <li><code>text/*</code> \u2014 any MIME type for textual data</li> <li><code>application/octet-stream</code></li> </ul> <p>If the server expects a format that <code>Rapidy</code> does not explicitly support (e.g., <code>video/mpeg</code>), the data will be extracted as <code>bytes</code> and passed to the <code>pydantic</code> model without processing.</p>"},{"location":"docs/server/request/parameters/body/#check_content_type","title":"<code>check_content_type</code>","text":"<p>Determines whether the <code>Content-Type</code> header should be validated.</p> <ul> <li>When <code>True</code> (default value), <code>Rapidy</code> will compare the received <code>Content-Type</code> header with the expected <code>content_type</code>.   If they do not match, an error will be returned to the client:</li> </ul> <pre><code>{\n    \"errors\": [\n        {\n            \"type\": \"ExtractError\",\n            \"loc\": [\n                \"body\"\n            ],\n            \"msg\": \"Failed to extract body data: Expected Content-Type `text/plain`, got `&lt;current_request_content_type&gt;`\"\n        }\n    ]\n}\n</code></pre>"},{"location":"docs/server/request/parameters/body/#json_decoder","title":"<code>json_decoder</code>","text":"<p>Allows specifying a custom <code>json_decoder</code> for processing JSON data in the request body.</p> <p>Works only when <code>content_type=\"application/json\"</code>.</p> <p>By default, <code>Rapidy</code> uses <code>json.loads</code> without parameters.</p> <p>Equivalent examples:</p> <p><pre><code>from rapidy.http import post, Body\n\n@post('/')\nasync def handler(\n    data: str = Body(),\n) -&gt; ...:\n</code></pre> or <pre><code>import json\nfrom rapidy.http import post, Body\n\n@post('/')\nasync def handler(\n    data: str = Body(json_decoder=json.loads),\n) -&gt; ...:\n</code></pre></p> <p>To customize JSON decoding, pass any callable object that accepts a <code>str</code> to <code>json_decoder</code>.</p> <p>Expected data type: <code>Callable[[str], Any]</code>.</p> <p>Example with a custom decoder:</p> <pre><code>from typing import Any\nfrom rapidy.http import post, Body\n\ndef custom_json_decoder(data: str) -&gt; ...:\n    ...\n\n@post('/')\nasync def handler(\n    data: Any = Body(json_decoder=custom_json_decoder),\n) -&gt; ...:\n</code></pre> <p>To use <code>json.loads</code> with parameters or a decoder with arguments, use <code>functools.partial</code>:</p> <pre><code>import json\nfrom functools import partial\nfrom typing import Any, OrderedDict\nfrom rapidy.http import post, Body\n\ndecoder = partial(json.loads, object_pairs_hook=OrderedDict)\n\n@post('/')\nasync def handler(\n    data: Any = Body(json_decoder=decoder),\n) -&gt; ...:\n</code></pre>"},{"location":"docs/server/request/parameters/body/#extraction-without-validation","title":"Extraction Without Validation","text":"<p>Most <code>Body</code> types support data extraction without validation.</p> <p>Disabling validation is not recommended.</p> <p>If validation is disabled, the parameter will contain the base <code>aiohttp</code> structure:</p> <p>More details can be found in the Extraction Without Validation section for each <code>body</code> type.</p>"},{"location":"docs/server/request/parameters/body/#ways-to-disable-validation","title":"Ways to Disable Validation:","text":""},{"location":"docs/server/request/parameters/body/#explicit-disabling","title":"Explicit Disabling","text":"<pre><code>from pydantic import BaseModel\nfrom rapidy.http import post, Body\n\nclass BodyData(BaseModel):\n    ...\n\n@post('/')\nasync def handler(\n    data: BodyData = Body(validate=False),\n) -&gt; ...:\n</code></pre>"},{"location":"docs/server/request/parameters/body/#using-any","title":"Using <code>Any</code>","text":"<pre><code>@post('/')\nasync def handler(\n    data: Any = Body(),\n) -&gt; ...:\n</code></pre>"},{"location":"docs/server/request/parameters/body/#no-type-annotation","title":"No Type Annotation","text":"<p>If no type is specified, <code>Any</code> will be used by default. <pre><code>@post('/')\nasync def handler(\n    data=Body(),\n) -&gt; ...:\n</code></pre></p>"},{"location":"docs/server/request/parameters/body/#default-values","title":"Default Values","text":"<p>Most <code>Body</code> types support default values.</p> <p>If an HTTP request does not contain a body, the parameter will receive the specified default value (if set).</p>"},{"location":"docs/server/request/parameters/body/#usage-examples","title":"Usage Examples","text":""},{"location":"docs/server/request/parameters/body/#default-value-specified","title":"Default Value Specified","text":"<pre><code>from pydantic import BaseModel\nfrom rapidy.http import post, Body\n\nclass BodyData(BaseModel):\n    ...\n\n@post('/')\nasync def handler(\n    data: BodyData = Body('some_data'),\n    # or\n    data: BodyData = Body(default_factory=lambda: 'some_data'),\n) -&gt; ...:\n</code></pre>"},{"location":"docs/server/request/parameters/body/#optional-request-body","title":"Optional Request Body","text":"<pre><code>from pydantic import BaseModel\nfrom rapidy.http import post, Body\n\nclass BodyData(BaseModel):\n    ...\n\n@post('/')\nasync def handler(\n    data: BodyData | None = Body(),\n    # or\n    data: Optional[BodyData] = Body(),\n    # or\n    data: Union[BodyData, None] = Body(),\n) -&gt; ...:\n</code></pre> <p>More details can be found in the Default Values section for each <code>body</code> type.</p>"},{"location":"docs/server/request/parameters/body/binary/","title":"Binary","text":"<p>Reading the request body as a byte sequence.</p>"},{"location":"docs/server/request/parameters/body/binary/#description","title":"Description","text":"<p>Binary (MIME-type: <code>application/octet-stream</code>) \u2014 a binary data type.</p> <p><code>Rapidy</code> allows extracting any data with <code>content_type</code> as a sequence of bytes.</p> <p>Simply annotate it as <code>bytes</code> or <code>StreamReader</code>.</p> <p>Why is this useful?</p> <p>This is useful when you need to explicitly restrict the type of received data and then process it in binary format.</p> <p>There are only two data types that can be extracted regardless of <code>content_type</code>: <code>bytes</code> and <code>StreamReader</code>.</p>"},{"location":"docs/server/request/parameters/body/binary/#bytes","title":"bytes","text":"<pre><code>from rapidy.http import post, Body, ContentType\n\n@post('/')\nasync def handler(\n    user_data: bytes = Body(),\n    # or use any content_type\n    user_data: bytes = Body(content_type=ContentType.stream),\n    # also you can use pydantic validation\n    user_data: bytes = Body(min_length=1),\n) -&gt; ...:\n</code></pre>"},{"location":"docs/server/request/parameters/body/binary/#streamreader","title":"StreamReader","text":"<p>You can learn more about the <code>StreamReader</code> object here.</p> <pre><code>from rapidy import StreamReader\nfrom rapidy.http import post, Body\n\n@post('/')\nasync def handler(\n    user_data: StreamReader = Body(),\n) -&gt; ...:\n</code></pre>"},{"location":"docs/server/request/parameters/body/binary/#extraction-without-validation","title":"Extraction without validation","text":"<p>Disabling validation is not recommended.</p> <p>If validation is disabled, the parameter will contain the base <code>aiohttp</code> structure:</p> <ul> <li><code>Body(content_type=ContentType.text_plain)</code> \u2192 <code>bytes</code></li> </ul> <p><code>pydantic</code> validation does not work for <code>StreamReader</code>.</p>"},{"location":"docs/server/request/parameters/body/binary/#ways-to-disable-validation","title":"Ways to disable validation","text":""},{"location":"docs/server/request/parameters/body/binary/#explicit-disabling","title":"Explicit Disabling","text":"<pre><code>@post('/')\nasync def handler(\n    data: SomeBytesType = Body(validate=False, content_type=ContentType.stream),\n) -&gt; ...:\n</code></pre>"},{"location":"docs/server/request/parameters/body/binary/#using-any","title":"Using <code>Any</code>","text":"<pre><code>@post('/')\nasync def handler(\n    data: Any = Body(content_type=ContentType.stream),\n) -&gt; ...:\n</code></pre>"},{"location":"docs/server/request/parameters/body/binary/#no-type-annotation","title":"No Type Annotation","text":"<p>If no type is specified, <code>Any</code> will be set by default. <pre><code>@post('/')\nasync def handler(\n    data=Body(content_type=ContentType.stream),\n) -&gt; ...:\n</code></pre></p>"},{"location":"docs/server/request/parameters/body/binary/#default-values","title":"Default values","text":"<p>If the HTTP request body is not provided, a default value (if set) will be used.</p>"},{"location":"docs/server/request/parameters/body/binary/#usage-examples","title":"Usage Examples","text":""},{"location":"docs/server/request/parameters/body/binary/#default-value-specified","title":"Default Value Specified","text":"<pre><code>@post('/')\nasync def handler(\n    data: bytes = Body(b'some_bytes', content_type=ContentType.stream),\n    # or\n    data: bytes = Body(default_factory=lambda: b'some_bytes', content_type=ContentType.stream),\n) -&gt; ...:\n</code></pre>"},{"location":"docs/server/request/parameters/body/binary/#optional-request-body","title":"Optional Request Body","text":"<pre><code>@post('/')\nasync def handler(\n    data: bytes | None = Body(content_type=ContentType.stream),\n    # or\n    data: Optional[bytes] = Body(content_type=ContentType.stream),\n    # or\n    data: Union[bytes, None] = Body(content_type=ContentType.stream),\n) -&gt; ...:\n</code></pre> A default value cannot be set for <code>StreamReader</code>. <p>Attempting to set a default value for <code>StreamReader</code> using <code>default</code> or <code>default_factory</code> will raise a <code>ParameterCannotUseDefaultError</code>. <pre><code>from rapidy import StreamReader\nfrom rapidy.http import post, Body\n\n@post('/')\nasync def handler(\n    user_data: StreamReader = Body(default='SomeDefault'),\n) -&gt; ...:\n</code></pre> <pre><code>------------------------------\nHandler attribute with Type `Body` cannot have a default value.\n\nHandler path: `&lt;full_path&gt;/main.py`\nHandler name: `handler`\nAttribute name: `data`\n------------------------------\n</code></pre></p>"},{"location":"docs/server/request/parameters/body/binary/#how-raw-data-is-extracted","title":"How raw data is extracted","text":"<p><code>Rapidy</code> uses built-in <code>aiohttp</code> data extraction mechanisms.</p> <p>You can learn more about the <code>aiohttp.Request</code> object and its data extraction methods here.</p>"},{"location":"docs/server/request/parameters/body/binary/#bytes_1","title":"bytes","text":"<p><code>Rapidy</code> calls the <code>read</code> method on the <code>Request</code> object and then passes the retrieved data to <code>pydantic</code> for validation.</p> <p>How data extraction works in <code>Rapidy</code></p> <pre><code>async def extract_body_bytes(request: Request) -&gt; Optional[bytes]:\n    if not request.body_exists:\n        return None\n\n    return await request.read()\n</code></pre>"},{"location":"docs/server/request/parameters/body/binary/#streamreader_1","title":"StreamReader","text":"<p><code>Rapidy</code> accesses the <code>content</code> attribute of the <code>Request</code> object and passes it directly to the request handler, bypassing <code>pydantic</code> validation.</p> <p>How data extraction works in <code>Rapidy</code></p> <pre><code>async def extract_body_stream(request: Request) -&gt; Optional[StreamReader]:\n    if not request.body_exists:\n        return None\n\n    return request.content\n</code></pre>"},{"location":"docs/server/request/parameters/body/json/","title":"JSON","text":"<p>Reading the request body as <code>JSON</code>.</p>"},{"location":"docs/server/request/parameters/body/json/#description","title":"Description","text":"<p>JSON (JavaScript Object Notation) (MIME-type: <code>application/json</code>) is a text-based format for exchanging structured data, based on JavaScript. Today, JSON is language-independent and is used in various programming languages.</p> <p>This section will show how to extract <code>JSON</code> from the request body and validate it using <code>Rapidy</code>.</p>"},{"location":"docs/server/request/parameters/body/json/#data-types-in-json","title":"Data Types in JSON","text":""},{"location":"docs/server/request/parameters/body/json/#object","title":"Object","text":"<p>An unordered set of key-value pairs. <pre><code>{\n    \"username\": \"User\",\n    \"password\": \"myAwesomePass\"\n}\n</code></pre> <pre><code>from pydantic import BaseModel\nfrom rapidy.http import post, Body, ContentType\n\nclass UserData(BaseModel):\n    username: str\n    password: str\n\n@post('/')\nasync def handler(\n    user_data: UserData = Body(),\n    # or\n    user_data: UserData = Body(content_type=ContentType.json),\n    # or\n    user_data: UserData = Body(content_type='application/json'),\n) -&gt; ...:\n</code></pre></p> Sending with <code>curl</code> <pre><code>curl -X POST \\\n-H \"Content-Type: application/json\" \\\n-d '{\"username\": \"User\", \"password\": \"myAwesomePass\"}' \\\nhttp://127.0.0.1:8080\n</code></pre>"},{"location":"docs/server/request/parameters/body/json/#array","title":"Array","text":"<p><pre><code>[\n    {\"username\": \"User1\", \"password\": \"myAwesomePass1\"},\n    {\"username\": \"User2\", \"password\": \"myAwesomePass2\"}\n]\n</code></pre> <pre><code>from pydantic import BaseModel\nfrom rapidy.http import post, Body\n\nclass UserData(BaseModel):\n    username: str\n    password: str\n\n@post('/')\nasync def handler(\n    users: list[UserData] = Body(),\n) -&gt; ...:\n</code></pre></p> Sending with <code>curl</code> <pre><code>curl -X POST \\\n-H \"Content-Type: application/json\" \\\n-d '[{\"username\": \"user1\", \"password\": \"password1\"}, {\"username\": \"user2\", \"password\": \"password2\"}]' \\\nhttp://127.0.0.1:8080\n</code></pre>"},{"location":"docs/server/request/parameters/body/json/#number","title":"Number","text":"<p>An integer or floating-point value. <pre><code>111\n</code></pre> <pre><code>from rapidy.http import post, Body\n\n@post('/')\nasync def handler(\n    int_data: int = Body(),\n) -&gt; ...:\n</code></pre></p> Sending with <code>curl</code> <pre><code>curl -X POST \\\n-H \"Content-Type: application/json\" \\\n-d '\"111\"' \\\nhttp://127.0.0.1:8080\n</code></pre> <p>When sending a string in JSON format, additional escaping is required: <code>\"111\"</code></p>"},{"location":"docs/server/request/parameters/body/json/#literals","title":"Literals","text":"<p><code>true</code> (boolean true), <code>false</code> (boolean false), and <code>null</code> (absence of a value). <pre><code>true\nfalse\nnull\n</code></pre> <pre><code>from rapidy.http import post, Body\n\n@post('/')\nasync def handler(\n    bool_data: bool = Body(),\n) -&gt; ...:\n</code></pre></p> Sending with <code>curl</code> <p><pre><code>curl -X POST \\\n-H \"Content-Type: application/json\" \\\n-d 'true' \\\nhttp://127.0.0.1:8080\n</code></pre> <pre><code>curl -X POST \\\n-H \"Content-Type: application/json\" \\\n-d 'false' \\\nhttp://127.0.0.1:8080\n</code></pre> <pre><code>curl -X POST \\\n-H \"Content-Type: application/json\" \\\n-d 'null' \\\nhttp://127.0.0.1:8080\n</code></pre></p>"},{"location":"docs/server/request/parameters/body/json/#string","title":"String","text":"<p><pre><code>\"SomeString\"\n</code></pre> <pre><code>from rapidy.http import post, Body\n\n@post('/')\nasync def handler(\n    string_data: str = Body(),\n) -&gt; ...:\n</code></pre></p> Sending with <code>curl</code> <pre><code>curl -X POST \\\n-H \"Content-Type: application/json\" \\\n-d '\"SomeString\"' \\\nhttp://127.0.0.1:8080\n</code></pre> <p>When sending a string in JSON format, escaping is required: <code>\\\"SomeString\\\"</code></p>"},{"location":"docs/server/request/parameters/body/json/#custom-json-decoder","title":"Custom JSON Decoder","text":"<p>By default, <code>Rapidy</code> uses <code>json.loads</code> without parameters to decode incoming JSON.</p> <p>Equivalent examples:</p> <p><pre><code>from rapidy.http import post, Body\n\n@post('/')\nasync def handler(\n    data: str = Body(),\n) -&gt; ...:\n</code></pre> or <pre><code>import json\nfrom rapidy.http import post, Body\n\n@post('/')\nasync def handler(\n    data: str = Body(json_decoder=json.loads),\n) -&gt; ...:\n</code></pre></p> <p>To use a custom decoder, pass a callable object that takes a <code>str</code> as the <code>json_decoder</code> parameter.</p> <p>Expected type: <code>Callable[[str], Any]</code></p> <p>Example with a custom decoder:</p> <pre><code>from typing import Any\nfrom rapidy.http import post, Body\n\ndef custom_json_decoder(data: str) -&gt; ...:\n    ...\n\n@post('/')\nasync def handler(\n    data: Any = Body(json_decoder=custom_json_decoder),\n) -&gt; ...:\n</code></pre> <p>If you need to use <code>json.loads</code> with parameters, use <code>functools.partial</code>: <pre><code>import json\nfrom functools import partial\nfrom typing import Any, OrderedDict\nfrom rapidy.http import post, Body\n\ndecoder = partial(json.loads, object_pairs_hook=OrderedDict)\n\n@post('/')\nasync def handler(\n    data: Any = Body(json_decoder=decoder),\n) -&gt; ...:\n</code></pre></p>"},{"location":"docs/server/request/parameters/body/json/#extraction-without-validation","title":"Extraction Without Validation","text":"<p>Disabling validation is not recommended.</p> <p>If validation is disabled, the parameter will contain data in the form it was unpacked by the JSON decoder.</p>"},{"location":"docs/server/request/parameters/body/json/#ways-to-disable-validation","title":"Ways to Disable Validation","text":""},{"location":"docs/server/request/parameters/body/json/#explicit-disabling","title":"Explicit Disabling","text":"<pre><code>from pydantic import BaseModel\nfrom rapidy.http import post, Body\n\nclass BodyData(BaseModel):\n    ...\n\n@post('/')\nasync def handler(\n    data: BodyData = Body(validate=False),\n) -&gt; ...:\n</code></pre>"},{"location":"docs/server/request/parameters/body/json/#using-any","title":"Using <code>Any</code>","text":"<pre><code>@post('/')\nasync def handler(\n    data: Any = Body(),\n) -&gt; ...:\n</code></pre>"},{"location":"docs/server/request/parameters/body/json/#no-type-annotation","title":"No Type Annotation","text":"<p>If no type is specified, <code>Any</code> will be set by default. <pre><code>@post('/')\nasync def handler(\n    data=Body(),\n) -&gt; ...:\n</code></pre></p>"},{"location":"docs/server/request/parameters/body/json/#default-values","title":"Default Values","text":"<p>If an HTTP request does not contain a body, the parameter will receive the specified default value (if set).</p>"},{"location":"docs/server/request/parameters/body/json/#usage-examples","title":"Usage Examples","text":""},{"location":"docs/server/request/parameters/body/json/#default-value-specified","title":"Default Value Specified","text":"<pre><code>from pydantic import BaseModel\nfrom rapidy.http import post, Body\n\nclass BodyData(BaseModel):\n    ...\n\n@post('/')\nasync def handler(\n    data: BodyData = Body('some_data'),\n    # or\n    data: BodyData = Body(default_factory=lambda: 'some_data'),\n) -&gt; ...:\n</code></pre>"},{"location":"docs/server/request/parameters/body/json/#optional-request-body","title":"Optional Request Body","text":"<pre><code>from pydantic import BaseModel\nfrom rapidy.http import post, Body\n\nclass BodyData(BaseModel):\n    ...\n\n@post('/')\nasync def handler(\n    data: BodyData | None = Body(),\n    # or\n    data: Optional[BodyData] = Body(),\n    # or\n    data: Union[BodyData, None] = Body(),\n) -&gt; ...:\n</code></pre>"},{"location":"docs/server/request/parameters/body/json/#extracting-raw-data","title":"Extracting Raw Data","text":"<p><code>Rapidy</code> uses the <code>json</code> method of the <code>Request</code> object to obtain data and passes it to <code>Pydantic</code> for validation.</p> <p>If the data cannot be extracted as JSON, an <code>ExtractError</code> will be returned: <pre><code>{\n    \"errors\": [\n        {\n            \"type\": \"ExtractError\",\n            \"loc\": [\n                \"body\"\n            ],\n            \"msg\": \"Failed to extract body data as Json: &lt;error_description&gt;\"\n        }\n    ]\n}\n</code></pre></p> <p>How data extraction works in <code>Rapidy</code></p> <pre><code>async def extract_body_json(request: Request, body_field_info: Body) -&gt; Optional[DictStrAny]:\n    if not request.body_exists:\n        return None\n\n    return await request.json(loads=body_field_info.json_decoder)\n</code></pre> <p><code>Rapidy</code> uses built-in <code>aiohttp</code> mechanisms for data extraction.</p> <p>More details about the <code>aiohttp.Request</code> object and methods for extracting data from it can be found here.</p> <p>If a parameter is annotated as <code>bytes</code> or <code>StreamReader</code>, data is extracted differently.</p> <p>More details about the <code>StreamReader</code> object can be found here.</p>"},{"location":"docs/server/request/parameters/body/json/#bytes","title":"<code>bytes</code>","text":"<pre><code>from rapidy.http import post, Body\n\n@post('/')\nasync def handler(\n    user_data: bytes = Body(),\n    # also you can use pydantic validation\n    user_data: bytes = Body(min_length=1),\n) -&gt; ...:\n</code></pre> <code>Rapidy</code> Internal Code <pre><code>async def extract_body_bytes(request: Request) -&gt; Optional[bytes]:\n    if not request.body_exists:\n        return None\n\n    return await request.read()\n</code></pre>"},{"location":"docs/server/request/parameters/body/json/#streamreader","title":"<code>StreamReader</code>","text":"<pre><code>from rapidy import StreamReader\nfrom rapidy.http import post, Body\n\n@post('/')\nasync def handler(\n    user_data: StreamReader = Body(),\n) -&gt; ...:\n</code></pre> <code>Rapidy</code> Internal Code <pre><code>async def extract_body_stream(request: Request) -&gt; Optional[StreamReader]:\n    if not request.body_exists:\n        return None\n\n    return request.content\n</code></pre> <p>Validation with <code>Pydantic</code> is not supported for <code>StreamReader</code>.</p> A default value cannot be set for <code>StreamReader</code>. <p>If you attempt to set a default value for <code>Body</code> with a <code>StreamReader</code> annotation using <code>default</code> or <code>default_factory</code>, a <code>ParameterCannotUseDefaultError</code> will be raised. <pre><code>from rapidy import StreamReader\nfrom rapidy.http import post, Body\n\n@post('/')\nasync def handler(\n    user_data: StreamReader = Body(default='SomeDefault'),\n) -&gt; ...:\n</code></pre> <pre><code>------------------------------\nHandler attribute with Type `Body` cannot have a default value.\n\nHandler path: `&lt;full_path&gt;/main.py`\nHandler name: `handler`\nAttribute name: `data`\n------------------------------\n</code></pre></p>"},{"location":"docs/server/request/parameters/body/multipart/","title":"Multipart Form Data","text":"<p>Reading the request body as <code>multipart/form-data</code>.</p>"},{"location":"docs/server/request/parameters/body/multipart/#description","title":"Description","text":"<p>Form Data (MIME-type: <code>multipart/form-data</code>) is one of the most commonly used content types for sending binary data to a server.</p> <p>The multipart format means that data is sent to the server in separate parts. Each part can have its own content type, filename, and data. Data is separated using a boundary string.</p> <pre><code>from pydantic import BaseModel, ConfigDict\nfrom rapidy.http import post, Body, ContentType, FileField\n\nclass UserData(BaseModel):\n    model_config = ConfigDict(arbitrary_types_allowed=True)\n\n    username: str\n    password: str\n    image: FileField\n\n@post('/')\nasync def handler(\n    user_data: UserData = Body(content_type=ContentType.m_part_form_data),\n    # or\n    user_data: UserData = Body(content_type='multipart/form-data'),\n) -&gt; ...:\n</code></pre> <p>Data Example</p> <pre><code>POST /  HTTP/1.1\nHost: localhost:8080\nContent-Type: multipart/form-data; boundary=---WD9146A\nContent-Length: ...\n\n---WD9146A\nContent-Disposition: form-data; name=\"username\"\n\nUser\n---WD9146A\nContent-Disposition: form-data; name=\"password\"\n\nmyAwesomePass\n---WD9146A\nContent-Disposition: form-data; name=\"image\"; filename=\"image.png\";\nContent-Type: image/png\n\n&lt;... binary data ...&gt;\n---WD9146A\n</code></pre> Sending with <code>curl</code> <pre><code>curl -X POST \\\n-H \"Content-Type: multipart/form-data\" \\\n-F username=User \\\n-F password=myAwesomePass \\\nhttp://127.0.0.1:8080\n</code></pre>"},{"location":"docs/server/request/parameters/body/multipart/#extraction-without-validation","title":"Extraction Without Validation","text":"<p>Disabling validation is not recommended.</p> <p>If validation is disabled, the parameter will contain the base <code>aiohttp</code> structure:</p> <ul> <li><code>Body(content_type=ContentType.m_part_form_data) \u2192 MultiDictProxy[Union[str, bytes, FileField]]</code></li> </ul>"},{"location":"docs/server/request/parameters/body/multipart/#ways-to-disable-validation","title":"Ways to Disable Validation","text":""},{"location":"docs/server/request/parameters/body/multipart/#explicit-disabling","title":"Explicit Disabling","text":"<pre><code>from pydantic import BaseModel\nfrom rapidy.http import post, Body, ContentType\n\nclass BodyData(BaseModel):\n    ...\n\n@post('/')\nasync def handler(\n    data: BodyData = Body(validate=False, content_type=ContentType.m_part_form_data),\n) -&gt; ...:\n</code></pre>"},{"location":"docs/server/request/parameters/body/multipart/#using-any","title":"Using <code>Any</code>","text":"<pre><code>@post('/')\nasync def handler(\n    data: Any = Body(content_type=ContentType.m_part_form_data),\n) -&gt; ...:\n</code></pre>"},{"location":"docs/server/request/parameters/body/multipart/#no-type-annotation","title":"No Type Annotation","text":"<p>If no type is specified, <code>Any</code> will be set by default. <pre><code>@post('/')\nasync def handler(\n    data=Body(content_type=ContentType.m_part_form_data),\n) -&gt; ...:\n</code></pre></p>"},{"location":"docs/server/request/parameters/body/multipart/#default-values","title":"Default Values","text":"<p>If an HTTP request does not contain a body, the parameter will receive the specified default value (if set).</p>"},{"location":"docs/server/request/parameters/body/multipart/#usage-examples","title":"Usage Examples","text":""},{"location":"docs/server/request/parameters/body/multipart/#default-value-specified","title":"Default Value Specified","text":"<pre><code>from pydantic import BaseModel\nfrom rapidy.http import post, Body, ContentType\n\nclass BodyData(BaseModel):\n    ...\n\n@post('/')\nasync def handler(\n    data: BodyData = Body('some_data', content_type=ContentType.m_part_form_data),\n    # or\n    data: BodyData = Body(default_factory=lambda: 'some_data', content_type=ContentType.m_part_form_data),\n) -&gt; ...:\n</code></pre>"},{"location":"docs/server/request/parameters/body/multipart/#optional-request-body","title":"Optional Request Body","text":"<pre><code>from pydantic import BaseModel\nfrom rapidy.http import post, Body, ContentType\n\nclass BodyData(BaseModel):\n    ...\n\n@post('/')\nasync def handler(\n    data: BodyData | None = Body(content_type=ContentType.m_part_form_data),\n    # or\n    data: Optional[BodyData] = Body(content_type=ContentType.m_part_form_data),\n    # or\n    data: Union[BodyData, None] = Body(content_type=ContentType.m_part_form_data),\n) -&gt; ...:\n</code></pre>"},{"location":"docs/server/request/parameters/body/multipart/#extracting-raw-data","title":"Extracting Raw Data","text":"<p><code>Rapidy</code> uses the <code>post</code> method of the <code>Request</code> object to obtain data and passes it to <code>Pydantic</code> for validation.</p> <p>How data extraction works in <code>Rapidy</code></p> <pre><code>async def extract_post_data(request: Request) -&gt; Optional[MultiDictProxy[Union[str, bytes, FileField]]]:\n    if not request.body_exists:\n        return None\n\n    return await request.post()\n</code></pre> <p><code>Rapidy</code> uses built-in <code>aiohttp</code> mechanisms for data extraction.</p> <p>More details about the <code>aiohttp.Request</code> object and methods for extracting data from it can be found here.</p> <p><code>x-www-form-urlencoded</code> and <code>multipart/form-data</code> are processed the same way.</p> <p>Both of these content types are extracted using the <code>post</code> method of the <code>Request</code> object. This is a feature of <code>aiohttp</code>.</p> <p>If a parameter is annotated as <code>bytes</code> or <code>StreamReader</code>, data is extracted differently.</p> <p>More details about the <code>StreamReader</code> object can be found here.</p>"},{"location":"docs/server/request/parameters/body/multipart/#bytes","title":"<code>bytes</code>","text":"<pre><code>from rapidy.http import post, Body, ContentType\n\n@post('/')\nasync def handler(\n    user_data: bytes = Body(content_type=ContentType.m_part_form_data),\n    # also you can use pydantic validation\n    user_data: bytes = Body(content_type=ContentType.m_part_form_data, min_length=1),\n) -&gt; ...:\n</code></pre> <code>Rapidy</code> Internal Code <pre><code>async def extract_body_bytes(request: Request) -&gt; Optional[bytes]:\n    if not request.body_exists:\n        return None\n\n    return await request.read()\n</code></pre>"},{"location":"docs/server/request/parameters/body/multipart/#streamreader","title":"<code>StreamReader</code>","text":"<pre><code>from rapidy import StreamReader\nfrom rapidy.http import post, Body, ContentType\n\n@post('/')\nasync def handler(\n    user_data: StreamReader = Body(content_type=ContentType.m_part_form_data),\n) -&gt; ...:\n</code></pre> <code>Rapidy</code> Internal Code <pre><code>async def extract_body_stream(request: Request) -&gt; Optional[StreamReader]:\n    if not request.body_exists:\n        return None\n\n    return request.content\n</code></pre> <p>Validation with <code>Pydantic</code> is not supported for <code>StreamReader</code>.</p> Default values cannot be set for <code>StreamReader</code>. <p>If you attempt to set a default value for <code>Body</code> with a <code>StreamReader</code> annotation using <code>default</code> or <code>default_factory</code>, a <code>ParameterCannotUseDefaultError</code> will be raised. <pre><code>from rapidy import StreamReader\nfrom rapidy.http import post, Body, ContentType\n\n@post('/')\nasync def handler(\n    user_data: StreamReader = Body(default='SomeDefault', content_type=ContentType.m_part_form_data),\n) -&gt; ...:\n</code></pre> <pre><code>------------------------------\nHandler attribute with Type `Body` cannot have a default value.\n\nHandler path: `&lt;full_path&gt;/main.py`\nHandler name: `handler`\nAttribute name: `data`\n------------------------------\n</code></pre></p>"},{"location":"docs/server/request/parameters/body/text/","title":"Text","text":"<p>Reading the request body as a string.</p>"},{"location":"docs/server/request/parameters/body/text/#description","title":"Description","text":"<p>Text (MIME-type: <code>text/*</code>) is a data type representing a string.</p> <p><code>Rapidy</code> works with any text, regardless of its <code>subtype</code>.</p> <p>Examples: <code>text/plain</code>, <code>text/html</code>, <code>text/css</code>, <code>text/xml</code>, <code>...</code>, <code>text/*</code>.</p> <p>Character encoding detection</p> <p>The <code>charset</code> parameter of the <code>Content-Type</code> header is used for text decoding. If <code>charset</code> is not specified by the client, the text will be decoded using <code>utf-8</code>.</p> <pre><code>from rapidy.http import post, Body, ContentType\n\n@post('/')\nasync def handler(\n    text_data: str = Body(content_type=ContentType.text_plain),\n    # or\n    text_data: str = Body(content_type=ContentType.text_html),\n    # or any mime-type with type `text`\n    text_data: str = Body(content_type=ContentType.text_any),\n) -&gt; ...:\n</code></pre> Sending with <code>curl</code> <pre><code>curl -X POST \\\n-H \"Content-Type: text/plain\" \\\n-d 'SomeString' \\\nhttp://127.0.0.1:8080\n</code></pre>"},{"location":"docs/server/request/parameters/body/text/#extraction-without-validation","title":"Extraction without validation","text":"<p>Disabling validation is not recommended.</p> <p>If validation is disabled, the parameter will contain the basic <code>aiohttp</code> structure:</p> <ul> <li><code>Body(content_type=ContentType.text_plain)</code> \u2192 <code>str</code></li> </ul>"},{"location":"docs/server/request/parameters/body/text/#ways-to-disable-validation","title":"Ways to disable validation","text":""},{"location":"docs/server/request/parameters/body/text/#explicit-disabling","title":"Explicit disabling","text":"<pre><code>from enum import Enum\nfrom rapidy.http import post, Body, ContentType\n\nclass DataEnum(Enum):\n    test = 'test'\n\n@post('/')\nasync def handler(\n    data: DataEnum = Body(validate=False, content_type=ContentType.text_plain),\n) -&gt; ...:\n</code></pre>"},{"location":"docs/server/request/parameters/body/text/#using-any","title":"Using <code>Any</code>","text":"<pre><code>@post('/')\nasync def handler(\n    data: Any = Body(content_type=ContentType.text_plain),\n) -&gt; ...:\n</code></pre>"},{"location":"docs/server/request/parameters/body/text/#no-type-annotation","title":"No Type Annotation","text":"<p>If no type is specified, <code>Any</code> will be set by default. <pre><code>@post('/')\nasync def handler(\n    data = Body(content_type=ContentType.text_plain),\n) -&gt; ...:\n</code></pre></p>"},{"location":"docs/server/request/parameters/body/text/#default-values","title":"Default values","text":"<p>If an HTTP request does not contain a body, the parameter will receive the specified default value (if set).</p>"},{"location":"docs/server/request/parameters/body/text/#usage-examples","title":"Usage examples","text":""},{"location":"docs/server/request/parameters/body/text/#default-value-specified","title":"Default Value Specified","text":"<pre><code>from enum import Enum\nfrom rapidy.http import post, Body, ContentType\n\nclass DataEnum(Enum):\n    test = 'test'\n\n@post('/')\nasync def handler(\n    data: DataEnum = Body('some_data', content_type=ContentType.text_plain),\n    # or\n    data: DataEnum = Body(default_factory=lambda: 'some_data', content_type=ContentType.text_plain),\n) -&gt; ...:\n</code></pre>"},{"location":"docs/server/request/parameters/body/text/#optional-request-body","title":"Optional Request Body","text":"<pre><code>from enum import Enum\nfrom rapidy.http import post, Body, ContentType\n\nclass DataEnum(Enum):\n    test = 'test'\n\n@post('/')\nasync def handler(\n    data: DataEnum | None = Body(content_type=ContentType.text_plain),\n    # or\n    data: Optional[DataEnum] = Body(content_type=ContentType.text_plain),\n    # or\n    data: Union[DataEnum, None] = Body(content_type=ContentType.text_plain),\n) -&gt; ...:\n</code></pre>"},{"location":"docs/server/request/parameters/body/text/#extracting-raw-data","title":"Extracting Raw Data","text":"<p><code>Rapidy</code> uses the <code>text</code> method of the <code>Request</code> object to retrieve data and passes it to <code>Pydantic</code> for validation.</p> <p>How data extraction works in <code>Rapidy</code></p> <pre><code>async def extract_body_text(request: Request) -&gt; Optional[str]:\n    if not request.body_exists:\n        return None\n\n    return await request.text()\n</code></pre> <p><code>Rapidy</code> uses built-in <code>aiohttp</code> mechanisms for data extraction.</p> <p>More details about the <code>aiohttp.Request</code> object and methods for extracting data from it can be found here.</p> <p>If a parameter is annotated as <code>bytes</code> or <code>StreamReader</code>, data is extracted differently.</p> <p>More details about the <code>StreamReader</code> object can be found here.</p>"},{"location":"docs/server/request/parameters/body/text/#bytes","title":"<code>bytes</code>","text":"<pre><code>@post('/')\nasync def handler(\n    user_data: bytes = Body(content_type=ContentType.text_plain),\n    # also you can use pydantic validation\n    user_data: bytes = Body(content_type=ContentType.text_plain, min_length=1),\n) -&gt; ...:\n</code></pre> <code>Rapidy</code> internal code <pre><code>async def extract_body_bytes(request: Request) -&gt; Optional[bytes]:\n    if not request.body_exists:\n        return None\n\n    return await request.read()\n</code></pre>"},{"location":"docs/server/request/parameters/body/text/#streamreader","title":"<code>StreamReader</code>","text":"<pre><code>from rapidy import StreamReader\n\n@post('/')\nasync def handler(\n    user_data: StreamReader = Body(content_type=ContentType.text_plain),\n) -&gt; ...:\n</code></pre> <code>Rapidy</code> Internal Code <pre><code>async def extract_body_stream(request: Request) -&gt; Optional[StreamReader]:\n    if not request.body_exists:\n        return None\n\n    return request.content\n</code></pre> <p>Validation with <code>Pydantic</code> is not supported for <code>StreamReader</code>.</p> A default value cannot be set for <code>StreamReader</code>. <p>If you try to set a default value for <code>Body</code> annotated with <code>StreamReader</code> using <code>default</code> or <code>default_factory</code>, an error <code>ParameterCannotUseDefaultError</code> will be raised. <pre><code>from rapidy import StreamReader\n\n@post('/')\nasync def handler(\n    user_data: StreamReader = Body(default='SomeDefault', content_type=ContentType.text_plain),\n) -&gt; ...:\n</code></pre> <pre><code>------------------------------\nHandler attribute with Type `Body` cannot have a default value.\n\nHandler path: `&lt;full_path&gt;/main.py`\nHandler name: `handler`\nAttribute name: `data`\n------------------------------\n</code></pre></p>"},{"location":"docs/server/request/parameters/body/x_www_form_urlencoded/","title":"X-WWW-Form-Urlencoded","text":"<p>Reading the request body as <code>application/x-www-form-urlencoded</code>.</p>"},{"location":"docs/server/request/parameters/body/x_www_form_urlencoded/#description","title":"Description","text":"<p>X-WWW-Form-Urlencoded (MIME-type: <code>application/x-www-form-urlencoded</code>) is a widely used content type for transmitting data through HTML forms on the internet.</p> <p>The format represents a string with key-value pairs as follows: <code>key1=value1&amp;key2=value2</code>.</p> <pre><code>from pydantic import BaseModel\nfrom rapidy.http import post, Body, ContentType\n\nclass UserData(BaseModel):\n    username: str\n    password: str\n\n@post('/')\nasync def handler(\n    user_data: UserData = Body(content_type=ContentType.x_www_form),\n    # or\n    user_data: UserData = Body(content_type='application/x-www-form-urlencoded'),\n) -&gt; ...:\n</code></pre> Sending with <code>curl</code> <pre><code>curl -X POST \\\n-H \"Content-Type: application/x-www-form-urlencoded\" \\\n-d \"username=User&amp;password=myAwesomePass\" \\\nhttp://127.0.0.1:8080\n</code></pre>"},{"location":"docs/server/request/parameters/body/x_www_form_urlencoded/#extracting-without-validation","title":"Extracting Without Validation","text":"<p>Disabling validation is not recommended.</p> <p>If validation is disabled, the parameter will contain a basic <code>aiohttp</code> structure:</p> <ul> <li><code>Body(content_type=ContentType.x_www_form)</code> \u2192 <code>MultiDictProxy[str]</code></li> </ul>"},{"location":"docs/server/request/parameters/body/x_www_form_urlencoded/#ways-to-disable-validation","title":"Ways to Disable Validation","text":""},{"location":"docs/server/request/parameters/body/x_www_form_urlencoded/#explicit-disabling","title":"Explicit Disabling","text":"<pre><code>from pydantic import BaseModel\nfrom rapidy.http import post, Body, ContentType\n\nclass BodyData(BaseModel):\n    ...\n\n@post('/')\nasync def handler(\n    data: BodyData = Body(validate=False, content_type=ContentType.x_www_form),\n) -&gt; ...:\n</code></pre>"},{"location":"docs/server/request/parameters/body/x_www_form_urlencoded/#using-any","title":"Using <code>Any</code>","text":"<pre><code>@post('/')\nasync def handler(\n    data: Any = Body(content_type=ContentType.x_www_form),\n) -&gt; ...:\n</code></pre>"},{"location":"docs/server/request/parameters/body/x_www_form_urlencoded/#no-type-annotation","title":"No Type Annotation","text":"<p>If no type is specified, <code>Any</code> will be set by default. <pre><code>@post('/')\nasync def handler(\n    data = Body(content_type=ContentType.x_www_form),\n) -&gt; ...:\n</code></pre></p>"},{"location":"docs/server/request/parameters/body/x_www_form_urlencoded/#default-values","title":"Default Values","text":"<p>If the HTTP request does not contain a body, the parameter will receive the specified default value (if provided).</p>"},{"location":"docs/server/request/parameters/body/x_www_form_urlencoded/#usage-examples","title":"Usage Examples","text":""},{"location":"docs/server/request/parameters/body/x_www_form_urlencoded/#default-value-specified","title":"Default Value Specified","text":"<pre><code>from pydantic import BaseModel\nfrom rapidy.http import post, Body, ContentType\n\nclass BodyData(BaseModel):\n    ...\n\n@post('/')\nasync def handler(\n    data: BodyData = Body('some_data', content_type=ContentType.x_www_form),\n    # or\n    data: BodyData = Body(default_factory=lambda: 'some_data', content_type=ContentType.x_www_form),\n) -&gt; ...:\n</code></pre>"},{"location":"docs/server/request/parameters/body/x_www_form_urlencoded/#optional-request-body","title":"Optional Request Body","text":"<pre><code>from pydantic import BaseModel\n\nfrom rapidy.http import post, Body, ContentType\n\nclass BodyData(BaseModel):\n    ...\n\n@post('/')\nasync def handler(\n    data: BodyData | None = Body(content_type=ContentType.x_www_form),\n    # or\n    data: Optional[BodyData] = Body(content_type=ContentType.x_www_form),\n    # or\n    data: Union[BodyData, None] = Body(content_type=ContentType.x_www_form),\n) -&gt; ...:\n</code></pre>"},{"location":"docs/server/request/parameters/body/x_www_form_urlencoded/#extracting-raw-data","title":"Extracting Raw Data","text":"<p><code>Rapidy</code> uses the <code>post</code> method of the <code>Request</code> object to retrieve data and passes it to <code>Pydantic</code> for validation.</p> <p>How data extraction works in <code>Rapidy</code></p> <pre><code>async def extract_post_data(request: Request) -&gt; Optional[MultiDictProxy[Union[str, bytes, FileField]]]:\n    if not request.body_exists:\n        return None\n\n    return await request.post()\n</code></pre> <p><code>Rapidy</code> uses built-in <code>aiohttp</code> mechanisms.</p> <p>For more information about the <code>aiohttp.Request</code> object and data extraction methods, see here.</p> <p><code>x-www-form-urlencoded</code> and <code>multipart/form-data</code> are handled the same way.</p> <p>Both data types are extracted using the <code>post</code> method of the <code>Request</code> object. This is a characteristic of <code>aiohttp</code> implementation.</p> <p>If a parameter is annotated as <code>bytes</code> or <code>StreamReader</code>, data is extracted differently.</p> <p>For more details on the <code>StreamReader</code> object, see here.</p>"},{"location":"docs/server/request/parameters/body/x_www_form_urlencoded/#bytes","title":"<code>bytes</code>","text":"<pre><code>@post('/')\nasync def handler(\n    user_data: bytes = Body(content_type=ContentType.x_www_form),\n    # also you can use pydantic validation\n    user_data: bytes = Body(content_type=ContentType.x_www_form, min_length=1),\n) -&gt; ...:\n</code></pre> <code>Rapidy</code> Internal Code <pre><code>async def extract_body_bytes(request: Request) -&gt; Optional[bytes]:\n    if not request.body_exists:\n        return None\n\n    return await request.read()\n</code></pre>"},{"location":"docs/server/request/parameters/body/x_www_form_urlencoded/#streamreader","title":"<code>StreamReader</code>","text":"<pre><code>from rapidy import StreamReader\n\n@post('/')\nasync def handler(\n    user_data: StreamReader = Body(content_type=ContentType.x_www_form),\n) -&gt; ...:\n</code></pre> <code>Rapidy</code> Internal Code <pre><code>async def extract_body_stream(request: Request) -&gt; Optional[StreamReader]:\n    if not request.body_exists:\n        return None\n\n    return request.content\n</code></pre> <p>Validation with <code>Pydantic</code> is not supported for <code>StreamReader</code>.</p> Default values cannot be set for <code>StreamReader</code>. <p>If you attempt to set a default value for <code>Body</code> with a <code>StreamReader</code> annotation using <code>default</code> or <code>default_factory</code>, a <code>ParameterCannotUseDefaultError</code> will be raised.</p> <p><pre><code>from rapidy import StreamReader\n\n@post('/')\nasync def handler(\n    user_data: StreamReader = Body(content_type=ContentType.x_www_form),\n) -&gt; ...:\n</code></pre> <pre><code>------------------------------\nHandler attribute with Type `Body` cannot have a default value.\n\nHandler path: `&lt;full_path&gt;/main.py`\nHandler name: `handler`\nAttribute name: `data`\n------------------------------\n</code></pre></p>"},{"location":"docs/server/response/","title":"HTTP-Response","text":"<p>The section describes how to create and send an HTTP response in <code>Rapidy</code>.</p>"},{"location":"docs/server/response/#description","title":"Description","text":"<p>HTTP Response is a message sent by the server to the client in response to their request.</p> Example of a text HTTP response (HTTP/1.1 protocol) <pre><code>HTTP/1.1 200 OK\nServer: Nginx\nContent-Type: text/html; charset=utf-8\nDate: Wed, 10 Aug 2024 11:00:00 GMT\nKeep-Alive: timeout=5, max=1000\nConnection: Keep-Alive\nAge: 3464\nDate: Wed, 10 Aug 2024 11:10:00 GMT\nX-Cache-Info: caching\nContent-Length: 220\n\n&lt;!DOCTYPE HTML PUBLIC \"-//IETF//DTD HTML 2.0//EN&gt;\"&gt;\n(... more body data ...)\n</code></pre>"},{"location":"docs/server/response/#structure-of-an-http-response","title":"Structure of an HTTP response","text":"<p>An HTTP response consists of a status line, headers, and a body.</p>"},{"location":"docs/server/response/#status-line","title":"Status Line","text":"<p><code>HTTP/1.1 200 OK</code></p> <p>The status line (or status string) includes:</p> <ul> <li>Protocol version (HTTP protocol) \u2014 HTTP/1.1</li> <li>Status code (numerical code indicating the status of the request) \u2014 200</li> <li>Explanation (brief textual description of the status code) \u2014 OK</li> </ul> HTTP Protocol Versions <p>HTTP standards are developed by the Internet Engineering Task Force (IETF) and the World Wide Web Consortium (W3C), resulting in a series of documents called Requests for Comments (RFC).</p> Protocol Version HTTP Protocol Type Transport Layer Description HTTP/1.1 Textual TCP Requires waiting for a response before sending the next request on the same connection. HTTP/2 Binary TCP Allows sending multiple requests simultaneously without waiting for the previous ones to finish. HTTP/3/QUIC Binary UDP Operates over UDP (uses QUIC technology). HTTP Status Codes <p>HTTP status codes inform the client of the result of processing their request. They are divided into five categories:</p> Code Description 1xx Informational codes, not affecting the request processing. 2xx Successful request processing. 3xx Redirection to another resource. 4xx Client-side errors (e.g., invalid request or lack of permissions). 5xx Server-side errors."},{"location":"docs/server/response/#response-headers","title":"Response Headers","text":"<p>Response headers (Response Headers) specify details about the response but do not affect the content of the body.</p> Examples of headers Category Example Description Server Server: nginx Information about the server that handled the request. Set-Cookie Set-Cookie:UserData=SomeData123 A cookie with user information stored by the browser."},{"location":"docs/server/response/#response-body","title":"Response Body","text":"<p>An optional part of the response containing data.</p> <p>The server specifies the type of transmitted data using the <code>Content-Type</code> header.</p> <p>The response body can represent JSON, a media file, a document, text, or even an arbitrary set of bytes.</p>"},{"location":"docs/server/response/#generating-an-http-response","title":"Generating an HTTP Response","text":"<p>A simple HTTP handler response might look like this: <pre><code>from rapidy.http import get\n\n@get('/')\nasync def handler() -&gt; dict[str, str]:\n    return {'hello': 'rapidy'}\n</code></pre></p>"},{"location":"docs/server/response/#validation-and-serialization-of-the-response","title":"Validation and Serialization of the Response","text":"<p><code>Rapidy</code> uses <code>pydantic</code> for validation and serialization of responses.</p> <p>When the server starts, <code>Rapidy</code> creates a <code>pydantic</code> model for each handler based on the return annotation and uses it to validate data in the response.</p> <p>You can override the type for validation or cancel the creation of the <code>pydantic</code> model using the <code>response_validate</code> and <code>response_type</code> attributes.</p> <pre><code>from rapidy.http import get\n\n@get(\n    '/',\n    response_validate=False,\n)\nasync def handler() -&gt; str:  # &lt;-- `str` will be ignored\n    return {'hello': 'rapidy'}\n</code></pre> <p>More about response attributes for HTTP handlers can be read here.</p> Examples of successful responses <p><pre><code>@post('/')\nasync def handler() -&gt; int:  # &lt;-- `int` will be used to validate\n    return '123'  # success response --&gt; `123`\n</code></pre> <pre><code>from pydantic import BaseModel, Field\n\nclass Result(BaseModel):\n    data: str = Field(max_length=10)\n\n@post('/')\nasync def handler() -&gt; Result:\n    return Result(data='some_data')  # success response --&gt; `{\"data\": \"some_data\"}`\n</code></pre> <pre><code>from pydantic import BaseModel, Field\n\nclass Result(BaseModel):\n    data: str = Field(max_length=10)\n\n@post('/')\nasync def handler() -&gt; Result:\n    return {'data': 'some_data'}  # # success response --&gt; `{\"data\": \"some_data\"}`\n</code></pre></p> Examples of failed responses <p><pre><code>from rapidy.http import get\n\n@get('/')\nasync def handler() -&gt; int:  # &lt;-- `int` will be used to validate\n    return 'some_data'  # &lt;-- will raise err\n</code></pre> <pre><code>------------------------------\nValidation errors:\n [{'loc': ('body',),\n  'msg': 'Input should be a valid integer, unable to parse string as an '\n         'integer',\n  'type': 'int_parsing'}]\n\nHandler path: `main.py`\nHandler name: `handler`\n------------------------------\n</code></pre></p> <p><pre><code>from pydantic import BaseModel, Field\n\nclass Result(BaseModel):\n    data: str = Field(max_length=10)\n\n@post('/')\nasync def handler() -&gt; Result:\n    return {'data': 'another_data'}  # &lt;-- will raise err\n</code></pre> <pre><code>------------------------------\nValidation errors:\n [{'ctx': {'max_length': 10},\n  'loc': ('body', 'data'),\n  'msg': 'String should have at most 10 characters',\n  'type': 'string_too_long'}]\n\nHandler path: `main.py`\nHandler name: `handler`\n------------------------------\n</code></pre></p>"},{"location":"docs/server/response/#advanced-http-response-management","title":"Advanced HTTP Response Management","text":"<p><code>Rapidy</code> uses the <code>Response</code> object for managing HTTP responses. <pre><code>from rapidy.http import Response\n</code></pre></p> <p>The <code>Response</code> object can be created either by <code>Rapidy</code> internally to form a response or by the developer for explicit control.</p> <p>More about the <code>Response</code> object can be read here.</p>"},{"location":"docs/server/response/#automatic-creation-of-response-object","title":"Automatic Creation of Response Object","text":"<p><code>Rapidy</code> automatically creates a <code>Response</code> in the following cases:</p> <p>If a handler defines an attribute with any name and type <code>Response</code> <pre><code>from rapidy.http import get, Response\n\n@get('/')\nasync def handler(response: Response) -&gt; ...:\n    ...\n</code></pre></p> <p>This gives the developer more flexibility in managing HTTP responses, allowing, for example, setting status codes, cookies, and other parameters. Learn more about the <code>Response</code> object attributes here.</p> <pre><code>from rapidy.http import get, Response\n\n@get('/')\nasync def handler(\n    response: Response,  # &lt;-- current response\n) -&gt; str:\n    some_answer: bool = ...\n    if some_answer:\n        response.set_status(200)\n        return 'ok'\n\n    response.set_status(500)\n    return 'not ok'\n</code></pre> <p>You can also return the same <code>Response</code> object. <pre><code>from rapidy.http import get, Response\n\n@get('/')\nasync def handler(response: Response) -&gt; Response:\n    return response\n</code></pre></p> <p>The handler returns a <code>python</code> object <pre><code>from rapidy.http import get\n\n@get('/')\nasync def handler() -&gt; dict[str, str]:\n    return {'hello': 'rapidy'}\n</code></pre></p> <p>If a handler already has an attribute with type <code>Response</code>, and the handler returns a <code>python</code> object, a new instance of <code>Response</code> will not be created.</p> <pre><code>from rapidy.http import get, Response\n\n@get('/')\nasync def handler(\n    response: Response,  # &lt;-- this response will be returned\n) -&gt; str:\n    return 'ok'\n</code></pre>"},{"location":"docs/server/response/#the-handler-returns-a-response-object","title":"The handler returns a Response object","text":"<p><code>Rapidy</code> allows the developer to manage and create the <code>Response</code> object manually.</p> <pre><code>from rapidy.http import get, Response\n\n@get('/')\nasync def handler() -&gt; Response:\n    return Response(status=201)\n</code></pre> <p>When directly managing the response, handler attributes are ignored.</p> <pre><code>from rapidy.http import get, ContentType, Response\n\n@get(\n    '/',\n    response_content_type=ContentType.json,  # &lt;-- will be ignored\n)\nasync def handler() -&gt; Response:\n    return Response(...)\n</code></pre> <p>If the <code>Response</code> object was injected as an attribute, and the developer returns a new <code>Response</code>, the injected <code>Response</code> is ignored.</p> <pre><code>from rapidy.http import get, Response\n\n@get('/')\nasync def handler(\n    response: Response,  # &lt;-- this response will be ignored\n) -&gt; Response:\n    response.set_status(200)  # &lt;-- `200` status will be ignored\n\n    return Response(status=500)  # &lt;-- new Response obj returned status `500`\n</code></pre> <p>When directly managing the response, <code>pydantic</code> validation will not work.</p> <pre><code>from rapidy.http import get, Response\n\n@get('/')\nasync def handler(\n) -&gt; int:  # &lt;-- `int` type to validate will be ignored\n    return Response()\n</code></pre>"},{"location":"docs/server/response/#the-handler-returns-none","title":"The handler returns None","text":"<p>If the <code>Rapidy</code> handler returns nothing, <code>Rapidy</code> will return the current <code>Response</code> object by default.</p> <p>If you modified the request and returned nothing from the handler, this modified request will be returned!</p> <pre><code>from rapidy.http import get, Response\n\n@get('/')\nasync def handler(response: Response) -&gt; None:\n    response.text = 'hello rapidy!'\n\n# success response --&gt; `hello rapidy!`\n</code></pre>"},{"location":"docs/server/response/#http-handler-attributes","title":"HTTP Handler Attributes","text":"<p>The response attributes of a web handler are used to manage the formation of the response when returning any <code>python</code> object from the handler.</p>"},{"location":"docs/server/response/#default-status-code","title":"Default Status Code","text":"<p>To manage the default status code, you can define the <code>status_code</code> attribute.</p> <pre><code>from http import HTTPStatus\nfrom rapidy.http import get\n\n@get(\n    '/',\n    status_code=201,\n)\nasync def handler() -&gt; ...:\n    ...\n\n@get(\n    '/',\n    status_code=HTTPStatus.CREATED,\n)\nasync def handler() -&gt; ...:\n    ...\n</code></pre> <p>You can read about other attributes here.</p> <p>Rapidy allows you to manage attributes across all handler types, including those styled like aiohttp.</p> <pre><code># aiohttp style\nfrom rapidy import web\n\nasync def handler() -&gt; dict[str, str]:\n    return {'hello': 'rapidy'}\n\napp = web.Application()\napp.add_routes([\n    web.post(\n        '/',\n        handler,\n        status_code=200,\n        response_content_type='application/json',\n    ),\n])\n</code></pre>"},{"location":"docs/server/response/handler_response/","title":"Handler Response","text":"<p>This section explains how to manage an HTTP response in <code>Rapidy</code> when returning a <code>Python</code> object from an HTTP handler.</p>"},{"location":"docs/server/response/handler_response/#attributes","title":"Attributes","text":"<p>Handler response attributes are used to control how a response is generated when returning any <code>Python</code> object from a handler.</p> <p>Rapidy supports attribute management in all types of handlers, including those written in the aiohttp style.</p> <pre><code># aiohttp style\nfrom rapidy import web\n\nasync def handler() -&gt; dict[str, str]:\n    return {'hello': 'rapidy'}\n\napp = web.Application()\napp.add_routes([\n    web.post(\n        '/',\n        handler,\n        status_code=200,\n        response_content_type='application/json',\n    ),\n])\n</code></pre>"},{"location":"docs/server/response/handler_response/#path","title":"path","text":"<p>path: <code>str | None = None</code> \u2014 the path to the handler on the web server.</p> <pre><code>from rapidy.http import get\n\n@get(\n    '/',\n)\nasync def handler() -&gt; ...:\n    ...\n</code></pre>"},{"location":"docs/server/response/handler_response/#allow_head","title":"allow_head","text":"<p>allow_head: <code>bool = True</code> \u2014 a flag indicating whether to add the <code>head</code> method to an existing <code>get</code> handler.</p> <pre><code>from rapidy.http import get\n\n@get(\n    '/',\n    allow_head=True,\n)\nasync def handler() -&gt; ...:\n    ...\n</code></pre>"},{"location":"docs/server/response/handler_response/#status_code","title":"status_code","text":"<p>status_code: <code>int | HTTPStatus = 200</code> \u2014 the default status code used for the response.</p> <pre><code>from http import HTTPStatus\nfrom rapidy.http import get\n\n@get(\n    '/',\n    status_code=201,\n)\nasync def handler() -&gt; ...:\n    ...\n\n@get(\n    '/',\n    status_code=HTTPStatus.CREATED,\n)\nasync def handler() -&gt; ...:\n    ...\n</code></pre>"},{"location":"docs/server/response/handler_response/#response_validate","title":"response_validate","text":"<p>response_validate: <code>bool = True</code> \u2014 a flag indicating whether the handler response should be validated.</p> <pre><code>from rapidy.http import get\n\n@get(\n    '/',\n    response_validate=False,\n)\nasync def handler() -&gt; str:  # &lt;-- `str` will be ignored\n    return {'hello': 'rapidy'}\n</code></pre>"},{"location":"docs/server/response/handler_response/#response_type","title":"response_type","text":"<p>response_type: <code>Type[Any] | None = ...</code> \u2014 defines the response type of the handler. (If specified, this attribute will be used to create a <code>Pydantic</code> response model instead of the handler's return annotation.)</p> <pre><code>from rapidy.http import get\n\n@get(\n    '/',\n    # `dict[str, str]` will be used for validate and serialize body response data\n    response_type=dict[str, str],\n)\nasync def handler() -&gt; str:  # &lt;-- `str` will be ignored\n    return {'hello': 'rapidy'}\n</code></pre> <p>This flag adds flexibility to response body serialization and validation, but in most cases, you won't need to modify it.</p>"},{"location":"docs/server/response/handler_response/#response_content_type","title":"response_content_type","text":"<p>response_content_type: <code>str = 'application/json'</code> \u2014 defines the <code>Content-Type</code> header and manages response post-processing.</p> <p>response_content_type=\"application/json\"</p> <p>When set to <code>\"application/json\"</code>, data is converted to JSON using jsonify(dumps=True) and encoded according to the charset.</p> <pre><code>from rapidy.http import get, ContentType\n\n@get(\n    '/',\n    response_content_type=ContentType.json,\n)\nasync def handler() -&gt; dict[str, str]:\n    return {'hello': 'rapidy!'}  # {\"hello\": \"rapidy!\"}\n</code></pre> <p>If the provided object is a string (<code>Response(body=\"string\")</code>), then according to the JSON standard, the string will be double-escaped:</p> <pre><code>from rapidy.http import get, ContentType\n\n@get(\n    '/',\n    response_content_type=ContentType.json,\n)\nasync def handler() -&gt; str:\n    return 'hello rapidy!'  # \"'hello rapidy!'\"\n</code></pre> <p>content_type=\"text/*\"</p> <p>When set to <code>\"text/*\"</code> (e.g., <code>text/plain</code>, <code>text/html</code>, etc.):</p> <ul> <li>If the data is of type <code>str</code>, it is sent as is.</li> <li>Otherwise, it is converted to a string using jsonify(dumps=False).</li> </ul> <pre><code>from rapidy.http import get, ContentType\n\n@get(\n    '/',\n    response_content_type=ContentType.text_any,\n)\nasync def handler() -&gt; str:\n    return 'hello rapidy!'  # \"hello rapidy!\"\n</code></pre> <p>If the object is not a string after <code>jsonify(dumps=False)</code>, it is additionally encoded using json_encoder to avoid double escaping.</p> <p>content_type=\"*\"</p> <p>For any other types (<code>*</code>):</p> <ul> <li>If the data is of type <code>bytes</code>, it is sent as is.</li> <li>Otherwise, it is converted to a string using jsonify(dumps=True) and encoded according to the charset.</li> </ul> <p>If <code>content_type</code> is not specified, it is set automatically based on the return type annotation:</p> <ul> <li><code>body: dict | BaseModel | dataclass</code> \u2192 <code>content_type=\"application/json\"</code></li> <li><code>body: str | Enum | int | float | Decimal | bool</code> \u2192 <code>content_type=\"text/plain\"</code></li> <li><code>body: Any</code> \u2192 <code>content_type=\"application/octet-stream\"</code></li> </ul>"},{"location":"docs/server/response/handler_response/#response_charset","title":"response_charset","text":"<p>response_charset: <code>str = 'utf-8'</code> \u2014 the character set used for encoding and decoding data.</p> <pre><code>from rapidy.http import get, Charset\n\n@get(\n    '/',\n    response_charset=Charset.utf32,\n)\nasync def handler() -&gt; ...:\n    ...\n</code></pre>"},{"location":"docs/server/response/handler_response/#response_zlib_executor","title":"response_zlib_executor","text":"<p>response_zlib_executor: <code>Callable | None = None</code> \u2014 a function used for response compression with <code>zlib</code>.</p> More about <code>zlib_executor</code> <p><code>zlib_executor</code> is a feature of <code>aiohttp</code>. Learn more here.</p>"},{"location":"docs/server/response/handler_response/#response_zlib_executor_size","title":"response_zlib_executor_size","text":"<p>response_zlib_executor_size: <code>int | None = None</code> \u2014 the response body size (in bytes) at which <code>zlib</code> compression is applied.</p>"},{"location":"docs/server/response/handler_response/#response_include_fields","title":"response_include_fields","text":"<p>response_include_fields: <code>set[str] | dict[str, Any] | None = None</code> \u2014 the Pydantic <code>include</code> parameter, specifying which fields to include in the response.</p> <pre><code>from pydantic import BaseModel, Field\nfrom rapidy.http import get\n\nclass Result(BaseModel):\n    value: str = Field('data', alias='someValue')\n    another_value: str = Field('another_data', alias='someAnotherValue')\n\n@get(\n    '/',\n    response_include_fields={'value'},\n)\nasync def handler() -&gt; Result:\n    return Result()  # {'someValue': 'data'}\n</code></pre>"},{"location":"docs/server/response/handler_response/#response_exclude_fields","title":"response_exclude_fields","text":"<p>response_exclude_fields: <code>set[str] | dict[str, Any] | None = None</code> \u2014 the Pydantic <code>exclude</code> parameter, specifying which fields to exclude from the response.</p> <pre><code>from pydantic import BaseModel, Field\nfrom rapidy.http import get\n\nclass Result(BaseModel):\n    value: str = Field('data', alias='someValue')\n    another_value: str = Field('another_data', alias='someAnotherValue')\n\n@get(\n    '/',\n    response_exclude_fields={'value'},\n)\nasync def handler() -&gt; Result:\n    return Result()  # {'someAnotherValue': 'another_data'}\n</code></pre>"},{"location":"docs/server/response/handler_response/#response_by_alias","title":"response_by_alias","text":"<p>response_by_alias: <code>bool = True</code> \u2014 the Pydantic <code>by_alias</code> parameter, determining whether to use field aliases instead of their original names.</p> <p><pre><code>from pydantic import BaseModel, Field\nfrom rapidy.http import get\n\nclass Result(BaseModel):\n    value: str = Field('data', alias='someValue')\n\n@get(\n    '/',\n    response_by_alias=True,  # &lt;-- default\n)\nasync def handler() -&gt; Result:\n    return Result()  # {\"someValue\": \"data\"}\n</code></pre> <pre><code>...\n@get(\n    '/',\n    response_by_alias=False,\n)\nasync def handler() -&gt; Result:\n    return Result()  # {\"value\": \"data\"}\n</code></pre></p>"},{"location":"docs/server/response/handler_response/#response_exclude_unset","title":"response_exclude_unset","text":"<p>response_exclude_unset: <code>bool = False</code> \u2014 the Pydantic <code>exclude_unset</code> parameter, excluding fields from the response that were not explicitly set (and only have default values).</p> <p><pre><code>from pydantic import BaseModel, Field\nfrom rapidy.http import get\n\nclass Result(BaseModel):\n    value: str = Field('data', alias='someValue')\n    another_value: str = Field('another_data', alias='someAnotherValue')\n\n@get(\n    '/',\n    response_exclude_unset=False,  # &lt;-- default\n)\nasync def handler() -&gt; Result:\n    return Result(someAnotherValue='new_data')  # {\"someValue\": \"data\", \"someAnotherValue\": \"new_data\"}\n</code></pre> <pre><code>...\n@get(\n    '/',\n    response_exclude_unset=True,\n)\nasync def handler() -&gt; Result:\n    return Result(someAnotherValue='new_data')  # {\"someAnotherValue\": \"new_data\"}\n</code></pre></p>"},{"location":"docs/server/response/handler_response/#response_exclude_defaults","title":"response_exclude_defaults","text":"<p>response_exclude_defaults: <code>bool = False</code> \u2014 the Pydantic <code>exclude_defaults</code> parameter, excluding fields from the response if their values match the default values, even if explicitly set.</p> <p><pre><code>from pydantic import BaseModel, Field\nfrom rapidy.http import get\n\nclass Result(BaseModel):\n    value: str = Field('data', alias='someValue')\n\n@get(\n    '/',\n    response_exclude_defaults=False,  # &lt;-- default\n)\nasync def handler() -&gt; Result:\n    return Result()  # {\"value\": \"data\"}\n</code></pre> <pre><code>...\n@get(\n    '/',\n    response_exclude_defaults=True,\n)\nasync def handler() -&gt; Result:\n    return Result()  # {}\n</code></pre></p>"},{"location":"docs/server/response/handler_response/#response_exclude_none","title":"response_exclude_none","text":"<p>response_exclude_none: <code>bool = False</code> \u2014 the Pydantic <code>exclude_none</code> parameter, excluding fields from the response if they have a value of <code>None</code>.</p> <p><pre><code>from pydantic import BaseModel, Field\nfrom rapidy.http import get\n\nclass Result(BaseModel):\n    value: str = Field('data', alias='someValue')\n    none_value: None = None\n\n@get(\n    '/',\n    response_exclude_none=False,  # &lt;-- default\n)\nasync def handler() -&gt; Result:\n    return Result()  # {\"someValue\": \"data\", \"none_value\": null}\n</code></pre> <pre><code>...\n@get(\n    '/',\n    response_exclude_none=True,\n)\nasync def handler() -&gt; Result:\n    return Result()  # {\"someValue\": \"data\"}\n</code></pre></p>"},{"location":"docs/server/response/handler_response/#response_custom_encoder","title":"response_custom_encoder","text":"<p>response_custom_encoder: <code>Callable | None = None</code> \u2014 the Pydantic <code>custom_encoder</code> parameter, specifying a custom data encoder.</p>"},{"location":"docs/server/response/handler_response/#response_json_encoder","title":"response_json_encoder","text":"<p>response_json_encoder: <code>Callable = json.dumps</code> \u2014 a callable that takes an object and returns its JSON string representation. Used when <code>json_response(dumps=True, ...)</code> is applied.</p> <pre><code>from typing import Any\nfrom rapidy.http import get\n\ndef custom_encoder(obj: Any) -&gt; str:\n    ...\n\n@get(\n    '/',\n    response_json_encoder=custom_encoder,\n)\nasync def handler() -&gt; dict[str, str]:\n    return {'hello': 'rapidy!'}  # will be converted to a string by Rapidy's internal tools\n</code></pre>"},{"location":"docs/server/response/response_object/","title":"Response object","text":"<p>To manage HTTP responses, <code>Rapidy</code> uses the <code>Response</code> object.</p> <pre><code>from rapidy.http import Response\n</code></pre> <p>For simple scenarios of retrieving or saving data, <code>rapidy.http.Response</code> may not be required, but if you want to flexibly manage the response of your HTTP handler, this section will explain how to do that.</p> <p>The <code>Response</code> object in <code>Rapidy</code> is a wrapper around <code>aiohttp.Response</code>.</p> <p>Unlike <code>aiohttp.Response</code>, <code>rapidy.http.Response</code> has become much more versatile, and it now has convenient data serialization.</p> <p>More about <code>aiohttp.Response</code> can be found here.</p>"},{"location":"docs/server/response/response_object/#attributes","title":"Attributes","text":""},{"location":"docs/server/response/response_object/#body","title":"body","text":"<p>body: <code>Any | None = None</code> \u2014 the message body (can be almost any object).</p> <p>To set the <code>body</code>, create a <code>Response(body=...)</code> object or use the <code>body</code> setter of an existing instance. <pre><code>from rapidy.http import Response, get\n\n@get('/')\nasync def handler() -&gt; Response:\n    return Response(\n        body={'hello': 'rapidy'},\n    )\n\n@get('/')\nasync def handler() -&gt; ...:\n    response = Response()\n    response.body = {'hello': 'rapidy'}\n    ...\n\n@get('/')\nasync def handler(response: Response) -&gt; ...:\n    response.body = {'hello': 'rapidy'}\n    ...\n</code></pre></p> <p>To get the <code>body</code>, use the <code>body</code> getter of the <code>Response</code> object. <pre><code>...\n@get('/')\nasync def handler() -&gt; ...:\n    response = Response(body={'hello': 'rapidy'})\n    body = response.body\n    ...\n</code></pre></p> <p>The logic for preparing and transforming data is tied to the content_type attribute.</p> <p>A <code>bytes</code> type object will be sent as the body without changes.</p> <p>If you want Pydantic flags, such as <code>exclude_none</code> and others, to work, the passed object must be an instance of <code>pydantic.BaseModel</code>.</p>"},{"location":"docs/server/response/response_object/#text","title":"text","text":"<p>text: <code>Any | None = None</code> \u2014 the textual message body (can be almost any object).</p> <p>To set the response body as <code>text</code>, create a <code>Response(text=...)</code> object or use the <code>text</code> setter of an existing instance. <pre><code>from rapidy.http import Response, get\n\n@get('/')\nasync def handler() -&gt; Response:\n    return Response(\n        text = 'hello rapidy',\n    )\n\n@get('/')\nasync def handler() -&gt; ...:\n    response = Response()\n    response.text = 'hello rapidy'\n    ...\n\n@get('/')\nasync def handler(response: Response) -&gt; ...:\n    response.text = 'hello rapidy'\n    ...\n</code></pre></p> <p>To get the response body as <code>text</code>, use the <code>text</code> getter of the <code>Response</code> object. <pre><code>...\n@get('/')\nasync def handler() -&gt; ...:\n    response = Response(text='hello rapidy')\n    body = response.text\n    ...\n</code></pre></p> <p>The logic for preparing and transforming data is tied to the content_type attribute.</p> <p>A <code>str</code> type object will be sent as the body without checks (<code>content_type=\"text/plain\"</code>).</p> <p>If the data is not <code>str</code>, the same data transformation logic as for body applies.</p>"},{"location":"docs/server/response/response_object/#content_type","title":"content_type","text":"<p>content_type: <code>str | ContentType | None = None</code> \u2014 the attribute that allows you to manage the <code>Content-Type</code> header.</p> <p>The <code>Content-Type</code> header informs the client (browser, API client, another server) about the type of data contained in the HTTP response body.</p> <p>To set the <code>content_type</code>, create a <code>Response(content_type=...)</code> object or use the <code>content_type</code> setter of an existing instance. <pre><code>from rapidy.http import get, Response, ContentType\n\n@get('/')\nasync def handler() -&gt; Response:\n    return Response(\n        body={'hello': 'rapidy!'},\n        content_type=ContentType.json,\n        # or\n        content_type='application/json',\n    )\n\n@get('/')\nasync def handler() -&gt; dict[str, str]:\n    response = Response()\n\n    response.content_type = ContentType.json\n    # or\n    response.content_type = 'application/json'\n\n    return {'hello': 'rapidy!'}\n\n@get('/')\nasync def handler(response: Response) -&gt; dict[str, str]:\n    response.content_type = ContentType.json\n    # or\n    response.content_type = 'application/json'\n\n    return {'hello': 'rapidy!'}\n</code></pre></p> <p>To get the <code>content_type</code>, use the <code>content_type</code> getter of the <code>Response</code> object. <pre><code>...\n@get('/')\nasync def handler() -&gt; ...:\n    response = Response()\n    content_type = response.content_type\n    ...\n</code></pre></p> <p>If <code>content_type</code> is specified, the provided data will be transformed accordingly.</p> <p>If <code>content_type</code> is not specified, the <code>content_type</code> will be determined automatically based on the type of data the server is sending.</p> content_type=\"application/json <p><code>content_type=\"application/json\"</code> \u2014 the data is converted to <code>JSON</code> using jsonify(dumps=True) and encoded according to charset.</p> <pre><code>from rapidy.http import get, Response, ContentType\n\n@get('/')\nasync def handler() -&gt; Response:\n    return Response(\n        body={'hello': 'rapidy!'},\n        content_type=ContentType.json,\n    )  # {\"hello\": \"rapidy!\"}\n</code></pre> <p>If the passed object is a string <code>Response(body=\"string\")</code>, the string, according to the JSON standard, will be double-escaped: <pre><code>from rapidy.http import get, Response, ContentType\n\n@get('/')\nasync def handler() -&gt; Response:\n    return Response(\n        body='hello rapidy!',\n        content_type=ContentType.json,\n    )  # \"'hello rapidy!'\"\n</code></pre></p> content_type=\"text/* <p><code>content_type=\"text/*\"</code> (any text type: <code>text/plain</code>, <code>text/html</code>, etc.) \u2014 if the data is of type <code>str</code>, it is sent without changes. Otherwise, it is transformed into a string using jsonify(dumps=False).</p> <pre><code>from rapidy.http import get, Response, ContentType\n\n@get('/')\nasync def handler() -&gt; Response:\n    return Response(\n        text='hello rapidy!',\n        content_type=ContentType.text_any,\n    )  # \"hello rapidy!\"\n</code></pre> <p>If after <code>jsonify(dumps=False)</code> the object is not a string, it is further transformed using json_encoder to avoid double escaping.</p> content_type - any other MIME-type. <p>If the data is of type <code>bytes</code>, it is sent without changes. Otherwise, it is transformed into a string using jsonify(dumps=True) and encoded according to charset.</p> <p>If <code>content_type</code> is not specified, it is set automatically:</p> <ul> <li> <p><code>body: dict | BaseModel | dataclass</code> \u2192 <code>content_type=\"application/json\"</code> <pre><code>Response(body={\"hello\": \"rapidy\"})\nResponse(body=SomeModel(hello=\"rapidy\"))\n</code></pre></p> </li> <li> <p><code>body: str | Enum | int | float | Decimal | bool</code> \u2192 <code>content_type=\"text/plain\"</code> <pre><code>Response(body=\"string\")\nResponse(body=SomeEnum.string)\nResponse(body=1)\nResponse(body=1.0)\nResponse(body=Decimal(\"1.0\"))\nResponse(body=True)\n</code></pre></p> </li> <li> <p><code>body: Any</code> \u2192 <code>content_type=\"application/octet-stream\"</code> <pre><code>Response(body=b'bytes')\nResponse(body=AnotherType())\n</code></pre></p> </li> </ul>"},{"location":"docs/server/response/response_object/#status","title":"status","text":"<p>status: <code>int = 200</code> \u2014 HTTP response code.</p> <pre><code>from rapidy.http import Response, get\n\n@get('/')\nasync def handler() -&gt; Response:\n    return Response(\n        status=201,\n    )\n</code></pre>"},{"location":"docs/server/response/response_object/#set_status","title":"set_status","text":"<p>To set the <code>status</code>, use the <code>set_status</code> method of the <code>Response</code> object.</p> <pre><code>...\n@get('/')\nasync def handler() -&gt; ...:\n    response = Response()\n    response.set_status(200)\n    ...\n\n@get('/')\nasync def handler(response: Response) -&gt; ...:\n    response.set_status(200)\n    ...\n</code></pre>"},{"location":"docs/server/response/response_object/#headers","title":"headers","text":"<p>headers: <code>Mapping[str, str] | None = None</code> \u2014 additional response headers.</p> <pre><code>from rapidy.http import Response, get\n\n@get('/')\nasync def handler() -&gt; Response:\n    return Response(\n        headers={'Some-Header': '123'},\n    )\n</code></pre> <p>To get the <code>headers</code>, use the <code>headers</code> getter of the <code>Response</code> object. <pre><code>...\n@get('/')\nasync def handler() -&gt; ...:\n    response = Response()\n    headers = response.headers\n    ...\n</code></pre></p>"},{"location":"docs/server/response/response_object/#cookies","title":"cookies","text":"<p>cookies: <code>SimpleCookie | None = None</code> \u2014 response cookies to be set in the browser.</p> <p>To get the <code>cookies</code>, use the <code>cookies</code> getter of the <code>Response</code> object. <pre><code>...\n@get('/')\nasync def handler() -&gt; ...:\n    response = Response()\n    cookies = response.cookies\n    ...\n</code></pre></p>"},{"location":"docs/server/response/response_object/#set_cookie","title":"set_cookie","text":"<p>To set <code>cookies</code>, use the <code>set_cookie</code> method of the <code>Response</code> object. <pre><code>from rapidy.http import Response, get\n\n@get('/')\nasync def handler() -&gt; ...:\n    response = Response()\n    response.set_cookie('SomeCookie', 'SomeValue')\n    ...\n\n@get('/')\nasync def handler(response: Response) -&gt; ...:\n    response.set_cookie('SomeCookie', 'SomeValue')\n    ...\n</code></pre></p>"},{"location":"docs/server/response/response_object/#del_cookie","title":"del_cookie","text":"<p>To delete <code>cookies</code>, use the <code>del_cookie</code> method of the <code>Response</code> object. <pre><code>...\n@get('/')\nasync def handler() -&gt; ...:\n    response = Response()\n    response.del_cookie('SomeCookie')\n    ...\n</code></pre></p>"},{"location":"docs/server/response/response_object/#charset","title":"charset","text":"<p>charset: <code>str | Charset | None = 'utf-8'</code> \u2014 the encoding used for encoding and decoding data.</p> <p>To set the <code>charset</code>, create a <code>Response(charset=...)</code> object or use the <code>charset</code> setter of an existing instance. <pre><code>from rapidy.http import Response, get, Charset\n\n@get('/')\nasync def handler() -&gt; Response:\n    return Response(\n        charset=Charset.utf32,\n        # or\n        charset='utf32',\n    )\n\n@get('/')\nasync def handler(response: Response) -&gt; ...:\n    response.charset = Charset.utf32\n    # or\n    response.charset = 'utf32'\n</code></pre></p> <p>To get the <code>charset</code>, use the <code>charset</code> getter of the <code>Response</code> object. <pre><code>...\n@get('/')\nasync def handler() -&gt; ...:\n    response = Response()\n    charset = response.charset\n    ...\n</code></pre></p>"},{"location":"docs/server/response/response_object/#last_modified","title":"last_modified","text":"<p>last_modified: <code>int | float | datetime.datetime | str | None = None</code> \u2014 the attribute responsible for managing the <code>Last-Modified</code> header.</p> <p>To set <code>last_modified</code>, use the <code>last_modified</code> setter of the <code>Response</code> object. <pre><code>import datetime\nfrom rapidy.http import get, Response\n\n@get('/')\nasync def handler() -&gt; ...:\n    response = Response()\n    # or\n    response.last_modified = datetime.datetime(2024, 2, 24, 12, 0, 0, tzinfo=datetime.timezone.utc)\n    # or\n    response.last_modified = 'Wed, 21 Oct 2024 07:28:00 GMT'\n    ...\n\n@get('/')\nasync def handler(response: Response) -&gt; ...:\n    # or\n    response.last_modified = datetime.datetime(2024, 2, 24, 12, 0, 0, tzinfo=datetime.timezone.utc)\n    # or\n    response.last_modified = 'Wed, 21 Oct 2024 07:28:00 GMT'\n    ...\n</code></pre></p> <p>To get <code>last_modified</code>, use the <code>last_modified</code> getter of the <code>Response</code> object. <pre><code>...\n@get('/')\nasync def handler() -&gt; ...:\n    response = Response()\n    last_modified = response.last_modified\n    ...\n</code></pre></p> Full example of building an HTTP handler using last_modified <pre><code>from datetime import datetime, timezone\nfrom typing import Annotated\nfrom pydantic import BeforeValidator\nfrom rapidy.http import Header, HTTPNotModified, Response, get\n\ndef parse_http_date(value: str) -&gt; datetime:\n    return datetime.strptime(value, '%a, %d %b %Y %H:%M:%S GMT').replace(tzinfo=timezone.utc)\n\nIFModifiedSince = Annotated[\n    datetime | None,\n    BeforeValidator(parse_http_date),\n    Header(None, alias='If-Modified-Since'),\n]\n\n@get('/')\nasync def handler(\n    response: Response,\n    if_modified_since: IFModifiedSince,\n) -&gt; str:\n    last_mod_time = datetime(2024, 2, 24, 12, 0, 0, tzinfo=timezone.utc)\n\n    # Check if the client sent the `If-Modified-Since` header\n    if if_modified_since and if_modified_since &gt;= last_mod_time:\n        raise HTTPNotModified\n\n    response.last_modified = last_mod_time  # Set the last modified date\n    return 'success'\n</code></pre>"},{"location":"docs/server/response/response_object/#etag","title":"etag","text":"<p>etag: <code>ETag | str</code> \u2014 the attribute responsible for managing the <code>Etag</code> header.</p> <p>To set <code>etag</code>, use the <code>etag</code> setter of the <code>Response</code> object. <pre><code>from rapidy.http import get, Response\n\n@get('/')\nasync def handler() -&gt; ...:\n    response = Response()\n    response.etag = '33a64df551425fcc55e4d42a148795d9f25f89d4'\n    ...\n\n@get('/')\nasync def handler(response: Response) -&gt; ...:\n    response.etag = '33a64df551425fcc55e4d42a148795d9f25f89d4'\n    ...\n</code></pre></p> <p>To get <code>etag</code>, use the <code>etag</code> getter of the <code>Response</code> object. <pre><code>...\n@get('/')\nasync def handler() -&gt; ...:\n    response = Response()\n    etag = response.etag\n    ...\n</code></pre></p> Full example of building an HTTP handler using etag. <pre><code>import hashlib\nfrom rapidy.http import Header, HTTPNotModified, Response, get\n\n@get('/')\nasync def handler(\n    response: Response,\n    if_none_match: str | None = Header(None, alias='If-None-Match'),\n) -&gt; str:\n    content = 'success'\n\n    # Generate ETag based on content\n    etag_value = hashlib.md5(content.encode()).hexdigest()\n\n    # Check If-None-Match\n    if if_none_match and if_none_match == etag_value:\n        raise HTTPNotModified\n\n    response.etag = etag_value\n\n    return content\n</code></pre>"},{"location":"docs/server/response/response_object/#include","title":"include","text":"<p>include: <code>set[str] | dict[str, Any] | None = None</code> \u2014 the <code>include</code> parameter from Pydantic, specifying which fields to include.</p> <pre><code>from pydantic import BaseModel, Field\nfrom rapidy.http import Response, get\n\nclass Result(BaseModel):\n    value: str = Field('data', alias='someValue')\n    another_value: str = Field('another_data', alias='someAnotherValue')\n\n@get('/')\nasync def handler() -&gt; Response:\n    return Response(\n        Result(),\n        include={'value'},\n    )  # {'someValue': 'data'}\n</code></pre>"},{"location":"docs/server/response/response_object/#exclude","title":"exclude","text":"<p>exclude: <code>set[str] | dict[str, Any] | None = None</code> \u2014 the <code>exclude</code> parameter from Pydantic, specifying which fields to exclude.</p> <pre><code>from pydantic import BaseModel, Field\nfrom rapidy.http import Response, get\n\nclass Result(BaseModel):\n    value: str = Field('data', alias='someValue')\n    another_value: str = Field('another_data', alias='someAnotherValue')\n\n@get('/')\nasync def handler() -&gt; Response:\n    return Response(\n        Result(),\n        exclude={'value'},\n    )  # {'someAnotherValue': 'another_data'}\n</code></pre>"},{"location":"docs/server/response/response_object/#by_alias","title":"by_alias","text":"<p>by_alias: <code>bool = True</code> \u2014 the <code>by_alias</code> parameter from Pydantic, determining whether to use attribute aliases during serialization.</p> <p><pre><code>from pydantic import BaseModel, Field\nfrom rapidy.http import get, Response\n\nclass Result(BaseModel):\n    value: str = Field('data', alias='someValue')\n\n@get('/',)\nasync def handler() -&gt; Response:\n    return Response(\n        Result(),\n        by_alias=True,  # &lt;-- default\n    )  # {\"someValue\": \"data\"}\n</code></pre> <pre><code>...\n@get('/')\nasync def handler() -&gt; Response:\n    return Response(\n        Result(),\n        by_alias=False,\n    )  # {\"value\": \"data\"}\n</code></pre></p>"},{"location":"docs/server/response/response_object/#exclude_unset","title":"exclude_unset","text":"<p>exclude_unset: <code>bool = False</code> \u2014 the <code>exclude_unset</code> parameter from Pydantic, excluding fields not explicitly set to their default value.</p> <p><pre><code>from pydantic import BaseModel, Field\nfrom rapidy.http import Response, get\n\nclass Result(BaseModel):\n    value: str = Field('data', alias='someValue')\n    another_value: str = Field('another_data', alias='someAnotherValue')\n\n@get('/')\nasync def handler() -&gt; Response:\n    return Response(\n        Result(someAnotherValue='new_data'),\n        exclude_unset=False,  # &lt;-- default\n    )  # {\"someValue\": \"data\", \"someAnotherValue\": \"new_data\"}\n</code></pre> <pre><code>...\n@get('/')\nasync def handler() -&gt; Response:\n    return Response(\n        Result(someAnotherValue='new_data'),\n        exclude_unset=True,\n    )  # {\"someAnotherValue\": \"new_data\"}\n</code></pre></p>"},{"location":"docs/server/response/response_object/#exclude_defaults","title":"exclude_defaults","text":"<p>exclude_defaults: <code>bool = False</code> \u2014 the <code>exclude_defaults</code> parameter from Pydantic, excluding fields with default values even if they were explicitly set.</p> <p><pre><code>from pydantic import BaseModel, Field\nfrom rapidy.http import Response, get\n\nclass Result(BaseModel):\n    value: str = Field('data', alias='someValue')\n\n@get('/')\nasync def handler() -&gt; Response:\n    return Response(\n        Result(),\n        exclude_defaults=False,  # &lt;-- default\n    )  # {\"value\": \"data\"}\n</code></pre> <pre><code>...\n@get('/')\nasync def handler() -&gt; Response:\n    return Response(\n        Result(),\n        exclude_defaults=True,\n    )  # {}\n</code></pre></p>"},{"location":"docs/server/response/response_object/#exclude_none","title":"exclude_none","text":"<p>exclude_none: <code>bool = False</code> \u2014 the <code>exclude_none</code> parameter from Pydantic, excluding fields with <code>None</code> values from the output.</p> <p><pre><code>from pydantic import BaseModel, Field\nfrom rapidy.http import Response, get\n\nclass Result(BaseModel):\n    value: str = Field('data', alias='someValue')\n    none_value: None = None\n\n@get('/')\nasync def handler() -&gt; Response:\n    return Response(\n        Result(),\n        exclude_none=False,  # &lt;-- default\n    )  # {\"someValue\": \"data\", \"none_value\": null}\n</code></pre> <pre><code>...\n@get('/')\nasync def handler() -&gt; Response:\n    return Response(\n        Result(),\n        exclude_none=True,\n    )  # {\"someValue\": \"data\"}\n</code></pre></p>"},{"location":"docs/server/response/response_object/#custom_encoder","title":"custom_encoder","text":"<p>custom_encoder: <code>Callable | None = None</code> \u2014 the <code>custom_encoder</code> parameter from Pydantic, allowing you to specify a custom encoder.</p>"},{"location":"docs/server/response/response_object/#json_encoder","title":"json_encoder","text":"<p>json_encoder: <code>Callable = json.dumps</code> \u2014 a function that takes an object and returns its <code>JSON</code> representation.</p> <pre><code>from typing import Any\nfrom rapidy.http import Response, get\n\ndef custom_encoder(obj: Any) -&gt; str:\n    ...\n\n@get('/')\nasync def handler() -&gt; Response:\n    return Response(\n        body={'hello': 'rapidy!'},  # will be converted to a string by Rapidy's internal tools\n        json_encoder=custom_encoder,  # Converts the obtained string above into a JSON object using the `custom_encoder` function\n    )\n</code></pre>"},{"location":"docs/server/testing/","title":"Testing","text":""},{"location":"docs/server/testing/#description","title":"Description","text":"<p><code>Rapidy</code> is tested in the same way as <code>aiohttp</code>.</p> <p>To get started, install the testing plugin: <pre><code>pip install pytest-aiohttp\n</code></pre></p> <p>You can learn more about testing <code>aiohttp</code> here.</p>"},{"location":"docs/server/testing/#example-test-for-a-simple-application","title":"Example test for a simple application","text":""},{"location":"docs/server/testing/#project-structure","title":"Project structure","text":"<pre><code>\u251c\u2500\u2500 app\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 __init__.py\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 main.py\n\u2514\u2500\u2500 tests\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 conftest.py\n    \u251c\u2500\u2500 pytest.ini\n    \u2514\u2500\u2500 test_hello.py\n</code></pre>"},{"location":"docs/server/testing/#app","title":"app","text":""},{"location":"docs/server/testing/#mainpy","title":"main.py","text":"<p>Contents of <code>app/main.py</code>: <pre><code>from rapidy import Rapidy, run_app\nfrom rapidy.http import get\n\n@get('/')\nasync def hello() -&gt; str:\n    return 'Hello, world'\n\ndef create_app() -&gt; Rapidy:\n    app = Rapidy(\n        http_route_handlers=[hello],\n    )\n\n    # add additional app creation logic ...\n\n    return app\n\nif __name__ == '__main__':\n    app = create_app()\n    run_app(app, host='0.0.0.0', port=8080)\n</code></pre></p>"},{"location":"docs/server/testing/#tests","title":"tests","text":""},{"location":"docs/server/testing/#conftestpy","title":"conftest.py","text":"<p>Contents of <code>tests/conftest.py</code>: <pre><code>import pytest\n\nfrom rapidy import Rapidy\nfrom typing import AsyncGenerator\nfrom aiohttp.test_utils import TestClient, TestServer, BaseTestServer\n\nfrom app.main import create_app\n\n@pytest.fixture(scope='session')\nasync def app() -&gt; Rapidy:\n    return create_app()\n\n@pytest.fixture\nasync def app_server(app: Rapidy) -&gt; AsyncGenerator[BaseTestServer, None]:\n    async with TestServer(app) as server:\n        yield server\n\n@pytest.fixture\nasync def app_client(app_server: BaseTestServer) -&gt; AsyncGenerator[TestClient, None]:\n    async with TestClient(app_server) as client:\n        yield client\n</code></pre></p>"},{"location":"docs/server/testing/#test_hellopy","title":"test_hello.py","text":"<p>Contents of <code>tests/test_hello.py</code>: <pre><code>from aiohttp.test_utils import TestClient\n\nasync def test_hello(app_client: TestClient) -&gt; None:\n    response = await app_client.get('/')\n    text = await response.text()\n\n    assert response.status == 200\n    assert 'Hello, world' == text\n</code></pre></p>"},{"location":"docs/server/testing/#pytestini","title":"pytest.ini","text":"<p>Contents of <code>tests/pytest.ini</code>: <pre><code>[pytest]\nasyncio_mode = auto\n</code></pre></p>"},{"location":"docs/server/testing/#running-tests","title":"Running tests","text":""},{"location":"docs/server/testing/#simple-test-execution","title":"Simple test execution","text":"<p>To run your tests using <code>pytest</code>, execute the command below: <pre><code>pytest ./tests\n</code></pre></p> <p>You can learn more about <code>pytest</code> here</p>"},{"location":"docs/server/testing/#running-tests-with-coverage","title":"Running tests with coverage","text":"<p>To run tests in <code>pytest</code> with code coverage, first install the <code>pytest-cov</code> plugin: <pre><code>pip install pytest-cov\n</code></pre></p> <p>Running tests with coverage output in the console: <pre><code>pytest --cov=app --cov-report=term-missing\n</code></pre></p> <p>Running tests with an HTML coverage report: <pre><code>pytest --cov=app --cov-report=html\n</code></pre></p>"},{"location":"examples/http_caching/","title":"HTTP-caching","text":""},{"location":"examples/http_caching/#introduction","title":"Introduction","text":"<p><code>Rapidy</code> allows efficient HTTP caching using standard headers like <code>ETag</code>, <code>Cache-Control</code>, <code>Last-Modified</code>, and <code>Expires</code>. These headers help browsers and API clients cache content and reduce server load.</p>"},{"location":"examples/http_caching/#using-etag-and-if-none-match","title":"Using <code>ETag</code> and <code>If-None-Match</code>","text":"<p>The <code>ETag</code> header enables the server to identify a unique version of a resource. The client can send the <code>If-None-Match</code> header, allowing the server to check if the resource version has changed since the last request. <pre><code>import hashlib\n\nfrom rapidy import Rapidy\nfrom rapidy.http import Header, HeaderName, HTTPNotModified, Response, get\n\n@get('/')\nasync def handler(\n    response: Response,\n    if_none_match: str | None = Header(None, alias=HeaderName.if_none_match),\n) -&gt; str:\n    content = 'success'  # &lt;-- endpoint dynamic content\n\n    etag_value = hashlib.md5(content.encode()).hexdigest()\n\n    if if_none_match.strip('\"') == etag_value:\n        raise HTTPNotModified\n\n    response.etag = etag_value\n    response.headers[HeaderName.cache_control] = 'public, max-age=3600'\n\n    return content\n\nrapidy = Rapidy(http_route_handlers=[handler])\n</code></pre></p>"},{"location":"examples/http_caching/#using-last-modified-and-if-modified-since","title":"Using <code>Last-Modified</code> and <code>If-Modified-Since</code>","text":"<p>The <code>Last-Modified</code> header specifies the date when a resource was last modified. The client can send the <code>If-Modified-Since</code> header to check whether the resource has been updated since the last request. <pre><code>from datetime import datetime, timezone\nfrom typing import Annotated\n\nfrom pydantic import BeforeValidator\nfrom rapidy import Rapidy\nfrom rapidy.http import Header, HeaderName, HTTPNotModified, Response, get\n\ndef parse_http_date(value: str) -&gt; datetime:\n    return datetime.strptime(value, '%a, %d %b %Y %H:%M:%S GMT').replace(tzinfo=timezone.utc)\n\nIFModifiedSince = Annotated[\n    datetime | None,\n    BeforeValidator(parse_http_date),\n    Header(None, alias=HeaderName.if_modified_since),\n]\n\n@get('/')\nasync def handler(\n    response: Response,\n    if_modified_since: IFModifiedSince,\n) -&gt; str:\n    content = 'success'  # &lt;-- endpoint dynamic content\n\n    last_mod_time = datetime(2024, 2, 24, 12, 0, 0, tzinfo=timezone.utc)\n\n    if if_modified_since and if_modified_since &gt;= last_mod_time:\n        raise HTTPNotModified\n\n    response.last_modified = last_mod_time\n    response.headers[HeaderName.cache_control] = 'public, max-age=3600'\n\n    return content\n\nrapidy = Rapidy(http_route_handlers=[handler])\n</code></pre></p>"},{"location":"examples/http_caching/#using-cache-control","title":"Using <code>Cache-Control</code>","text":"<p>The <code>Cache-Control</code> header manages caching policies and defines how long a resource can be stored in the cache. <pre><code>from rapidy.http import Response, get, HeaderName\n\n@get('/')\nasync def handler(response: Response) -&gt; str:\n    content = 'success'  # &lt;-- endpoint dynamic content\n\n    response.headers[HeaderName.cache_control] = \"public, max-age=600, must-revalidate\"\n\n    return content\n</code></pre></p>"},{"location":"examples/http_caching/#using-expires","title":"Using <code>Expires</code>","text":"<p>The <code>Expires</code> header sets a specific expiration time for the cache. <pre><code>from datetime import datetime, timezone\nfrom rapidy import Rapidy\nfrom rapidy.http import Response, get, HeaderName\n\n@get('/')\nasync def handler(response: Response) -&gt; str:\n    content = 'success'  # &lt;-- endpoint dynamic content\n\n    expire_time = datetime(2024, 3, 1, 0, 0, 0, tzinfo=timezone.utc)\n    response.headers[HeaderName.expires] = expire_time.strftime(\"%a, %d %b %Y %H:%M:%S GMT\")\n\n    return content\n\nrapidy = Rapidy(http_route_handlers=[handler])\n</code></pre></p>"},{"location":"examples/http_caching/#combined-example","title":"Combined Example","text":"<p>This example demonstrates the use of all major caching headers: <pre><code>import hashlib\nfrom datetime import datetime, timezone\nfrom typing import Annotated\n\nfrom pydantic import BeforeValidator\nfrom rapidy import Rapidy\nfrom rapidy.http import Header, HeaderName, HTTPNotModified, Response, get\n\ndef parse_http_date(value: str) -&gt; datetime:\n    return datetime.strptime(value, '%a, %d %b %Y %H:%M:%S GMT').replace(tzinfo=timezone.utc)\n\nIFModifiedSince = Annotated[\n    datetime | None,\n    BeforeValidator(parse_http_date),\n    Header(None, alias='If-Modified-Since'),\n]\nIFNoneMatch = Annotated[\n    str | None,\n    BeforeValidator(lambda x: x.strip('\"')),\n    Header(None, alias='If-None-Match'),\n]\n\n@get('/')\nasync def handler(\n        response: Response,\n        if_modified_since: IFModifiedSince,\n        if_none_match: IFNoneMatch,\n) -&gt; str:\n    content = 'success'  # &lt;-- endpoint dynamic content\n\n    last_mod_time = datetime(2024, 2, 24, 12, 0, 0, tzinfo=timezone.utc)\n    etag_value = hashlib.md5(content.encode()).hexdigest()\n    expire_time = datetime(2024, 3, 1, 0, 0, 0, tzinfo=timezone.utc)\n\n    if if_none_match == etag_value:\n        raise HTTPNotModified\n\n    if if_modified_since and if_modified_since &gt;= last_mod_time:\n        raise HTTPNotModified\n\n    response.etag = etag_value\n    response.last_modified = last_mod_time\n    response.headers[HeaderName.cache_control] = \"public, max-age=3600, must-revalidate\"\n    response.headers[HeaderName.expires] = expire_time.strftime(\"%a, %d %b %Y %H:%M:%S GMT\")\n\n    return content\n\nrapidy = Rapidy(http_route_handlers=[handler])\n</code></pre></p>"},{"location":"examples/http_caching/#conclusion","title":"Conclusion","text":"<p>Using HTTP caching in <code>Rapidy</code> significantly reduces server load, speeds up request processing, and minimizes data transfer. By combining <code>ETag</code>, <code>Cache-Control</code>, <code>Last-Modified</code>, and <code>Expires</code> headers, you can flexibly manage content caching based on your application's requirements.</p>"},{"location":"quickstart/","title":"Quickstart","text":""},{"location":"quickstart/#creating-simple-handlers","title":"Creating Simple Handlers","text":"<p>rAPIdy is based on aiohttp and supports all types of handler definitions. Below, only the main types will be shown.</p> <p>You can check all the available definitions here</p>"},{"location":"quickstart/#functional-handlers","title":"Functional Handlers","text":"<pre><code>from rapidy import Rapidy\nfrom rapidy.http import post\n\n@post('/')\nasync def handler() -&gt; dict[str, str]:\n    return {'hello': 'rapidy'}\n\nrapidy = Rapidy(http_route_handlers=[handler])\n</code></pre> Registration without decorator <pre><code>from rapidy import Rapidy\nfrom rapidy.http import post\n\nasync def handler() -&gt; dict[str, str]:\n    return {'hello': 'rapidy'}\n\nrapidy = Rapidy(\n    http_route_handlers=[\n        post.reg('/', handler),\n    ]\n)\n</code></pre>"},{"location":"quickstart/#class-based-handlers","title":"Class-based Handlers","text":"<pre><code>from rapidy import Rapidy\nfrom rapidy.http import PathParam, controller, get, post, put, patch, delete\n\n@controller('/')\nclass UserController:\n    @get('/{user_id}')\n    async def get_by_id(self, user_id: str = PathParam()) -&gt; dict[str, str]:\n        return {'user_id': user_id}\n\n    @get()\n    async def get_all_users(self) -&gt; list[dict[str, str]]:\n        return [{'name': 'John'}, {'name': 'Felix'}]\n\n    @post()\n    async def create_user(self) -&gt; str:\n        return 'ok'\n\n    @put()\n    async def update_user(self) -&gt; str:\n        return 'ok'\n\n    @patch()\n    async def patch_user(self) -&gt; str:\n        return 'ok'\n\n    @delete()\n    async def delete_user(self) -&gt; str:\n        return 'ok'\n\nrapidy = Rapidy(http_route_handlers=[UserController])\n</code></pre> Registration without decorator <pre><code>from rapidy import Rapidy\nfrom rapidy.http import PathParam, controller, get\n\nclass UserController:\n    @get('/{user_id}')\n    async def get_by_id(self, user_id: str = PathParam()) -&gt; dict[str, str]:\n        return {'user_id': user_id}\n\n    @get()\n    async def get_all_users(self) -&gt; list[dict[str, str]]:\n        return [{'name': 'John'}, {'name': 'Felix'}]\n\nrapidy = Rapidy(\n    http_route_handlers=[\n        controller.reg('/', UserController),\n    ]\n)\n</code></pre>"},{"location":"quickstart/#middleware","title":"Middleware","text":"<p>Middleware are intermediate components that handle requests and responses at the web framework level.</p> <p>They allow performing additional actions before and/or after the request is processed by the main handler.</p> <pre><code>from rapidy import Rapidy\nfrom rapidy.http import Request, StreamResponse, get, middleware\nfrom rapidy.typedefs import CallNext\n\n@middleware\nasync def hello_middleware(request: Request, call_next: CallNext) -&gt; StreamResponse:\n    request['data'] = {'hello': 'rapidy'}\n    return await call_next(request)\n\n@get('/')\nasync def handler(request: Request) -&gt; dict[str, str]:\n    return request['data']\n\nrapidy = Rapidy(\n    http_route_handlers=[handler],\n    middlewares=[hello_middleware],\n)\n</code></pre> <p>Note</p> <p>In the middleware handler, the first argument should always be the Request, and the second \u2014 call_next.</p>"},{"location":"quickstart/#httproute","title":"HTTPRoute","text":"<p><code>HTTPRoute</code> allows you to register groups of handlers and plays a key role in routing, helping to direct requests to the appropriate handlers based on the HTTP method, path, parameters, and other conditions.</p> <p><code>HTTPRoute</code> is registered in exactly the same way as any HTTP handler.</p> <pre><code>from rapidy import Rapidy\nfrom rapidy.http import HTTPRouter, controller, get\n\n@get('/hello')\nasync def hello_handler() -&gt; dict[str, str]:\n    return {'hello': 'rapidy'}\n\n@controller('/hello_controller')\nclass HelloController:\n    @get()\n    async def get_hello(self) -&gt; dict[str, str]:\n        return {'hello': 'rapidy'}\n\napi_router = HTTPRouter('/api', [hello_handler, HelloController])\n\nrapidy = Rapidy(http_route_handlers=[api_router])\n</code></pre> Registering handlers in the router without a decorator <pre><code>from rapidy import Rapidy\nfrom rapidy.http import HTTPRouter, controller, get\n\nasync def hello_handler() -&gt; dict[str, str]:\n    return {'hello': 'rapidy'}\n\nclass HelloController:\n    @get()\n    async def get_hello(self) -&gt; dict[str, str]:\n        return {'hello': 'rapidy'}\n\napi_router = HTTPRouter(\n    '/api',\n    [\n        get.reg('/hello', hello_handler),\n        controller.reg('/hello_controller', HelloController),\n    ]\n)\n\nrapidy = Rapidy(http_route_handlers=[api_router])\n</code></pre> Full example of registering a router and handlers <pre><code>from rapidy import Rapidy\nfrom rapidy.http import controller, get, HTTPRouter\n\n@get('/hello')\nasync def hello_handler() -&gt; dict[str, str]:\n    return {'hello': 'rapidy'}\n\n@controller('/hello_controller')\nclass HelloController:\n    @get()\n    async def get(self) -&gt; dict[str, str]:\n        return {'hello': 'rapidy'}\n\n@get('/hi')\nasync def hi_handler() -&gt; dict[str, str]:\n    return {'hi': 'rapidy'}\n\n@controller('/hi_controller')\nclass HiController:\n    @get()\n    async def get(self) -&gt; dict[str, str]:\n        return {'hi': 'rapidy'}\n\nhello_api_router = HTTPRouter('/hello_api', [hello_handler, HelloController])\n\nrapidy = Rapidy(\n    http_route_handlers=[\n        hello_api_router,\n        hi_handler,\n        HiController,\n    ]\n)\n</code></pre>"},{"location":"quickstart/#simple-validation-example","title":"Simple Validation Example","text":"<pre><code>from pydantic import BaseModel\nfrom rapidy import Rapidy\nfrom rapidy.http import Body, Request, Header, StreamResponse, middleware, post\nfrom rapidy.typedefs import CallNext\n\nTOKEN_REGEXP = '^[Bb]earer (?P&lt;token&gt;[A-Za-z0-9-_=.]*)'\n\nclass RequestBody(BaseModel):\n    username: str\n    password: str\n\nclass ResponseBody(BaseModel):\n    hello: str = 'rapidy'\n\n@middleware\nasync def get_bearer_middleware(\n        request: Request,\n        call_next: CallNext,\n        bearer_token: str = Header(alias='Authorization', pattern=TOKEN_REGEXP),\n) -&gt; StreamResponse:\n    # process token here ...\n    return await call_next(request)\n\n@post('/')\nasync def handler(body: RequestBody = Body()) -&gt; ResponseBody:\n    return ResponseBody()\n\napp = Rapidy(middlewares=[get_bearer_middleware], http_route_handlers=[handler])\n</code></pre>"},{"location":"quickstart/#running-the-web-server","title":"Running the Web Server","text":""},{"location":"quickstart/#simple-start","title":"Simple Start","text":"<p>Copy the code into the <code>main.py</code> file. <pre><code>from rapidy import Rapidy, run_app\nfrom rapidy.http import post\n\n@post('/')\nasync def handler() -&gt; dict[str, str]:\n    return {'hello': 'rapidy'}\n\nrapidy = Rapidy()\nrapidy.add_http_router(handler)\n\nif __name__ == '__main__':\n    run_app(rapidy)\n</code></pre></p> <p>Run the server in real-time mode: <pre><code>python3 main.py\n</code></pre></p> <p>You can also specify various startup parameters, such as <code>host</code> or <code>port</code>.</p> <pre><code>run_app(app, host='0.0.0.0', port=8080)\n</code></pre>"},{"location":"quickstart/#wsgi-start-gunicorn","title":"WSGI Start (Gunicorn)","text":"<p>Gunicorn is a Python WSGI HTTP server for UNIX.</p> What is WSGI <p>WSGI (Web Server Gateway Interface) is a simple and universal interface between the Web server and the Web application, first described in PEP-333.</p> <p>More about gunicorn.org</p> <p>Add Gunicorn to your project:</p> <pre><code>pip install gunicorn\n</code></pre> <p>Copy the code into the <code>main.py</code> file. <pre><code>from rapidy import Rapidy\nfrom rapidy.http import post\n\n@post('/')\nasync def handler() -&gt; dict[str, str]:\n    return {'hello': 'rapidy'}\n\nrapidy = Rapidy()\nrapidy.add_http_router(handler)\n</code></pre></p> <p>Run the command in the terminal: <pre><code>gunicorn main:rapidy --bind localhost:8080 --reload --worker-class aiohttp.GunicornWebWorker\n</code></pre></p> <p>The <code>gunicorn main:rapidy</code> command accesses:</p> <ul> <li><code>main</code>: the <code>main.py</code> file (Python module).</li> <li><code>rapidy</code>: an object created inside the <code>main.py</code> file in line <code>rapidy = Rapidy()</code>.</li> <li><code>--reload</code>: restarts the server after the code is modified. Use only for development.</li> </ul>"},{"location":"why/","title":"Why Rapidy?","text":"<p>Rapidy is not just another framework. It is a lightweight, fast, and powerful tool for building server applications, combining flexibility, performance, and ease of use.</p> <p>\u26a1 Asynchronous, fast, and convenient \u2014 everything you need for modern API development.</p>"},{"location":"why/#why-is-rapidy-better-than-others","title":"Why is Rapidy better than others?","text":"Framework Asynchronous Performance Simplicity Auto API documentation Validation &amp; serialization in middleware Unified body parsing interface Flexible routing Client &amp; Server Native Python types Lifecycle control Fast validation &amp; serialization rAPIdy \u2705 High (Aiohttp) \u2705 Simple \u274c (coming soon) \u2705 \u2705 \u2705 \u2705 (aiohttp client) \u2705 \u2705 \u2705 High FastAPI \u2705 Very high (Starlette) \u2705 Simple \u2705 \u274c \u274c \ud83d\udfe1 (class-based handler limits) \u274c (server only) \u2705 \u2705 \u2705 High Litestar \u2705 Very high \u2705 Simple \u2705 \u274c \u2705 \u2705 \u274c (server only) \u2705 \u2705 \ud83d\ude80 Very high (msgspec) Aiohttp \u2705 High \ud83d\udfe1 Medium \u274c \u274c \u274c \ud83d\udfe1 (class-based handler limits) \u2705 \u274c \ud83d\udfe1 \u274c No Flask \ud83d\udfe1 (ver &gt;= 2.0) Moderate \u2705 Simple \ud83d\udfe1 (via extensions) \u274c \u274c \ud83d\udfe1 (limited routing) \u274c (server only) \u274c \u274c \u274c No Django \ud83d\udfe1 (ver &gt;= 3.1) Low \u2705 Simple \ud83d\udfe1 (via extensions) \u274c \u274c \u2705 \u274c (server only) \u274c \u274c \ud83d\udc0c Low (slow serializers)"},{"location":"why/#reasons-to-choose-rapidy","title":"Reasons to Choose Rapidy","text":"<p>\u2705 Powerful Asynchronous Support with Aiohttp \u2014 Use async/await at all levels of request handling.</p> <p>\u2705 Flexibility &amp; Versatility \u2014 Supports both client and server (FastAPI and Litestar do not). \u2014 More flexible routing than FastAPI and Aiohttp.</p> <p>\u2705 Clean &amp; User-Friendly API \u2014 Parses <code>body</code> uniformly for all request types. \u2014 Fully compatible with Python types (similar to FastAPI and Litestar).</p> <p>\u2705 High Performance \u2014 Runs faster than Flask and Django. \u2014 Validation and serialization on par with FastAPI.</p> <p>\u2705 Simplicity Without Losing Power \u2014 Easy to write and maintain code.</p> <p>\u2705 Framework Architecture \u2014 Rapidy\u2019s source code is fully documented, ensuring transparency and ease of maintenance. \u2014 The framework\u2019s codebase follows a modular structure, allowing for high scalability and easier integration of new features.</p>"},{"location":"why/#whats-next","title":"What's Next?","text":"<p>Rapidy is just getting started, and even more great features are coming:</p> <p>\ud83d\udd39 Automatic OpenAPI generation (already in development!) \ud83d\udd39 HTTP client with full Pydantic support \ud83d\udd39 Full-fledged GRPC</p> <p>\u26a1 We are shaping the future of web development! Subscribe for updates and be among the first to experience the new Rapidy features.</p>"},{"location":"why/#conclusion-rapidy-flexibility-speed-and-convenience","title":"Conclusion: Rapidy \u2014 flexibility, speed, and convenience.","text":"<p>Try it today and see for yourself! \ud83d\ude80</p>"},{"location":"ru/","title":"Index","text":""},{"location":"ru/home/","title":"rAPIdy","text":"<p> rAPIdy -         \u0431\u044b\u0441\u0442\u0440\u044b\u0439, \u043b\u0435\u0433\u043a\u043e\u0432\u0435\u0441\u043d\u044b\u0439 \u0438 \u0441\u043e\u0432\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0439 \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u044b\u0439 \u0432\u0435\u0431-\u0444\u0440\u0435\u0439\u043c\u0432\u043e\u0440\u043a,         \u043f\u043e\u0441\u0442\u0440\u043e\u0435\u043d\u043d\u044b\u0439 \u043d\u0430 \u043e\u0441\u043d\u043e\u0432\u0435         aiohttp         \u0438         pydantic.      </p>"},{"location":"ru/home/#rapidy","title":"\ud83d\ude80 \u041f\u043e\u0447\u0435\u043c\u0443 rAPIdy?","text":"<p>rAPIdy \u0441\u043e\u0437\u0434\u0430\u043d \u0434\u043b\u044f \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u043e\u0432, \u043a\u043e\u0442\u043e\u0440\u044b\u043c \u043d\u0443\u0436\u0435\u043d \u0431\u044b\u0441\u0442\u0440\u044b\u0439, \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u044b\u0439 \u0432\u0435\u0431-\u0444\u0440\u0435\u0439\u043c\u0432\u043e\u0440\u043a, \u0441\u043e\u0447\u0435\u0442\u0430\u044e\u0449\u0438\u0439 \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c aiohttp \u0441 \u043f\u0440\u043e\u0441\u0442\u043e\u0442\u043e\u0439 \u0438 \u0441\u043e\u0432\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u043c\u0438 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044f\u043c\u0438 \u0442\u0430\u043a\u0438\u0445 \u0444\u0440\u0435\u0439\u043c\u0432\u043e\u0440\u043a\u043e\u0432, \u043a\u0430\u043a FastAPI.</p> <p>\u041f\u0440\u043e\u0441\u0442\u043e\u0439 \u0441\u0435\u0440\u0432\u0435\u0440 \u043d\u0430 rAPIdy: <pre><code>from rapidy import Rapidy\nfrom rapidy.http import get\n\n@get(\"/\")\nasync def hello() -&gt; dict[str, str]:\n    return {\"message\": \"Hello, rAPIdy!\"}\n\napp = Rapidy(http_route_handlers=[hello])\n</code></pre></p>"},{"location":"ru/home/#_1","title":"\ud83d\udd25 \u041a\u043b\u044e\u0447\u0435\u0432\u044b\u0435 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u0438","text":"<ul> <li>\u0411\u044b\u0441\u0442\u0440\u044b\u0439 \u0438 \u043b\u0435\u0433\u043a\u043e\u0432\u0435\u0441\u043d\u044b\u0439 \u2013 \u043c\u0438\u043d\u0438\u043c\u0430\u043b\u044c\u043d\u044b\u0435 \u043d\u0430\u043a\u043b\u0430\u0434\u043d\u044b\u0435 \u0440\u0430\u0441\u0445\u043e\u0434\u044b, \u043f\u043e\u0441\u0442\u0440\u043e\u0435\u043d \u043d\u0430 aiohttp</li> <li>\u0410\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u044b\u0439 \u2013 \u043f\u043e\u043b\u043d\u043e\u0441\u0442\u044c\u044e \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u044b\u0439 \u043f\u043e \u0441\u0432\u043e\u0435\u0439 \u0441\u0443\u0442\u0438</li> <li>\u0412\u0441\u0442\u0440\u043e\u0435\u043d\u043d\u0430\u044f \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u044f \u2013 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442 pydantic \u0434\u043b\u044f \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u0438 \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432</li> <li>\u041f\u0440\u043e\u0441\u0442\u043e\u0439 \u0438 \u0433\u0438\u0431\u043a\u0438\u0439 \u2013 \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u0435\u0442 \u043a\u0430\u043a rAPIdy-\u0441\u0442\u0438\u043b\u044c \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u043e\u0432, \u0442\u0430\u043a \u0438 \u0442\u0440\u0430\u0434\u0438\u0446\u0438\u043e\u043d\u043d\u044b\u0435 \u043c\u0430\u0440\u0448\u0440\u0443\u0442\u044b aiohttp \u043d\u0430 \u0444\u0443\u043d\u043a\u0446\u0438\u044f\u0445 \u0438 \u043a\u043b\u0430\u0441\u0441\u0430\u0445</li> <li>\u041f\u043e\u0434\u0434\u0435\u0440\u0436\u043a\u0430 middleware \u2013 \u043b\u0435\u0433\u043a\u043e \u0440\u0430\u0441\u0448\u0438\u0440\u044f\u0439\u0442\u0435 \u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u043e\u0441\u0442\u044c \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e middleware, \u0432\u043a\u043b\u044e\u0447\u0430\u044f \u0432\u0441\u0442\u0440\u043e\u0435\u043d\u043d\u0443\u044e \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u044e HTTP-\u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u0432 (\u0437\u0430\u0433\u043e\u043b\u043e\u0432\u043a\u0438, \u043a\u0443\u043a\u0438, \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u043f\u0443\u0442\u0438, \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u0437\u0430\u043f\u0440\u043e\u0441\u0430 \u0438 \u0442\u0435\u043b\u043e \u0437\u0430\u043f\u0440\u043e\u0441\u0430).</li> </ul>"},{"location":"ru/home/#_2","title":"\ud83d\udce6 \u0423\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0430 \u0438 \u043d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0430","text":"<p>\u0423\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u0435 rAPIdy \u0447\u0435\u0440\u0435\u0437 pip: <pre><code>pip install rapidy\n</code></pre></p>"},{"location":"ru/home/#_3","title":"\ud83c\udfc1 \u041f\u0440\u043e\u0441\u0442\u043e\u0439 \u0441\u0435\u0440\u0432\u0435\u0440","text":"<pre><code>from rapidy import Rapidy\nfrom rapidy.http import post, PathParam, Header, Body\n\nfrom pydantic import BaseModel, Field\n\nclass BodyRequestSchema(BaseModel):\n    username: str = Field(min_length=3, max_length=20)\n    password: str = Field(min_length=8, max_length=40)\n\n@post('/{user_id}')\nasync def handler(\n        user_id: str = PathParam(),\n        host: str = Header(alias='Host'),\n        body: BodyRequestSchema = Body(),\n) -&gt; dict[str, str]:\n    return {'hello': 'rapidy'}\n\nrapidy = Rapidy(\n    http_route_handlers=[handler],\n)\n</code></pre> <p>\u0423\u0441\u043f\u0435\u0448\u043d\u0430\u044f \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u044f \u0437\u0430\u043f\u0440\u043e\u0441\u0430 <pre><code>curl -X POST \\\n-H \"Content-Type: application/json\" -d '{\"username\": \"User\", \"password\": \"myAwesomePass\"}' -v \\\nhttp://127.0.0.1:8080/111\n</code></pre> <pre><code>&lt; HTTP/1.1 200 OK ... {\"data\": \"success\"}\n</code></pre></p> <p>\u041e\u0448\u0438\u0431\u043a\u0430 \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u0438 \u0437\u0430\u043f\u0440\u043e\u0441\u0430 <pre><code>curl -X POST \\\n-H \"Content-Type: application/json\" -d '{\"username\": \"U\", \"password\": \"m\"}' -v \\\nhttp://127.0.0.1:8080/111\n</code></pre> <pre><code>&lt; HTTP/1.1 422 Unprocessable Entity ...\n{\n    \"errors\": [\n        {\n            \"loc\": [\"body\", \"username\"],\n            \"type\": \"string_too_short\",\n            \"msg\": \"String must contain at least 3 characters,\n            \"ctx\": {\"min_length\": 3}\n        },\n        {\n            \"type\": \"string_too_short\",\n            \"loc\": [\"body\", \"password\"],\n            \"msg\": \"String must contain at least 8 characters\",\n            \"ctx\": {\"min_length\": 8}\n        }\n    ]\n}\n</code></pre></p> <p>\u0411\u044b\u0441\u0442\u0440\u044b\u0439 \u0441\u0442\u0430\u0440\u0442 Quickstart</p>"},{"location":"ru/about/","title":"\u041e \u043a\u043e\u043c\u043f\u0430\u043d\u0438\u0438","text":"<p>\u0414\u043e\u0431\u0440\u043e \u043f\u043e\u0436\u0430\u043b\u043e\u0432\u0430\u0442\u044c \u0432 \u0440\u0430\u0437\u0434\u0435\u043b \u00ab\u041e \u043a\u043e\u043c\u043f\u0430\u043d\u0438\u0438\u00bb! \u0417\u0434\u0435\u0441\u044c \u0432\u044b \u043d\u0430\u0439\u0434\u0435\u0442\u0435 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e\u0431 \u043e\u0440\u0433\u0430\u043d\u0438\u0437\u0430\u0446\u0438\u0438 Rapidy.</p>"},{"location":"ru/about/#_2","title":"\u041e \u043f\u0440\u043e\u0435\u043a\u0442\u0435","text":""},{"location":"ru/about/#_3","title":"\u0412\u043b\u0430\u0434\u0435\u043b\u0435\u0446","text":"<p>\u041c\u0435\u043d\u044f \u0437\u043e\u0432\u0443\u0442 Daniil Grois @daniil-grois, \u0438 \u044f \u044f\u0432\u043b\u044f\u044e\u0441\u044c \u0441\u043e\u0437\u0434\u0430\u0442\u0435\u043b\u0435\u043c, \u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0435\u043c \u0438 \u0432\u0435\u0434\u0443\u0449\u0438\u043c \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u043e\u043c Rapidy.</p> <p>\u0411\u043b\u0430\u0433\u043e\u0434\u0430\u0440\u044e \u0432\u0430\u0441 \u0437\u0430 \u0438\u043d\u0442\u0435\u0440\u0435\u0441 \u043a \u043f\u0440\u043e\u0435\u043a\u0442\u0443! \u041d\u0430\u0434\u0435\u044e\u0441\u044c, Rapidy \u043f\u043e\u043c\u043e\u0436\u0435\u0442 \u0432\u0430\u043c \u0432 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0438 \u0441\u043e\u0431\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u0445 \u0440\u0435\u0448\u0435\u043d\u0438\u0439.</p> <p>\u0411\u0443\u0434\u0443 \u0440\u0430\u0434 \u0432\u0430\u0448\u0438\u043c \u043f\u0440\u0435\u0434\u043b\u043e\u0436\u0435\u043d\u0438\u044f\u043c \u0438 \u0434\u043e\u0440\u0430\u0431\u043e\u0442\u043a\u0430\u043c \u2014 \u043e\u0442\u043a\u0440\u044b\u0432\u0430\u0439\u0442\u0435 Pull Requests, \u0438 \u044f \u0441\u0434\u0435\u043b\u0430\u044e \u0432\u0441\u0435 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0435, \u0447\u0442\u043e\u0431\u044b \u0432\u0430\u0448\u0438 \u0438\u0434\u0435\u0438 \u0441\u0442\u0430\u043b\u0438 \u0447\u0430\u0441\u0442\u044c\u044e Rapidy.</p> <p>\u0414\u0430\u0432\u0430\u0439\u0442\u0435 \u0432\u043c\u0435\u0441\u0442\u0435 \u0434\u0435\u043b\u0430\u0442\u044c \u043c\u0438\u0440 \u043b\u0443\u0447\u0448\u0435! \ud83d\ude80</p>"},{"location":"ru/about/#_4","title":"\u041f\u043e\u0434\u0434\u0435\u0440\u0436\u043a\u0430 \u0438 \u0440\u0430\u0437\u0432\u0438\u0442\u0438\u0435","text":"<p>\u0422\u0435\u043a\u0443\u0449\u0438\u0439 \u0441\u043e\u0441\u0442\u0430\u0432 \u0440\u0443\u043a\u043e\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u0435\u0439 \u043f\u0440\u043e\u0435\u043a\u0442\u0430 Rapidy:</p> <ul> <li>Daniil Grois - @daniil-grois</li> <li>Lev Zaplatin - @LevZaplatin</li> <li>Nikita Tolstoy - @Nikita-Tolstoy</li> </ul> <p>\u0420\u0443\u043a\u043e\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u0438 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u044e\u0442 \u0441\u0442\u0440\u0430\u0442\u0435\u0433\u0438\u044e \u0440\u0430\u0437\u0432\u0438\u0442\u0438\u044f, \u043f\u0440\u0438\u043e\u0440\u0438\u0442\u0435\u0442\u044b \u0434\u043e\u0440\u0430\u0431\u043e\u0442\u043e\u043a \u0438 \u0444\u043e\u0440\u043c\u0438\u0440\u0443\u044e\u0442 roadmap \u043f\u0440\u043e\u0435\u043a\u0442\u0430.</p>"},{"location":"ru/about/#_5","title":"\u041d\u0443\u043c\u0435\u0440\u0430\u0446\u0438\u044f \u0432\u0435\u0440\u0441\u0438\u0439","text":"<p>Rapidy \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u0435\u0442 Semantic Versioning standard.</p> <pre><code>\u0424\u043e\u0440\u043c\u0430\u0442 \u0432\u0435\u0440\u0441\u0438\u0438: MAJOR.MINOR.PATCH\n\nMAJOR \u2013 \u0443\u0432\u0435\u043b\u0438\u0447\u0435\u043d\u0438\u0435 \u043f\u0440\u0438 \u043d\u0435\u0441\u043e\u0432\u043c\u0435\u0441\u0442\u0438\u043c\u044b\u0445 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f\u0445 API\nMINOR \u2013 \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u043d\u043e\u0432\u044b\u0445 \u0444\u0443\u043d\u043a\u0446\u0438\u0439, \u0441\u043e\u0432\u043c\u0435\u0441\u0442\u0438\u043c\u044b\u0445 \u0441 \u043f\u0440\u0435\u0434\u044b\u0434\u0443\u0449\u0438\u043c\u0438 \u0432\u0435\u0440\u0441\u0438\u044f\u043c\u0438\nPATCH \u2013 \u0438\u0441\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u043e\u0448\u0438\u0431\u043e\u043a \u0431\u0435\u0437 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f API\n\u0414\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u043c\u0435\u0442\u043a\u0438 \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u044b \u0434\u043b\u044f \u043f\u0440\u0435\u0434\u0440\u0435\u043b\u0438\u0437\u043d\u044b\u0445 \u0438 \u0441\u0431\u043e\u0440\u043e\u0447\u043d\u044b\u0445 \u0432\u0435\u0440\u0441\u0438\u0439.\n</code></pre>"},{"location":"ru/about/#_6","title":"\u041a\u0430\u043a \u0432\u043d\u0435\u0441\u0442\u0438 \u0432\u043a\u043b\u0430\u0434","text":"<p>\u0425\u043e\u0442\u0438\u0442\u0435 \u043f\u043e\u043c\u043e\u0447\u044c Rapidy \u0441\u0442\u0430\u0442\u044c \u043b\u0443\u0447\u0448\u0435? \u0412\u043e\u0442 \u043a\u0430\u043a \u0432\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u044d\u0442\u043e \u0441\u0434\u0435\u043b\u0430\u0442\u044c!</p>"},{"location":"ru/about/#_7","title":"\u0420\u0430\u0431\u043e\u0447\u0438\u0439 \u043f\u0440\u043e\u0446\u0435\u0441\u0441","text":"<ol> <li>\u0412\u044b\u043f\u043e\u043b\u043d\u0438\u0442\u0435 fork \u0440\u0435\u043f\u043e\u0437\u0438\u0442\u043e\u0440\u0438\u044f Rapidy.</li> <li>\u0421\u043a\u043b\u043e\u043d\u0438\u0440\u0443\u0439\u0442\u0435 \u0432\u0430\u0448 fork \u043b\u043e\u043a\u0430\u043b\u044c\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044f <code>git</code>.    <pre><code>git clone https://github.com/your-username/rapidy.git\n</code></pre></li> <li>(\u041e\u043f\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u043e) \u0423\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u0435 Poetry, \u0435\u0441\u043b\u0438 \u043e\u043d \u0435\u0449\u0451 \u043d\u0435 \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u043b\u0435\u043d:     <pre><code>pipx install poetry\n</code></pre>     \u041f\u043e\u0434\u0440\u043e\u0431\u043d\u0435\u0435 \u043e\u0431 \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0435 \u0447\u0438\u0442\u0430\u0439\u0442\u0435 \u0432 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u0438 Poetry.</li> <li>\u041f\u0435\u0440\u0435\u0439\u0434\u0438\u0442\u0435 \u0432 \u043f\u0430\u043f\u043a\u0443 \u0440\u0435\u043f\u043e\u0437\u0438\u0442\u043e\u0440\u0438\u044f.</li> <li>\u041d\u0430\u0441\u0442\u0440\u043e\u0439\u0442\u0435 \u043e\u043a\u0440\u0443\u0436\u0435\u043d\u0438\u0435:     <pre><code>poetry env use python3.9\n</code></pre></li> <li>\u0423\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u0435 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0438:     <pre><code>poetry install --with dev,test,docs\n</code></pre></li> <li>\u0423\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u0435 pre-commit \u0445\u0443\u043a\u0438:     <pre><code>pre-commit install\n</code></pre></li> <li>\u0410\u043a\u0442\u0438\u0432\u0438\u0440\u0443\u0439\u0442\u0435 \u0432\u0438\u0440\u0442\u0443\u0430\u043b\u044c\u043d\u043e\u0435 \u043e\u043a\u0440\u0443\u0436\u0435\u043d\u0438\u0435:    <pre><code>poetry shell\n</code></pre></li> <li>\u0417\u0430\u043f\u0443\u0441\u0442\u0438\u0442\u0435 \u0442\u0435\u0441\u0442\u044b, \u0447\u0442\u043e\u0431\u044b \u0443\u0431\u0435\u0434\u0438\u0442\u0441\u044f, \u0447\u0442\u043e \u0432\u0441\u0435 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0438 \u0431\u044b\u043b\u0438 \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u043b\u0435\u043d\u044b:    <pre><code>pytest\n</code></pre></li> <li>\u0421\u043e\u0437\u0434\u0430\u0439\u0442\u0435 \u043d\u043e\u0432\u0443\u044e \u0432\u0435\u0442\u043a\u0443. \u0412\u0441\u0435 \u0432\u0435\u0442\u043a\u0438 \u0434\u043e\u043b\u0436\u043d\u044b \u043d\u0430\u0447\u0438\u043d\u0430\u0442\u044c\u0441\u044f \u0441 \u043f\u0440\u0435\u0444\u0438\u043a\u0441\u0430 <code>&lt;\u043f\u0440\u0435\u0444\u0438\u043a\u0441&gt;/</code>, \u043e\u0431\u043e\u0437\u043d\u0430\u0447\u0430\u044e\u0449\u0435\u0433\u043e \u0433\u0440\u0443\u043f\u043f\u0443 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0439. \u041d\u0430\u043f\u0440\u0438\u043c\u0435\u0440: <code>bug/fix-any</code> / <code>feature/my-awesome-feature</code>.</li> <li>\u0412\u043d\u0435\u0441\u0438\u0442\u0435 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f \u0432 \u043a\u043e\u0434.</li> <li>\u041d\u0430\u043f\u0438\u0448\u0438\u0442\u0435 \u0442\u0435\u0441\u0442\u044b \u0434\u043b\u044f \u043d\u043e\u0432\u044b\u0445 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0439.</li> <li>\u0417\u0430\u043f\u0443\u0441\u0442\u0438\u0442\u0435 \u043b\u0438\u043d\u0442\u0435\u0440\u044b \u0438 \u0444\u043e\u0440\u043c\u0430\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u043a\u043e\u0434\u0430.    <pre><code>pre-commit run --all-files\n</code></pre></li> <li>\u0421\u0434\u0435\u043b\u0430\u0439\u0442\u0435 \u043a\u043e\u043c\u043c\u0438\u0442 \u0432 \u0444\u043e\u0440\u043c\u0430\u0442\u0435 <code>&lt;\u043d\u043e\u043c\u0435\u0440 \u0432\u0435\u0442\u043a\u0438&gt;: &lt;\u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0435&gt;</code>:    <pre><code>git commit -m \"&lt;\u043d\u043e\u043c\u0435\u0440 \u0432\u0435\u0442\u043a\u0438&gt;: &lt;\u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0435&gt;\"\n</code></pre></li> <li>\u041e\u0442\u043f\u0440\u0430\u0432\u044c\u0442\u0435 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f \u0432 \u0432\u0430\u0448 <code>fork</code>:    <pre><code>git push\n</code></pre></li> <li>\u041e\u0442\u043a\u0440\u043e\u0439\u0442\u0435 Pull Request \u0437\u0434\u0435\u0441\u044c, \u0434\u043e\u0431\u0430\u0432\u0438\u0432 \u043f\u043e\u043d\u044f\u0442\u043d\u043e\u0435 \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0439 \u0432 \u0444\u043e\u0440\u043c\u0430\u0442\u0435 <code>&lt;\u043d\u043e\u043c\u0435\u0440 \u0432\u0435\u0442\u043a\u0438&gt;: &lt;\u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0437\u0430\u043f\u0440\u043e\u0441\u0430&gt;</code>.</li> </ol>"},{"location":"ru/about/#code-style","title":"Code style","text":"<ol> <li>\u041a\u043e\u0434 \u0434\u043e\u043b\u0436\u0435\u043d \u0431\u044b\u0442\u044c \u043f\u043e\u043b\u043d\u043e\u0441\u0442\u044c\u044e \u0442\u0438\u043f\u0438\u0437\u0438\u0440\u043e\u0432\u0430\u043d.</li> <li>\u0412\u0441\u0435 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f \u0434\u043e\u043b\u0436\u043d\u044b \u0441\u043e\u043f\u0440\u043e\u0432\u043e\u0436\u0434\u0430\u0442\u044c\u0441\u044f \u0442\u0435\u0441\u0442\u0430\u043c\u0438.</li> <li>\u041a\u043e\u0434 \u0434\u043e\u043b\u0436\u0435\u043d \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u043e\u0432\u0430\u0442\u044c PEP 8.</li> <li>\u041e\u0431\u0440\u0430\u0442\u043d\u0430\u044f \u0441\u043e\u0432\u043c\u0435\u0441\u0442\u0438\u043c\u043e\u0441\u0442\u044c \u0434\u043e\u043b\u0436\u043d\u0430 \u0441\u043e\u0445\u0440\u0430\u043d\u044f\u0442\u044c\u0441\u044f, \u0435\u0441\u043b\u0438 \u044d\u0442\u043e \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e.</li> <li>\u0412\u043d\u0435\u0441\u0438\u0442\u0435 \u0441\u0435\u0431\u044f \u0432 <code>CONTRIBUTORS.md</code>.</li> <li>\u0412\u043d\u0435\u0441\u0438\u0442\u0435 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f \u0432 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u044e (\u043f\u0440\u0438 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e\u0441\u0442\u0438).</li> </ol>"},{"location":"ru/about/#discussion-links","title":"Discussion links","text":"<ul> <li>telegram (en)</li> </ul>"},{"location":"ru/aiohttp_migration/","title":"\u041c\u0438\u0433\u0440\u0430\u0446\u0438\u044f \u043d\u0430 Rapidy \u0441 aiohttp","text":""},{"location":"ru/aiohttp_migration/#_1","title":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435","text":"<p><code>rapidy</code> \u0430\u043a\u043a\u0443\u0440\u0430\u0442\u043d\u043e \u0440\u0430\u0441\u0448\u0438\u0440\u044f\u0435\u0442 <code>aiohttp</code>, \u0447\u0442\u043e \u043e\u0437\u043d\u0430\u0447\u0430\u0435\u0442: \u0432\u0435\u0441\u044c \u043a\u043e\u0434, \u043d\u0430\u043f\u0438\u0441\u0430\u043d\u043d\u044b\u0439 \u043d\u0430 <code>aiohttp</code>, \u0431\u0443\u0434\u0435\u0442 \u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c \u0431\u0435\u0437 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0439.</p> <p><code>rapidy</code> \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442 \u0442\u0435 \u0436\u0435 \u0438\u043c\u0435\u043d\u0430 \u043c\u043e\u0434\u0443\u043b\u0435\u0439, \u0447\u0442\u043e \u0438 <code>aiohttp</code>.</p> <p>\u0415\u0441\u043b\u0438 \u043d\u0443\u0436\u043d\u043e\u0433\u043e \u043e\u0431\u044a\u0435\u043a\u0442\u0430 \u043d\u0435\u0442 \u0432 <code>rapidy</code>, \u0435\u0433\u043e \u043c\u043e\u0436\u043d\u043e \u0438\u043c\u043f\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u043d\u0430\u043f\u0440\u044f\u043c\u0443\u044e \u0438\u0437 <code>aiohttp</code>.</p>"},{"location":"ru/aiohttp_migration/#aiohttp-rapidy","title":"\u041f\u0440\u043e\u0431\u043b\u0435\u043c\u044b <code>aiohttp</code> \u0438 \u0438\u0445 \u0440\u0435\u0448\u0435\u043d\u0438\u044f \u0432 <code>Rapidy</code>","text":"<p>\u0424\u0440\u0435\u0439\u043c\u0432\u043e\u0440\u043a <code>aiohttp</code> \u0438\u043c\u0435\u0435\u0442 \u0440\u044f\u0434 \u043e\u0441\u043e\u0431\u0435\u043d\u043d\u043e\u0441\u0442\u0435\u0439 \u0438 \u043e\u0433\u0440\u0430\u043d\u0438\u0447\u0435\u043d\u0438\u0439, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 <code>Rapidy</code> \u0440\u0435\u0448\u0430\u0435\u0442 \u0431\u043e\u043b\u0435\u0435 \u0443\u0434\u043e\u0431\u043d\u044b\u043c \u0438 \u044d\u043b\u0435\u0433\u0430\u043d\u0442\u043d\u044b\u043c \u0441\u043f\u043e\u0441\u043e\u0431\u043e\u043c.</p>"},{"location":"ru/aiohttp_migration/#request","title":"\u0423\u043f\u0440\u043e\u0449\u0435\u043d\u0438\u0435 \u0440\u0430\u0431\u043e\u0442\u044b \u0441 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u043c <code>request</code>","text":"<p>\u0412 <code>aiohttp</code> \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u0438 \u043c\u0430\u0440\u0448\u0440\u0443\u0442\u043e\u0432 \u0442\u0440\u0435\u0431\u0443\u044e\u0442 \u044f\u0432\u043d\u043e\u0433\u043e \u0443\u043a\u0430\u0437\u0430\u043d\u0438\u044f \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0430 <code>request</code>, \u0434\u0430\u0436\u0435 \u0435\u0441\u043b\u0438 \u043e\u043d \u043d\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f.</p> <p>\u041f\u0440\u0438\u043c\u0435\u0440 <code>aiohttp</code>: <pre><code>from aiohttp import web\n\nrouter = web.RouteTableDef()\n\n@router.get('/hello')\nasync def hello(request: web.Request) -&gt; web.Response:  # `request` required\n    return web.json_response({'hello': 'aiohttp'})\n\napp = web.Application()\napp.add_routes(router)\n</code></pre></p> <p>\u0412 <code>Rapidy</code> \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440 <code>request</code> \u0443\u043a\u0430\u0437\u044b\u0432\u0430\u0442\u044c \u043d\u0435 \u043d\u0443\u0436\u043d\u043e, \u0447\u0442\u043e \u0434\u0435\u043b\u0430\u0435\u0442 \u043a\u043e\u0434 \u043b\u0430\u043a\u043e\u043d\u0438\u0447\u043d\u0435\u0435:</p> <p>\u041f\u0440\u0438\u043c\u0435\u0440 <code>Rapidy</code>: <pre><code>from rapidy import Rapidy\nfrom rapidy.http import get\n\n@get('/hello')\nasync def handler() -&gt; dict[str, str]:\n    return {'hello': 'rapidy'}\n\nrapidy = Rapidy(http_route_handlers=[handler])\n</code></pre></p> <p>\u041f\u043e\u0434\u0440\u043e\u0431\u043d\u0435\u0435 \u043e \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044f\u0445 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 <code>Request</code> \u043c\u043e\u0436\u043d\u043e \u043f\u0440\u043e\u0447\u0438\u0442\u0430\u0442\u044c \u0437\u0434\u0435\u0441\u044c.</p>"},{"location":"ru/aiohttp_migration/#_2","title":"\u0423\u043f\u0440\u043e\u0449\u0451\u043d\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 \u0441 \u0444\u043e\u043d\u043e\u0432\u044b\u043c\u0438 \u0437\u0430\u0434\u0430\u0447\u0430\u043c\u0438","text":"<p>\u0412 <code>aiohttp</code> \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u0438 \u0444\u043e\u043d\u043e\u0432\u044b\u0445 \u0437\u0430\u0434\u0430\u0447 \u0442\u0440\u0435\u0431\u0443\u044e\u0442 \u044f\u0432\u043d\u043e\u0433\u043e \u0443\u043a\u0430\u0437\u0430\u043d\u0438\u044f \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0430 <code>app</code>: <pre><code>from typing import AsyncGenerator\nfrom aiohttp import web\n\nasync def bg_task(app: web.Application) -&gt; None:\n    print('run task')\n\nasync def app_ctx(app: web.Application) -&gt; AsyncGenerator[None, None]:\n    print('starting background task')\n    yield\n    print('finish')\n\napp = web.Application()\n\napp.on_startup.append(bg_task)\napp.on_shutdown.append(bg_task)\napp.on_cleanup.append(bg_task)\napp.cleanup_ctx.append(app_ctx)\n</code></pre></p> <p>\u0412 <code>Rapidy</code> \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440 <code>app</code> \u043d\u0435 \u0442\u0440\u0435\u0431\u0443\u0435\u0442\u0441\u044f: <pre><code>from contextlib import asynccontextmanager\nfrom typing import AsyncGenerator\nfrom rapidy import Rapidy\n\nasync def bg_task() -&gt; None:\n    print('run task')\n\n@asynccontextmanager\nasync def app_ctx() -&gt; AsyncGenerator[None, None]:\n    print('starting background task')\n    yield\n    print('finishing background task')\n\nrapidy = Rapidy(\n    on_startup=[bg_task],\n    on_shutdown=[bg_task],\n    on_cleanup=[bg_task],\n    lifespan=[app_ctx()],\n)\n# or\nrapidy.lifespan.on_startup.append(bg_task)\nrapidy.lifespan.on_shutdown.append(bg_task)\nrapidy.lifespan.on_cleanup.append(bg_task)\nrapidy.lifespan.append(app_ctx())\n</code></pre></p> <p>\u041f\u0435\u0440\u0435\u0434\u0430\u0442\u044c \u0430\u0442\u0440\u0438\u0431\u0443\u0442 <code>app</code> \u043f\u043e-\u043f\u0440\u0435\u0436\u043d\u0435\u043c\u0443 \u043c\u043e\u0436\u043d\u043e, \u043f\u043e\u0434\u0440\u043e\u0431\u043d\u0435\u0435 \u0437\u0434\u0435\u0441\u044c.</p> <p>\u041f\u043e\u0434\u0440\u043e\u0431\u043d\u0435\u0435 \u043e \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044f\u0445 \u0440\u0430\u0431\u043e\u0442\u044b \u0441 \u0444\u043e\u043d\u043e\u0432\u044b\u043c\u0438 \u0437\u0430\u0434\u0430\u0447\u0430\u043c\u0438 \u043c\u043e\u0436\u043d\u043e \u043f\u0440\u043e\u0447\u0438\u0442\u0430\u0442\u044c \u0437\u0434\u0435\u0441\u044c.</p>"},{"location":"ru/aiohttp_migration/#_3","title":"\u0423\u043b\u0443\u0447\u0448\u0435\u043d\u043d\u044b\u0439 \u0440\u043e\u0443\u0442\u0438\u043d\u0433 \u043a\u043b\u0430\u0441\u0441\u043e\u0432\u044b\u0445 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u043e\u0432","text":"<p>\u0412 <code>aiohttp</code> \u043c\u0430\u0440\u0448\u0440\u0443\u0442\u0438\u0437\u0430\u0446\u0438\u044f \u043a\u043b\u0430\u0441\u0441\u043e\u0432\u044b\u0445 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u043e\u0432 \u043f\u0440\u0438\u0432\u044f\u0437\u0430\u043d\u0430 \u043a \u0438\u043c\u0435\u043d\u0430\u043c HTTP-\u043c\u0435\u0442\u043e\u0434\u043e\u0432, \u0447\u0442\u043e \u043e\u0433\u0440\u0430\u043d\u0438\u0447\u0438\u0432\u0430\u0435\u0442 \u0433\u0438\u0431\u043a\u043e\u0441\u0442\u044c.</p> <p>\u0412 <code>Rapidy</code> \u043c\u043e\u0436\u043d\u043e \u0443\u0434\u043e\u0431\u043d\u043e \u0433\u0440\u0443\u043f\u043f\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u0438: <pre><code>from rapidy import Rapidy\nfrom rapidy.http import controller, get, PathParam\n\n@controller('/user')\nclass UserController:\n    @get('/{user_id}')\n    async def get_by_id(self, user_id: str = PathParam()) -&gt; dict[str, str]:\n        return {'user_id': user_id}\n\n    @get()\n    async def get_all_users(self) -&gt; list[dict[str, str]]:\n        return [{'user_id': '1'}, {'user_id': '2'}]\n\nrapidy = Rapidy(http_route_handlers=[UserController])\n</code></pre></p> <p>\u041f\u043e\u0434\u0440\u043e\u0431\u043d\u0435\u0435 \u043e \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044f\u0445 \u0440\u0430\u0431\u043e\u0442\u044b \u0441 HTTP-\u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u0430\u043c\u0438 \u043c\u043e\u0436\u043d\u043e \u043f\u0440\u043e\u0447\u0438\u0442\u0430\u0442\u044c \u0437\u0434\u0435\u0441\u044c.</p>"},{"location":"ru/aiohttp_migration/#_4","title":"\u041f\u0440\u043e\u0441\u0442\u0430\u044f \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u044f \u0438 \u0441\u0435\u0440\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0434\u0430\u043d\u043d\u044b\u0445","text":"<p>\u0412 <code>Rapidy</code> \u043c\u043e\u0436\u043d\u043e \u043b\u0435\u0433\u043a\u043e \u0432\u0430\u043b\u0438\u0434\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0438 \u0441\u0435\u0440\u0438\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0434\u0430\u043d\u043d\u044b\u0435 \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e <code>pydantic</code>: <pre><code>from pydantic import BaseModel\nfrom rapidy.http import get, Body\n\nclass UserData(BaseModel):\n    name: str\n    age: int\n\n@get('/user')\nasync def handler(data: UserData = Body()) -&gt; dict[str, str]:\n    return {'message': f'User {data.name}, {data.age} years old'}\n</code></pre></p>"},{"location":"ru/aiohttp_migration/#_5","title":"\u0411\u043e\u043b\u0435\u0435 \u043f\u0440\u043e\u0441\u0442\u043e\u0435 \u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f \u043d\u0430 \u043c\u043e\u0434\u0443\u043b\u0438","text":"<p>\u0412 <code>aiohttp</code> \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435 \u043f\u043e\u0434\u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0439 \u0442\u0440\u0435\u0431\u0443\u0435\u0442 \u044f\u0432\u043d\u043e\u0433\u043e \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u043c\u0430\u0440\u0448\u0440\u0443\u0442\u043e\u0432 \u0438 \u0438\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 \u043e\u0431\u044a\u0435\u043a\u0442\u043e\u0432 <code>Application</code>: <pre><code>from aiohttp import web\n\nv1_app = web.Application()\napp = web.Application()\napp.add_subapp('/v1', v1_app)\n</code></pre></p> <p>\u0412 <code>Rapidy</code> \u044d\u0442\u043e \u0440\u0435\u0430\u043b\u0438\u0437\u0443\u0435\u0442\u0441\u044f \u043f\u0440\u043e\u0449\u0435: <pre><code>from rapidy import Rapidy\nfrom rapidy.http import HTTPRouter\n\nv1_app = HTTPRouter('/v1')\nrapidy = Rapidy(http_route_handlers=[v1_app])\n</code></pre></p>"},{"location":"ru/aiohttp_migration/#rapidy","title":"\u041a\u043b\u044e\u0447\u0435\u0432\u044b\u0435 \u043f\u0440\u0435\u0438\u043c\u0443\u0449\u0435\u0441\u0442\u0432\u0430 <code>Rapidy</code>","text":"<ul> <li>\u0411\u043e\u043b\u0435\u0435 \u043b\u0430\u043a\u043e\u043d\u0438\u0447\u043d\u044b\u0439 \u043a\u043e\u0434: \u043c\u0438\u043d\u0438\u043c\u0438\u0437\u0430\u0446\u0438\u044f \u0448\u0430\u0431\u043b\u043e\u043d\u043d\u043e\u0433\u043e \u043a\u043e\u0434\u0430 \u0431\u0435\u0437 \u043f\u043e\u0442\u0435\u0440\u0438 \u0447\u0438\u0442\u0430\u0435\u043c\u043e\u0441\u0442\u0438.</li> <li>\u0423\u0434\u043e\u0431\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 \u0441 \u043c\u0430\u0440\u0448\u0440\u0443\u0442\u0438\u0437\u0430\u0446\u0438\u0435\u0439: \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0433\u0440\u0443\u043f\u043f\u0438\u0440\u043e\u0432\u043a\u0438 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u043e\u0432 \u0432 \u043a\u043b\u0430\u0441\u0441\u0430\u0445.</li> <li>\u0413\u0438\u0431\u043a\u0430\u044f \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u044f \u0438 \u0441\u0435\u0440\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0434\u0430\u043d\u043d\u044b\u0445: \u0432\u0441\u0442\u0440\u043e\u0435\u043d\u043d\u0430\u044f \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u043a\u0430 <code>pydantic</code>.</li> <li>\u0423\u043f\u0440\u043e\u0449\u0451\u043d\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 \u0441 \u0437\u0430\u043f\u0440\u043e\u0441\u0430\u043c\u0438 \u0438 \u043e\u0442\u0432\u0435\u0442\u0430\u043c\u0438: \u0434\u043e\u0441\u0442\u0443\u043f \u043a <code>Request</code> \u0438 <code>Response</code> \u0447\u0435\u0440\u0435\u0437 \u0430\u043d\u043d\u043e\u0442\u0430\u0446\u0438\u0438 \u0442\u0438\u043f\u043e\u0432.</li> <li>\u041f\u0440\u043e\u0434\u0432\u0438\u043d\u0443\u0442\u043e\u0435 \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0436\u0438\u0437\u043d\u0435\u043d\u043d\u044b\u043c \u0446\u0438\u043a\u043b\u043e\u043c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f: \u0443\u0434\u043e\u0431\u043d\u044b\u0435 \u0445\u0443\u043a\u0438 <code>on_startup</code>, <code>on_shutdown</code> \u0438 <code>on_cleanup</code>.</li> <li>\u041b\u0443\u0447\u0448\u0430\u044f \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u044f \u0441 \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u044b\u043c\u0438 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044f\u043c\u0438 Python: \u043c\u0435\u043d\u044c\u0448\u0435 \u043b\u0438\u0448\u043d\u0438\u0445 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u0432 \u0438 \u0440\u0443\u0447\u043d\u043e\u0439 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u0434\u0430\u043d\u043d\u044b\u0445.</li> </ul> <p>\u041f\u043e\u0434\u0440\u043e\u0431\u043d\u0435\u0435 \u043e \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044f\u0445 <code>Rapidy</code> \u043c\u043e\u0436\u043d\u043e \u043f\u0440\u043e\u0447\u0438\u0442\u0430\u0442\u044c \u0437\u0434\u0435\u0441\u044c.</p>"},{"location":"ru/aiohttp_migration/#aiohttp-rapidy_1","title":"\u041a\u0430\u043a \u043c\u0438\u0433\u0440\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0441 <code>aiohttp</code> \u043d\u0430 <code>Rapidy</code>","text":"<p>\u041c\u0438\u0433\u0440\u0430\u0446\u0438\u044f \u0441 <code>aiohttp</code> \u043d\u0430 <code>Rapidy</code> \u0437\u043d\u0430\u0447\u0438\u0442\u0435\u043b\u044c\u043d\u043e \u0443\u043f\u0440\u043e\u0449\u0430\u0435\u0442 \u043a\u043e\u0434, \u0443\u0441\u0442\u0440\u0430\u043d\u044f\u044f \u0448\u0430\u0431\u043b\u043e\u043d\u043d\u044b\u0439 \u043a\u043e\u0434, \u0443\u043b\u0443\u0447\u0448\u0430\u044f \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u044e \u0438 \u0443\u043f\u0440\u043e\u0449\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0443 \u0441 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u044f\u043c\u0438.</p>"},{"location":"ru/aiohttp_migration/#_6","title":"\u041f\u043e\u043b\u043d\u0430\u044f \u043c\u0438\u0433\u0440\u0430\u0446\u0438\u044f","text":"<p>\u0414\u043e\u043f\u0443\u0441\u0442\u0438\u043c, \u0443 \u0432\u0430\u0441 \u0435\u0441\u0442\u044c <code>aiohttp</code>-\u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u0441 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u043e\u043c \u0437\u0430\u043f\u0440\u043e\u0441\u0430, \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0430\u043c\u0438 \u0437\u0430\u043f\u0440\u043e\u0441\u0430, \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u0435\u0439 \u0438 \u0445\u0443\u043a\u0430\u043c\u0438 \u0436\u0438\u0437\u043d\u0435\u043d\u043d\u043e\u0433\u043e \u0446\u0438\u043a\u043b\u0430:</p> <p>\u041a\u043e\u0434 \u043d\u0430 <code>aiohttp</code>: <pre><code>from aiohttp import web\nfrom pydantic import BaseModel, ValidationError\n\nroutes = web.RouteTableDef()\n\nclass UserData(BaseModel):\n    name: str\n    age: int\n\n@routes.post('/user')\nasync def create_user(request: web.Request) -&gt; web.Response:\n    data = await request.json()\n    try:\n        user = UserData(**data)\n    except ValidationError as validation_err:\n        return web.json_response({'error': validation_err.errors()}, status=400)\n    return web.json_response({'message': f'User {user.name}, {user.age} years old'})\n\nasync def on_startup(app: web.Application) -&gt; None:\n    print(\"App is starting...\")\n\napp = web.Application()\napp.on_startup.append(on_startup)\napp.add_routes(routes)\n\nweb.run_app(app)\n</code></pre></p> <p>\u041a\u043e\u0434 \u043d\u0430 <code>Rapidy</code>: <pre><code>from rapidy import Rapidy\nfrom rapidy.http import post, Body\nfrom pydantic import BaseModel\n\nclass UserData(BaseModel):\n    name: str\n    age: int\n\n@post('/user')\nasync def create_user(user: UserData = Body()) -&gt; dict[str, str]:\n    return {'message': f'User {user.name}, {user.age} years old'}\n\nasync def on_startup() -&gt; None:\n    print(\"App is starting...\")\n\nrapidy = Rapidy(\n    http_route_handlers=[create_user],\n    on_startup=[on_startup],\n)\n</code></pre></p> <p>\u041e\u0441\u043d\u043e\u0432\u043d\u044b\u0435 \u0443\u043b\u0443\u0447\u0448\u0435\u043d\u0438\u044f:</p> <ul> <li>\u041c\u0435\u043d\u044c\u0448\u0435 \u0448\u0430\u0431\u043b\u043e\u043d\u043d\u043e\u0433\u043e \u043a\u043e\u0434\u0430 \u2014 \u043d\u0435\u0442 \u044f\u0432\u043d\u043e\u0433\u043e <code>request: web.Request</code>, <code>Rapidy</code> \u0441\u0430\u043c \u043f\u0430\u0440\u0441\u0438\u0442 JSON \u0438 \u0432\u0430\u043b\u0438\u0434\u0438\u0440\u0443\u0435\u0442 \u0435\u0433\u043e \u0441 <code>pydantic</code>.</li> <li>\u041f\u0440\u043e\u0449\u0435 \u0440\u0430\u0431\u043e\u0442\u0430 \u0441 \u0436\u0438\u0437\u043d\u0435\u043d\u043d\u044b\u043c \u0446\u0438\u043a\u043b\u043e\u043c \u2014 <code>on_startup</code> \u043f\u0435\u0440\u0435\u0434\u0430\u0451\u0442\u0441\u044f \u0441\u043f\u0438\u0441\u043a\u043e\u043c, \u0431\u0435\u0437 <code>app.on_startup.append()</code>.</li> <li>\u041c\u0430\u0440\u0448\u0440\u0443\u0442\u0438\u0437\u0430\u0446\u0438\u044f \u0431\u0435\u0437 <code>app.add_routes()</code> \u2014 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u0438 \u043f\u0435\u0440\u0435\u0434\u0430\u044e\u0442\u0441\u044f \u0447\u0435\u0440\u0435\u0437 <code>http_route_handlers</code>.</li> </ul>"},{"location":"ru/aiohttp_migration/#_7","title":"\u0427\u0430\u0441\u0442\u0438\u0447\u043d\u0430\u044f \u043c\u0438\u0433\u0440\u0430\u0446\u0438\u044f","text":"<p>\u0418\u043d\u043e\u0433\u0434\u0430 \u043f\u043e\u043b\u043d\u0430\u044f \u043c\u0438\u0433\u0440\u0430\u0446\u0438\u044f \u043d\u0435\u0432\u043e\u0437\u043c\u043e\u0436\u043d\u0430 \u0441\u0440\u0430\u0437\u0443. \u041d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u0435\u0441\u043b\u0438 \u043d\u0443\u0436\u043d\u043e \u0434\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u043e\u0441\u0442\u044c, \u043d\u043e \u0441\u043e\u0445\u0440\u0430\u043d\u0438\u0442\u044c \u0447\u0430\u0441\u0442\u044c \u043a\u043e\u0434\u0430 \u043d\u0430 <code>aiohttp</code>. \u0412 \u0442\u0430\u043a\u043e\u043c \u0441\u043b\u0443\u0447\u0430\u0435 \u043c\u043e\u0436\u043d\u043e \u0430\u0434\u0430\u043f\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u043a\u043e\u0434 \u043f\u043e\u0441\u0442\u0435\u043f\u0435\u043d\u043d\u043e.</p> <p>\u042d\u0442\u043e\u0442 \u043f\u043e\u0434\u0445\u043e\u0434 \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u043f\u0435\u0440\u0435\u043d\u043e\u0441\u0438\u0442\u044c \u043a\u043e\u0434 \u043d\u0430 <code>Rapidy</code>, \u0437\u0430\u043c\u0435\u043d\u044f\u044f \u0447\u0430\u0441\u0442\u0438 <code>aiohttp</code> \u043d\u0430 \u043d\u043e\u0432\u044b\u0439 \u0441\u0438\u043d\u0442\u0430\u043a\u0441\u0438\u0441 \u0431\u0435\u0437 \u043f\u0435\u0440\u0435\u043f\u0438\u0441\u044b\u0432\u0430\u043d\u0438\u044f \u0432\u0441\u0435\u0433\u043e \u043f\u0440\u043e\u0435\u043a\u0442\u0430.</p>"},{"location":"ru/aiohttp_migration/#_8","title":"\u0414\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u043d\u0435\u0431\u043e\u043b\u044c\u0448\u043e\u0439 \u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u043e\u0441\u0442\u0438","text":"<p>\u0414\u043e\u043f\u0443\u0441\u0442\u0438\u043c, \u0432\u0430\u043c \u043d\u0443\u0436\u043d\u043e \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0437\u0430\u0433\u043e\u043b\u043e\u0432\u043e\u043a <code>Host</code> \u0438 \u043f\u0435\u0440\u0435\u0434\u0430\u0442\u044c \u0435\u0433\u043e \u0432 \u043e\u0442\u0432\u0435\u0442, \u043d\u0435 \u043c\u0435\u043d\u044f\u044f \u043e\u0441\u0442\u0430\u043b\u044c\u043d\u0443\u044e \u043b\u043e\u0433\u0438\u043a\u0443.</p> <p>\u0411\u044b\u043b\u043e (<code>aiohttp</code>): <pre><code>from aiohttp import web\nfrom pydantic import BaseModel, ValidationError\n\nroutes = web.RouteTableDef()\n\nclass UserData(BaseModel):\n    name: str\n    age: int\n\n@routes.post('/user')\nasync def create_user(\n    request: web.Request,\n) -&gt; web.Response:\n    data = await request.json()\n    try:\n        user = UserData(**data)\n    except ValidationError as validation_err:\n        return web.json_response({'error': validation_err.errors()}, status=400)\n    return web.json_response({'message': f'User {user.name}, {user.age} years old'})\n\nasync def on_startup(app: web.Application) -&gt; None:\n    print(\"App is starting...\")\n\napp = web.Application()\napp.on_startup.append(on_startup)\napp.add_routes(routes)\n</code></pre></p> <p>\u0421\u0442\u0430\u043b\u043e (<code>Rapidy</code>): <pre><code>from rapidy import Rapidy, web\nfrom pydantic import BaseModel, ValidationError\n\nroutes = web.RouteTableDef()\n\nclass UserData(BaseModel):\n    name: str\n    age: int\n\n@routes.post('/user')\nasync def create_user(\n    request: web.Request,\n    host: str = web.Header(alias='Host'),\n) -&gt; web.Response:\n    data = await request.json()\n    try:\n        user = UserData(**data)\n    except ValidationError as validation_err:\n        return web.Response({'error': validation_err.errors()}, status=400)\n    return web.Response({'message': f'User {user.name}, {user.age} years old, host: {host}'})\n\nasync def on_startup(app: web.Application) -&gt; None:\n    print(\"App is starting...\")\n\napp = web.Application()\napp.on_startup.append(on_startup)\napp.add_routes(routes)\n</code></pre></p> <p>\u0418\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f:</p> <ol> <li>\u041e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u044b \u0438\u043c\u043f\u043e\u0440\u0442\u044b.</li> <li>\u0414\u043e\u0431\u0430\u0432\u043b\u0435\u043d <code>host: str = web.Header(alias='Host')</code> \u0432 HTTP-\u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u0435 <code>create_user</code>.</li> <li><code>json_response</code> \u0437\u0430\u043c\u0435\u043d\u0451\u043d \u043d\u0430 <code>Response</code>, \u0442\u0430\u043a \u043a\u0430\u043a \u0442\u0435\u043f\u0435\u0440\u044c \u0435\u0433\u043e \u0444\u0443\u043d\u043a\u0446\u0438\u0438 \u0432\u0441\u0442\u0440\u043e\u0435\u043d\u044b \u0432 <code>Response</code>.</li> </ol> <p><code>Response</code> \u0432 <code>Rapidy</code> \u0443\u043c\u0435\u0435\u0442 \u0431\u043e\u043b\u044c\u0448\u0435, \u043f\u043e\u0434\u0440\u043e\u0431\u043d\u0435\u0435 \u0437\u0434\u0435\u0441\u044c.</p> <p>Rapidy \u043c\u043e\u0436\u0435\u0442 \u0432\u0441\u0435 (\u043f\u043e\u0447\u0442\u0438 \u0432\u0441\u0435)</p> <p>\u041f\u0440\u0438\u043c\u0435\u0440 \u0432\u044b\u0448\u0435 \u043e\u043f\u0438\u0441\u044b\u0432\u0430\u0435\u0442 \u043a\u0430\u043a \u043c\u043e\u0436\u043d\u043e \u0434\u043e\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0442\u044c \u043a\u043e\u0434 \u043f\u0440\u0438 \u043e\u0431\u044a\u044f\u0432\u043b\u0435\u043d\u0438\u0438 HTTP-\u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u043e\u0432 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e <code>web.RouteTableDef()</code>, \u043d\u043e <code>Rapidy</code> \u0442\u0430\u043a\u0436\u0435 \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u0435\u0442 \u0432\u0441\u0435 \u0434\u0440\u0443\u0433\u0438\u0435 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u044b\u0435 \u0442\u0438\u043f\u044b \u043e\u0431\u044a\u044f\u0432\u043b\u0435\u043d\u0438\u044f HTTP-\u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u043e\u0432 \u0432 \u0441\u0442\u0438\u043b\u0435 <code>aiohttp</code>, \u043f\u043e\u0434\u0440\u043e\u0431\u043d\u0435\u0435 \u043e \u0441\u043f\u043e\u0441\u043e\u0431\u0430\u0445 \u043e\u0431\u044a\u044f\u0432\u043b\u0435\u043d\u0438\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u043e\u0432 \u0432 \u0441\u0442\u0435\u043b\u0435 <code>aiohttp</code> \u0447\u0438\u0442\u0430\u0439\u0442\u0435 \u0437\u0434\u0435\u0441\u044c.</p>"},{"location":"ru/aiohttp_migration/#-","title":"\u0414\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u043d\u043e\u0432\u043e\u0439 \u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u043e\u0441\u0442\u0438 \u0447\u0435\u0440\u0435\u0437 \u043f\u043e\u0434-\u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f","text":"<p>\u0412\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u043b\u0435\u0433\u043a\u043e \u0440\u0430\u0441\u0448\u0438\u0440\u0438\u0442\u044c \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u044e\u0449\u0435\u0435 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u043d\u0430 <code>aiohttp</code>, \u0434\u043e\u0431\u0430\u0432\u043b\u044f\u044f \u043d\u043e\u0432\u044b\u0435 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u0438 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u043f\u043e\u0434-\u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0439.</p> <p>\u0411\u044b\u043b\u043e (<code>aiohttp</code>): <pre><code>from aiohttp import web\nfrom pydantic import BaseModel\n\nroutes = web.RouteTableDef()\n\nclass UserData(BaseModel):\n    name: str\n    age: int\n\n@routes.post('/user')\nasync def create_user(request: web.Request) -&gt; web.Response:\n    # ... some aiohttp code\n    return web.Response(text='User')\n\nv1_app = web.Application()\nv1_app.add_routes(routes)\n\napp = web.Application()\napp.add_subapp('/v1', v1_app)\n</code></pre></p> <p>\u0421\u0442\u0430\u043b\u043e (<code>Rapidy</code>): <pre><code>from rapidy import web\nfrom rapidy.http import HTTPRouter, get\nfrom pydantic import BaseModel\n\nroutes = web.RouteTableDef()\n\nclass UserData(BaseModel):\n    name: str\n    age: int\n\n@routes.get('/user')\nasync def get_user_aiohttp(request: web.Request) -&gt; web.Response:\n    # ... some aiohttp code\n    return web.Response(text='User aiohttp')\n\nv1_app = web.Application()\nv1_app.add_routes(routes)\n\n# --- new functionality\n@get('/user')\nasync def get_user_rapidy() -&gt; str:\n    return 'User rapidy'\n\nv2_router = HTTPRouter('/v2', route_handlers=[get_user_rapidy])\n# ---\n\napp = web.Application(http_route_handlers=[v2_router])\napp.add_subapp('/v1', v1_app)\n</code></pre></p> <p>\u042d\u0442\u043e\u0442 \u043f\u043e\u0434\u0445\u043e\u0434 \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u043f\u043b\u0430\u0432\u043d\u043e \u0438\u043d\u0442\u0435\u0433\u0440\u0438\u0440\u043e\u0432\u0430\u0442\u044c <code>Rapidy</code> \u0432 \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u0439 \u043a\u043e\u0434, \u043d\u0435 \u0442\u0440\u0435\u0431\u0443\u044f \u0437\u043d\u0430\u0447\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0445 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0439.</p> <p>\u0422\u0435\u043c \u043d\u0435 \u043c\u0435\u043d\u0435\u0435, \u0432\u0430\u043c \u043f\u043e\u0442\u0440\u0435\u0431\u0443\u0435\u0442\u0441\u044f \u043e\u0431\u043d\u043e\u0432\u0438\u0442\u044c \u0438\u043c\u043f\u043e\u0440\u0442\u044b <code>aiohttp</code> \u043d\u0430 <code>rapidy</code> \u0438 \u0437\u0430\u043c\u0435\u043d\u0438\u0442\u044c <code>json_response</code> \u043d\u0430 <code>Response</code> \u043f\u043e \u0432\u0441\u0435\u043c\u0443 \u043a\u043e\u0434\u0443.</p>"},{"location":"ru/docs/","title":"\u0412\u0432\u0435\u0434\u0435\u043d\u0438\u0435","text":"<p>\u0414\u043e\u0431\u0440\u043e \u043f\u043e\u0436\u0430\u043b\u043e\u0432\u0430\u0442\u044c \u0432 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u044e \u043f\u043e Rapidy.</p> <p>Rapidy - \u044d\u0442\u043e \u043f\u0440\u043e\u0441\u0442\u043e\u0439 \u0438 \u0431\u044b\u0441\u0442\u0440\u044b\u0439 \u0432\u0435\u0431-\u0444\u0440\u0435\u0439\u043c\u0432\u043e\u0440\u043a \u0434\u043b\u044f \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u043b\u0430\u043a\u043e\u043d\u0438\u0447\u043d\u044b\u0445 HTTP API-\u0441\u0435\u0440\u0432\u0435\u0440\u043e\u0432. \u041e\u043d \u043f\u0440\u0435\u0434\u043e\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442 \u0432\u0441\u0442\u0440\u043e\u0435\u043d\u043d\u044b\u0435 \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u044e, \u0441\u0435\u0440\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044e \u0438 \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e\u0441\u0442\u044c, \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u044f \u0440\u0430\u0437\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0442\u044c API \u043b\u0435\u0433\u043a\u043e \u0438 \u044d\u0444\u0444\u0435\u043a\u0442\u0438\u0432\u043d\u043e.</p> <p>\u041a\u0440\u0430\u0442\u043a\u0438\u0439 \u043e\u0431\u0437\u043e\u0440 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u0435\u0439 \u0434\u043e\u0441\u0442\u0443\u043f\u0435\u043d \u0432 \u0440\u0430\u0437\u0434\u0435\u043b\u0435 Quickstart.</p> <p>Rapidy \u043e\u0441\u043d\u043e\u0432\u0430\u043d \u043d\u0430 \u0434\u0432\u0443\u0445 \u043c\u043e\u0449\u043d\u044b\u0445 \u0438\u043d\u0441\u0442\u0440\u0443\u043c\u0435\u043d\u0442\u0430\u0445:</p> <ul> <li>aiohttp - \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 \u0440\u0430\u0431\u043e\u0442\u0430 \u0441 web</li> <li>pydantic - \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u044f \u0438 \u0441\u0435\u0440\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0434\u0430\u043d\u043d\u044b\u0445</li> </ul> <p>\u0422\u0430\u043a \u043a\u0430\u043a Rapidy \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442 aiohttp \u0438 pydantic, \u0440\u0435\u043a\u043e\u043c\u0435\u043d\u0434\u0443\u0435\u043c \u0438\u0437\u0443\u0447\u0438\u0442\u044c \u0438\u0445 \u043e\u0444\u0438\u0446\u0438\u0430\u043b\u044c\u043d\u0443\u044e \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u044e \u043d\u0430\u0440\u044f\u0434\u0443 \u0441 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u0435\u0439 Rapidy.</p> <p>\u0414\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u044f aiohttp.</p> <p>\u0414\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u044f pydantic.</p>"},{"location":"ru/docs/dependency_injection/","title":"Dependency Injection","text":"<p><code>Rapidy</code> \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0443 dishka \u0432 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u0432\u0441\u0442\u0440\u043e\u0435\u043d\u043d\u043e\u0433\u043e \u043c\u0435\u0445\u0430\u043d\u0438\u0437\u043c\u0430 \u0432\u043d\u0435\u0434\u0440\u0435\u043d\u0438\u044f \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0435\u0439 (Dependency Injection, DI).</p> <p>\u041c\u044b \u0441\u0442\u0440\u0435\u043c\u0438\u043b\u0438\u0441\u044c \u0432\u044b\u0431\u0440\u0430\u0442\u044c DI-\u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0443, \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u044e\u0449\u0443\u044e \u0444\u0438\u043b\u043e\u0441\u043e\u0444\u0438\u0438 <code>Rapidy</code>: \u043f\u0440\u043e\u0441\u0442\u043e\u0442\u0430, \u0441\u043a\u043e\u0440\u043e\u0441\u0442\u044c, \u043f\u0440\u043e\u0437\u0440\u0430\u0447\u043d\u043e\u0441\u0442\u044c \u0438 \u043c\u0430\u0441\u0448\u0442\u0430\u0431\u0438\u0440\u0443\u0435\u043c\u043e\u0441\u0442\u044c. <code>dishka</code> \u0438\u0434\u0435\u0430\u043b\u044c\u043d\u043e \u0432\u043f\u0438\u0441\u0430\u043b\u0430\u0441\u044c \u0432 \u044d\u0442\u0438 \u043f\u0440\u0438\u043d\u0446\u0438\u043f\u044b, \u043f\u0440\u0435\u0434\u043e\u0441\u0442\u0430\u0432\u043b\u044f\u044f \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u0430\u043c \u043c\u043e\u0449\u043d\u044b\u0439 \u0438\u043d\u0441\u0442\u0440\u0443\u043c\u0435\u043d\u0442 \u0431\u0435\u0437 \u043b\u0438\u0448\u043d\u0435\u0439 \u0441\u043b\u043e\u0436\u043d\u043e\u0441\u0442\u0438.</p> <p><code>dishka</code> \u2014 \u0441\u043e\u0432\u0440\u0435\u043c\u0435\u043d\u043d\u0430\u044f \u0438 \u043b\u0451\u0433\u043a\u0430\u044f \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0430 \u0434\u043b\u044f \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e\u0433\u043e \u0432\u043d\u0435\u0434\u0440\u0435\u043d\u0438\u044f \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0435\u0439 \u0432 Python-\u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f\u0445. \u041e\u043d\u0430 \u043e\u0440\u0438\u0435\u043d\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0430 \u043d\u0430 \u0432\u044b\u0441\u043e\u043a\u0443\u044e \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c, \u043c\u0438\u043d\u0438\u043c\u0430\u043b\u0438\u0437\u043c \u0438 \u0433\u0438\u0431\u043a\u043e\u0441\u0442\u044c \u043d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0438, \u0447\u0442\u043e \u0434\u0435\u043b\u0430\u0435\u0442 \u0435\u0451 \u0438\u0434\u0435\u0430\u043b\u044c\u043d\u043e\u0439 \u0434\u043b\u044f \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f \u0432 \u0432\u0435\u0431-\u0444\u0440\u0435\u0439\u043c\u0432\u043e\u0440\u043a\u0430\u0445 \u043d\u043e\u0432\u043e\u0433\u043e \u043f\u043e\u043a\u043e\u043b\u0435\u043d\u0438\u044f, \u0442\u0430\u043a\u0438\u0445 \u043a\u0430\u043a <code>Rapidy</code>.</p> <p>\u0415\u0451 \u043a\u043b\u044e\u0447\u0435\u0432\u044b\u0435 \u043f\u0440\u0435\u0438\u043c\u0443\u0449\u0435\u0441\u0442\u0432\u0430:</p> <ul> <li>\u041d\u0430\u0442\u0438\u0432\u043d\u0430\u044f \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u043a\u0430 asyncio: \u043f\u043e\u043b\u043d\u0430\u044f \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u043a\u0430 <code>async</code>/<code>await</code>, \u043a\u043e\u0440\u0440\u0435\u043a\u0442\u043d\u043e\u0435 \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0436\u0438\u0437\u043d\u0435\u043d\u043d\u044b\u043c \u0446\u0438\u043a\u043b\u043e\u043c \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0435\u0439.</li> <li>\u041c\u0438\u043d\u0438\u043c\u0430\u043b\u0438\u0441\u0442\u0438\u0447\u043d\u0430\u044f \u0430\u0440\u0445\u0438\u0442\u0435\u043a\u0442\u0443\u0440\u0430: \u043a\u043e\u043c\u043f\u0430\u043a\u0442\u043d\u043e\u0435 \u044f\u0434\u0440\u043e, \u0431\u0435\u0437 \u043c\u0430\u0433\u0438\u0438 \u0438 \u0438\u0437\u0431\u044b\u0442\u043e\u0447\u043d\u044b\u0445 \u0430\u0431\u0441\u0442\u0440\u0430\u043a\u0446\u0438\u0439 \u2014 \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u044f\u043c\u0438 \u043f\u0440\u043e\u0437\u0440\u0430\u0447\u043d\u043e \u0438 \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0443\u0435\u043c\u043e.</li> <li>\u041d\u0435\u0437\u0430\u043c\u0435\u0442\u043d\u043e\u0441\u0442\u044c \u0434\u043b\u044f \u0431\u0438\u0437\u043d\u0435\u0441-\u043b\u043e\u0433\u0438\u043a\u0438: \u0432\u043d\u0435\u0434\u0440\u0435\u043d\u0438\u0435 \u0447\u0435\u0440\u0435\u0437 \u0430\u043d\u043d\u043e\u0442\u0430\u0446\u0438\u0438 \u0442\u0438\u043f\u043e\u0432 (<code>FromDI</code>).</li> <li>\u0413\u0438\u0431\u043a\u043e\u0435 \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u043e\u0431\u043b\u0430\u0441\u0442\u044f\u043c\u0438 \u0432\u0438\u0434\u0438\u043c\u043e\u0441\u0442\u0438 (scopes): <code>App</code>, <code>Session</code>, <code>Request</code> \u0438 \u0434\u0440.</li> <li>\u0420\u0430\u0437\u043d\u043e\u043e\u0431\u0440\u0430\u0437\u0438\u0435 \u043f\u0440\u043e\u0432\u0430\u0439\u0434\u0435\u0440\u043e\u0432: \u0444\u0430\u0431\u0440\u0438\u043a\u0438, \u043e\u0431\u044a\u0435\u043a\u0442\u044b, \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u044b\u0435 \u0444\u0443\u043d\u043a\u0446\u0438\u0438.</li> <li>\u041a\u043e\u043d\u0442\u0435\u043a\u0441\u0442\u043d\u043e\u0435 \u0432\u043d\u0435\u0434\u0440\u0435\u043d\u0438\u0435: \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u043f\u0435\u0440\u0435\u0434\u0430\u0432\u0430\u0442\u044c \u0434\u0438\u043d\u0430\u043c\u0438\u0447\u0435\u0441\u043a\u0438\u0439 \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442 \u2014 \u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u0434\u043b\u044f \u0442\u0435\u043a\u0443\u0449\u0435\u0433\u043e \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f.</li> <li>\u0418\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u044f \u0441 \u0444\u0440\u0435\u0439\u043c\u0432\u043e\u0440\u043a\u0430\u043c\u0438: <code>aiohttp</code>, <code>FastStream</code>, <code>Rapidy</code> \u0438 \u0434\u0440\u0443\u0433\u0438\u0435.</li> <li>\u0423\u0434\u043e\u0431\u0441\u0442\u0432\u043e \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f: \u043f\u0440\u043e\u0432\u0430\u0439\u0434\u0435\u0440\u044b \u043b\u0435\u0433\u043a\u043e \u0437\u0430\u043c\u0435\u043d\u044f\u044e\u0442\u0441\u044f \u0432 \u0442\u0435\u0441\u0442\u0430\u0445, \u0431\u0435\u0437 \u0441\u0442\u043e\u0440\u043e\u043d\u043d\u0438\u0445 \u043c\u043e\u043a\u043e\u0432 \u0438 \u043f\u0430\u0442\u0447\u0435\u0439.</li> </ul> <p>\u0412 <code>Rapidy</code> dishka \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u0430 \u00ab\u0438\u0437 \u043a\u043e\u0440\u043e\u0431\u043a\u0438\u00bb \u2014 \u0434\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u0430\u044f \u043d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0430 \u043d\u0435 \u0442\u0440\u0435\u0431\u0443\u0435\u0442\u0441\u044f.</p>"},{"location":"ru/docs/dependency_injection/#dishka-rapidy","title":"\u041f\u0440\u0438\u043c\u0435\u0440\u044b \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f dishka \u0432 Rapidy","text":""},{"location":"ru/docs/dependency_injection/#_1","title":"\u041f\u0440\u043e\u0441\u0442\u043e\u0439 \u043f\u0440\u0438\u043c\u0435\u0440 \u0432\u043d\u0435\u0434\u0440\u0435\u043d\u0438\u044f \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0438","text":"<p>\u0412 <code>Rapidy</code> \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u0430 \u043e\u0431\u0451\u0440\u0442\u043a\u0430 <code>FromDI</code> (alias \u0434\u043b\u044f <code>FromDishka</code>), \u043a\u043e\u0442\u043e\u0440\u0443\u044e \u043c\u043e\u0436\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0434\u043b\u044f \u0438\u043d\u0436\u0435\u043a\u0442\u0430 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0435\u0439:</p> <pre><code>from rapidy import Rapidy\nfrom rapidy.http import get\nfrom rapidy.depends import FromDI, provide, Provider, Scope\n\nclass FooProvider(Provider):\n    @provide(scope=Scope.REQUEST)\n    async def c(self) -&gt; int:\n        return 1\n\n@get('/')\nasync def handler(c: FromDI[int]) -&gt; dict:\n    return {\"value\": c}\n\napp = Rapidy(\n    http_route_handlers=[handler],\n    di_providers=[FooProvider()],\n)\n</code></pre> <p>\u0427\u0442\u043e \u0437\u0434\u0435\u0441\u044c \u043f\u0440\u043e\u0438\u0441\u0445\u043e\u0434\u0438\u0442:</p> <ol> <li> <p>\u041e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u043f\u0440\u043e\u0432\u0430\u0439\u0434\u0435\u0440\u0430    \u041a\u043b\u0430\u0441\u0441 <code>FooProvider</code> \u043d\u0430\u0441\u043b\u0435\u0434\u0443\u0435\u0442\u0441\u044f \u043e\u0442 <code>Provider</code> \u0438 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u0435\u0442 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u044c <code>c</code> \u0442\u0438\u043f\u0430 <code>int</code>, \u0441\u043e\u0437\u0434\u0430\u0432\u0430\u0435\u043c\u0443\u044e \u043d\u0430 \u043a\u0430\u0436\u0434\u044b\u0439 \u0437\u0430\u043f\u0440\u043e\u0441 (<code>Scope.REQUEST</code>).</p> </li> <li> <p>\u0420\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u0430 \u0437\u0430\u043f\u0440\u043e\u0441\u0430    \u0414\u0435\u043a\u043e\u0440\u0430\u0442\u043e\u0440 <code>@get('/')</code> \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0438\u0440\u0443\u0435\u0442 \u0444\u0443\u043d\u043a\u0446\u0438\u044e <code>handler</code> \u043a\u0430\u043a \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a GET-\u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432 \u043f\u043e \u043f\u0443\u0442\u0438 <code>/</code>.</p> </li> <li> <p>\u0412\u043d\u0435\u0434\u0440\u0435\u043d\u0438\u0435 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0438 \u0432 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a    \u0410\u0440\u0433\u0443\u043c\u0435\u043d\u0442 <code>c: FromDI[int]</code> \u0441\u043e\u043e\u0431\u0449\u0430\u0435\u0442, \u0447\u0442\u043e <code>c</code> \u0434\u043e\u043b\u0436\u0435\u043d \u0431\u044b\u0442\u044c \u043f\u043e\u043b\u0443\u0447\u0435\u043d \u0438\u0437 DI-\u043a\u043e\u043d\u0442\u0435\u0439\u043d\u0435\u0440\u0430 \u043d\u0430 \u043c\u043e\u043c\u0435\u043d\u0442 \u0432\u044b\u0437\u043e\u0432\u0430.</p> </li> <li> <p>\u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f    \u042d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440 <code>Rapidy</code> \u0441\u043e\u0437\u0434\u0430\u0451\u0442\u0441\u044f \u0441 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u043e\u043c <code>handler</code> \u0438 \u043f\u0440\u043e\u0432\u0430\u0439\u0434\u0435\u0440\u043e\u043c <code>FooProvider</code>.</p> </li> </ol>"},{"location":"ru/docs/dependency_injection/#sqlalchemy-","title":"\u041f\u0440\u0438\u043c\u0435\u0440 \u0441 SQLAlchemy-\u0441\u0435\u0441\u0441\u0438\u0435\u0439","text":"\u041e\u0442\u043a\u0440\u043e\u0439\u0442\u0435 \u043f\u0440\u0438\u043c\u0435\u0440 <pre><code>from typing import AsyncIterable\n\nfrom pydantic_settings import SettingsConfigDict, BaseSettings\nfrom rapidy import Rapidy, run_app\nfrom rapidy.depends import FromDI, Provider, Scope, provide, from_context\nfrom rapidy.web_response import Response\nfrom sqlalchemy import make_url, DateTime, MetaData, Table, delete, select, update\nfrom sqlalchemy.ext.asyncio import async_sessionmaker, AsyncSession, AsyncEngine, create_async_engine\nfrom rapidy.http import controller, get, post, PathParam, Body, put, delete\nfrom pydantic import BaseModel, ConfigDict\nfrom datetime import datetime\nfrom typing import Any, Callable\nfrom uuid import UUID, uuid4\n\nfrom sqlalchemy.ext.compiler import compiles\nfrom sqlalchemy.orm import DeclarativeBase, Mapped, mapped_column\nfrom sqlalchemy.sql import expression\nfrom sqlalchemy.sql.schema import ColumnCollectionConstraint, Column\n\n\n# --- App config ---\nclass PoolConfig(BaseModel):\n    recycle_sec: int = 3600\n    max_size: int = 10\n    max_overflow_size: int = 10\n\n\nclass DBConfig(BaseModel):\n    echo: bool = False\n    pool: PoolConfig = PoolConfig()\n\n    timeout: int = 30\n\n    db_name: str\n    user: str\n    password: str\n    host: str\n    port: int = 5432\n\n    @property\n    def dsn(self) -&gt; str:\n        return f'postgresql+asyncpg://{self.user}:{self.password}@{self.host}:{self.port}/{self.db_name}'\n\n\nclass AppConfig(BaseSettings):\n    host: str = \"0.0.0.0\"\n    port: int = 8080\n\n    db: DBConfig\n\n    model_config = SettingsConfigDict(\n        extra=\"ignore\",\n        env_file=\".env\",\n        env_file_encoding=\"utf-8\",\n        env_nested_delimiter=\"__\",\n    )\n\n\n# --- DB models ---\n\ndef _col_names_convertor(constraint: ColumnCollectionConstraint, table: Table) -&gt; str:\n    return \"_\".join([column.name for column in constraint.columns.values()])\n\n\nconvention: dict[str, str | Callable[[ColumnCollectionConstraint, Table], str]] = {\n    \"all_column_names\": _col_names_convertor,\n    \"ix\": \"ix__%(table_name)s__%(all_column_names)s\",\n    \"uq\": \"uq__%(table_name)s__%(all_column_names)s\",\n    \"ck\": \"ck__%(table_name)s__%(constraint_name)s\",\n    \"fk\": \"fk__%(table_name)s__%(all_column_names)s__%(referred_table_name)s\",\n    \"pk\": \"pk__%(table_name)s\",\n}\n\n\nclass UtcNow(expression.FunctionElement[Any]):\n    type = DateTime()\n    inherit_cache = True\n\n\n@compiles(UtcNow, \"postgresql\")\ndef pg_utcnow(element: Any, compiler: Any, **kw: Any) -&gt; str:\n    return \"TIMEZONE('utc', CURRENT_TIMESTAMP)\"\n\n\nclass BaseDBModel(DeclarativeBase):\n    __tablename__: str\n\n    id: Mapped[UUID] = mapped_column(primary_key=True, default=uuid4)\n\n    create_date: Mapped[datetime] = Column(\n        DateTime(timezone=True),\n        nullable=False,\n        server_default=UtcNow(),\n    )\n    update_date: Mapped[datetime] = Column(\n        DateTime(timezone=True),\n        nullable=False,\n        server_default=UtcNow(),\n        onupdate=UtcNow(),\n    )\n\n    metadata = MetaData(\n        schema=\"data\",\n        naming_convention=convention,\n    )\n\n\nclass Article(BaseDBModel):\n    __tablename__ = \"article\"\n\n    title: Mapped[str]\n    text: Mapped[str]\n\n\n# --- DI Providers ---\n\nclass ConfigProvider(Provider):\n    scope = Scope.APP\n    config = from_context(provides=AppConfig)\n\n    @provide\n    def get_db_config(self, config: AppConfig) -&gt; DBConfig:\n        return config.db\n\n\nclass DBProvider(Provider):\n    scope = Scope.APP\n\n    @provide\n    async def get_engine(self, db_config: DBConfig) -&gt; AsyncIterable[AsyncEngine]:\n        engine = create_async_engine(\n            url=make_url(db_config.dsn),\n            echo=db_config.echo,\n            pool_size=db_config.pool.max_size,\n            pool_recycle=db_config.pool.recycle_sec,\n            max_overflow=db_config.pool.max_overflow_size,\n            execution_options={\n                \"asyncpg_timeout\": db_config.timeout,\n            },\n        )\n        try:\n            yield engine\n        finally:\n            await engine.dispose(True)\n\n    @provide\n    def get_pool(self, engine: AsyncEngine) -&gt; async_sessionmaker[AsyncSession]:\n        return async_sessionmaker(bind=engine, autoflush=False)\n\n    @provide(scope=Scope.REQUEST)\n    async def get_session(self, pool: async_sessionmaker[AsyncSession]) -&gt; AsyncIterable[AsyncSession]:\n        async with pool() as session, session.begin():\n            exc = yield session\n            if exc is not None:\n                await session.rollback()\n\n\n# --- Api ---\n\nclass ArticleCreate(BaseModel):\n    title: str\n    text: str\n\n\nclass ArticleUpdate(BaseModel):\n    title: str | None = None\n    text: str | None = None\n\n\nclass ArticleResult(BaseModel):\n    model_config = ConfigDict(from_attributes=True)\n\n    id: UUID\n    title: str\n    text: str\n    create_date: datetime\n    update_date: datetime\n\n\n@controller(\"/article\")\nclass ArticleController:\n\n    @get(\"/{article_id}\")\n    async def get_one(\n        self,\n        session: FromDI[AsyncSession],\n        response: Response,\n        article_id: UUID = PathParam(),\n    ) -&gt; ArticleResult | None:\n        article = await session.get(Article, article_id)\n        if article is None:\n            response.set_status(404)\n            return None\n\n        return ArticleResult.model_validate(article)\n\n    @get(response_type=list[ArticleResult])\n    async def get_all(self, session: FromDI[AsyncSession]) -&gt; list[ArticleResult]:\n        result = await session.execute(select(Article))\n        return [ArticleResult.model_validate(row) for row in result.scalars().all()]\n\n    @post()\n    async def create(self, session: FromDI[AsyncSession], data: ArticleCreate = Body()) -&gt; ArticleResult:\n        article = Article(**data.model_dump())\n        session.add(article)\n\n        await session.flush()\n        await session.refresh(article)\n        return ArticleResult.model_validate(article)\n\n    @put(\"/{article_id}\")\n    async def put(\n        self,\n        session: FromDI[AsyncSession],\n        article_id: UUID = PathParam(),\n        data: ArticleUpdate = Body(),\n    ) -&gt; ArticleResult | None:\n        stmt = (\n            update(Article)\n            .where(Article.id == article_id)\n            .values(**data.model_dump(exclude_unset=True))\n            .returning(Article)\n        )\n        result = await session.execute(stmt)\n        updated_article = result.scalar_one_or_none()\n        return ArticleResult.model_validate(updated_article) if updated_article else None\n\n    @delete(\"/{article_id}\")\n    async def delete(\n        self,\n        session: FromDI[AsyncSession],\n        article_id: UUID = PathParam(),\n    ) -&gt; None:\n        await session.execute(delete(Article).where(Article.id == article_id))\n\n\ndef create_app() -&gt; Rapidy:\n    return Rapidy(\n        http_route_handlers=[ArticleController],\n        di_providers=[\n            ConfigProvider(),\n            DBProvider(),\n        ],\n        di_context={\n            AppConfig: AppConfig(),\n        },\n    )\n\nif __name__ == '__main__':\n    app = create_app()\n    run_app(app)\n</code></pre>"},{"location":"ru/docs/dependency_injection/#_2","title":"\u0421\u043f\u043e\u0441\u043e\u0431\u044b \u0438\u043d\u0436\u0435\u043a\u0442\u0430","text":"<p>\u0414\u043b\u044f \u0432\u043d\u0435\u0434\u0440\u0435\u043d\u0438\u044f \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0435\u0439 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435 <code>rapidy.depends.FromDI</code> (\u0438\u043b\u0438 <code>dishka.FromDishka</code>) \u0438 <code>rapidy.depends.FromComponent</code> (\u0438\u043b\u0438 <code>dishka.FromComponent</code>).</p> <pre><code>from rapidy import Rapidy\nfrom rapidy.http import get\nfrom rapidy.depends import FromDI, provide, Provider, Scope\n\nclass FooProvider(Provider):\n    @provide(scope=Scope.REQUEST)\n    async def c(self) -&gt; int:\n        return 1\n\n@get('/')\nasync def handler(c: FromDI[int]) -&gt; dict:\n    return {\"value\": c}\n\napp = Rapidy(\n    http_route_handlers=[handler],\n    di_providers=[FooProvider()],\n)\n</code></pre> <pre><code>from typing import Annotated\n\nfrom rapidy import Rapidy\nfrom rapidy.http import get\nfrom rapidy.depends import FromComponent, provide, Provider, Scope\n\nclass FooProvider(Provider):\n    @provide(scope=Scope.REQUEST)\n    async def c(self) -&gt; int:\n        return 1\n\n@get('/')\nasync def handler(c: Annotated[int, FromComponent()]) -&gt; dict:\n    return {\"value\": c}\n\napp = Rapidy(\n    http_route_handlers=[handler],\n    di_providers=[FooProvider()],\n)\n</code></pre>"},{"location":"ru/docs/dependency_injection/#_3","title":"\u041e\u0441\u043e\u0431\u0435\u043d\u043d\u043e\u0441\u0442\u0438","text":""},{"location":"ru/docs/dependency_injection/#_4","title":"\u0414\u043e\u0441\u0442\u0443\u043f \u043a \u043a\u043e\u043d\u0442\u0435\u0439\u043d\u0435\u0440\u0443","text":"<p>\u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0442\u0435\u043a\u0443\u0449\u0438\u0439 \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u044b\u0439 \u043a\u043e\u043d\u0442\u0435\u0439\u043d\u0435\u0440 \u043c\u043e\u0436\u043d\u043e \u0447\u0435\u0440\u0435\u0437 \u043a\u043e\u0440\u043d\u0435\u0432\u043e\u0435 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435 <code>Rapidy</code>. \u0418\u0437 \u0434\u043e\u0447\u0435\u0440\u043d\u0435\u0433\u043e \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f \u043e\u043d \u0431\u0443\u0434\u0435\u0442 \u0440\u0430\u0432\u0435\u043d <code>None</code>.</p> <pre><code>from rapidy import Rapidy\n\nroot_app = Rapidy()\nv1_app = Rapidy()\nroot_app.add_subapp('/v1', v1_app)\n\nroot_app.di_container  # AsyncContainer\nv1_app.di_container  # None\n</code></pre>"},{"location":"ru/docs/dependency_injection/#middleware","title":"\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u0438 \u0438 middleware","text":"<p><code>dishka</code> \u043f\u043e\u043b\u043d\u043e\u0441\u0442\u044c\u044e \u0438\u043d\u0442\u0435\u0433\u0440\u0438\u0440\u043e\u0432\u0430\u043d\u0430 \u0441 <code>Rapidy</code>, \u0438 \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u0435\u0442 \u0430\u0432\u0442\u043e\u0438\u043d\u0436\u0435\u043a\u0442 \u0432\u043e \u0432\u0441\u0435\u0445 \u0432\u0438\u0434\u0430\u0445 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u043e\u0432:</p> <pre><code># providers.py\nfrom rapidy.depends import provide, Provider, Scope\n\nclass FooProvider(Provider):\n    @provide(scope=Scope.REQUEST)\n    async def c(self) -&gt; int:\n        return 1\n</code></pre> <p>\u041a\u043e\u043d\u0442\u0440\u043e\u043b\u043b\u0435\u0440\u044b:</p> <pre><code>from rapidy import Rapidy\nfrom rapidy.http import controller, get\nfrom rapidy.depends import FromDI\nfrom .providers import FooProvider\n\n@controller('/')\nclass MyController:\n    @get()\n    async def handler(self, c: FromDI[int]) -&gt; dict:\n        return {\"value\": c}\n\napp = Rapidy(http_route_handlers=[MyController], di_providers=[FooProvider()])\n</code></pre> <p>View-\u043a\u043b\u0430\u0441\u0441\u044b:</p> <pre><code>from rapidy import Rapidy\nfrom rapidy.web import View\nfrom rapidy.depends import FromDI\nfrom .providers import FooProvider\n\nclass FooView(View):\n    async def get(self, c: FromDI[int]) -&gt; dict:\n        return {\"value\": c}\n\napp = Rapidy(di_providers=[FooProvider()])\napp.router.add_view('/', FooView)\n</code></pre> <p>Middleware:</p> <pre><code>from rapidy import Rapidy\nfrom rapidy.http import Request, StreamResponse, get, middleware\nfrom rapidy.typedefs import CallNext\nfrom rapidy.depends import FromDI\nfrom .providers import FooProvider\n\n@middleware\nasync def some_middleware(\n    request: Request,\n    call_next: CallNext,\n    c: FromDI[int],\n) -&gt; StreamResponse:\n    print({\"value\": c})\n    return await call_next(request)\n\n@get('/')\nasync def handler(c: FromDI[int]) -&gt; dict:\n    return {\"value\": c}\n\napp = Rapidy(\n    middlewares=[some_middleware],\n    http_route_handlers=[handler],\n    di_providers=[FooProvider()],\n)\n</code></pre>"},{"location":"ru/docs/dependency_injection/#_5","title":"\u0414\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u043e","text":"<ul> <li>\u0415\u0441\u043b\u0438 \u0443 \u043f\u0435\u0440\u0432\u043e\u0433\u043e \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u0430 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u0430 \u043d\u0435\u0442 \u0430\u043d\u043d\u043e\u0442\u0430\u0446\u0438\u0438, <code>Rapidy</code> \u043f\u0440\u043e\u043f\u0443\u0441\u0442\u0438\u0442 \u0435\u0433\u043e \u0438 \u043f\u0440\u043e\u0434\u043e\u043b\u0436\u0438\u0442 \u0438\u043d\u0436\u0435\u043a\u0442.</li> <li>\u041f\u043e\u0434\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u044e\u0442\u0441\u044f \u0432\u0441\u0435 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u0438 <code>dishka</code>: \u0444\u0430\u0431\u0440\u0438\u043a\u0438, \u0432\u043b\u043e\u0436\u0435\u043d\u043d\u044b\u0435 \u043f\u0440\u043e\u0432\u0430\u0439\u0434\u0435\u0440\u044b, \u043a\u043e\u043d\u0442\u0440\u043e\u043b\u044c \u0436\u0438\u0437\u043d\u0435\u043d\u043d\u043e\u0433\u043e \u0446\u0438\u043a\u043b\u0430 \u0438 \u044f\u0432\u043d\u043e\u0435 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0435\u0439.</li> </ul>"},{"location":"ru/docs/dependency_injection/#_6","title":"\u0412\u043d\u0435\u0448\u043d\u0438\u0439 \u043a\u043e\u043d\u0442\u0435\u0439\u043d\u0435\u0440","text":"<p>\u0412\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u0432\u0440\u0443\u0447\u043d\u0443\u044e \u043f\u0435\u0440\u0435\u0434\u0430\u0442\u044c \u0441\u0432\u043e\u0439 <code>AsyncContainer</code> \u2014 \u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u0435\u0441\u043b\u0438 \u043a\u043e\u043d\u0442\u0435\u0439\u043d\u0435\u0440 \u0441\u043e\u0437\u0434\u0430\u0451\u0442\u0441\u044f \u0437\u0430\u0440\u0430\u043d\u0435\u0435 \u0438 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u0432 \u0440\u0430\u0437\u043d\u044b\u0445 \u043c\u0435\u0441\u0442\u0430\u0445.</p> <pre><code>from rapidy import Rapidy\nfrom rapidy.depends import make_async_container  # or: from dishka import make_async_container\nfrom .providers import FooProvider\n\ncontainer = make_async_container(FooProvider())\n\nasync def shutdown_di_container() -&gt; None:\n    await container.close()\n\napp = Rapidy(\n   di_container=container,\n   http_route_handlers=[...],\n   on_shutdown=[shutdown_di_container],  # manual shutdown\n)\n</code></pre> <p>\u0412 \u044d\u0442\u043e\u043c \u0441\u043b\u0443\u0447\u0430\u0435:</p> <ul> <li><code>Rapidy</code> \u043d\u0435 \u0441\u043e\u0437\u0434\u0430\u0451\u0442 \u043a\u043e\u043d\u0442\u0435\u0439\u043d\u0435\u0440.</li> <li>\u0412\u0441\u0435 <code>di_*</code> \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u0438\u0433\u043d\u043e\u0440\u0438\u0440\u0443\u044e\u0442\u0441\u044f.</li> <li>\u041a\u043e\u043d\u0442\u0435\u0439\u043d\u0435\u0440 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0437\u0430\u043a\u0440\u044b\u0432\u0430\u0442\u044c \u0432\u0440\u0443\u0447\u043d\u0443\u044e.</li> </ul>"},{"location":"ru/docs/dependency_injection/#dishka","title":"\u041e\u0433\u0440\u0430\u043d\u0438\u0447\u0435\u043d\u0438\u044f dishka","text":"<p><code>dishka</code> \u0440\u0430\u0431\u043e\u0442\u0430\u0435\u0442 \u0442\u043e\u043b\u044c\u043a\u043e \u0441 HTTP-\u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u0430\u043c\u0438 \u0438 middleware. \u0415\u0441\u043b\u0438 \u0432\u044b \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0435 \u043a\u043e\u043d\u0442\u0435\u0439\u043d\u0435\u0440 \u0438 \u0432 <code>faststream</code>, \u0438 \u0432 <code>rapidy</code>, \u0432 <code>faststream</code> \u043f\u043e\u0442\u0440\u0435\u0431\u0443\u0435\u0442\u0441\u044f \u044f\u0432\u043d\u043e\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 <code>@inject</code>.</p>"},{"location":"ru/docs/dependency_injection/#rapidy-application-di","title":"\u0410\u0442\u0440\u0438\u0431\u0443\u0442\u044b Rapidy (Application) \u0434\u043b\u044f \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u044f DI","text":""},{"location":"ru/docs/dependency_injection/#di_container","title":"di_container","text":"<p>\u0412\u043d\u0435\u0448\u043d\u0438\u0439 \u043a\u043e\u043d\u0442\u0435\u0439\u043d\u0435\u0440 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0435\u0439.</p> <pre><code>di_container: AsyncContainer | None = None\n</code></pre> <p>\u0415\u0441\u043b\u0438 \u043f\u0435\u0440\u0435\u0434\u0430\u043d <code>di_container</code>, \u043d\u043e\u0432\u044b\u0439 \u043a\u043e\u043d\u0442\u0435\u0439\u043d\u0435\u0440 \u0441\u043e\u0437\u0434\u0430\u043d \u043d\u0435 \u0431\u0443\u0434\u0435\u0442.</p> <p>\u0414\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u044f Dishka \u2014 container.</p>"},{"location":"ru/docs/dependency_injection/#di_providers","title":"di_providers","text":"<p>\u0421\u043f\u0438\u0441\u043e\u043a \u043f\u0440\u043e\u0432\u0430\u0439\u0434\u0435\u0440\u043e\u0432 \u0434\u043b\u044f \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438.</p> <pre><code>di_providers: Sequence[BaseProvider] = ()\n</code></pre> <p>\u0418\u0433\u043d\u043e\u0440\u0438\u0440\u0443\u0435\u0442\u0441\u044f, \u0435\u0441\u043b\u0438 \u043f\u0435\u0440\u0435\u0434\u0430\u043d <code>di_container</code>.</p> <p>\u0414\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u044f Dishka \u2014 providers.</p>"},{"location":"ru/docs/dependency_injection/#di_scopes","title":"di_scopes","text":"<p>\u041a\u043b\u0430\u0441\u0441 \u043e\u0431\u043b\u0430\u0441\u0442\u0438 \u0432\u0438\u0434\u0438\u043c\u043e\u0441\u0442\u0438 (scope).</p> <pre><code>di_scopes: type[BaseScope] = Scope\n</code></pre> <p>\u0414\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u044f Dishka \u2014 scopes.</p>"},{"location":"ru/docs/dependency_injection/#di_context","title":"di_context","text":"<p>\u0414\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0439 \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442 \u0434\u043b\u044f \u043f\u0440\u043e\u0432\u0430\u0439\u0434\u0435\u0440\u043e\u0432.</p> <pre><code>di_context: dict[Any, Any] | None = None\n</code></pre> <p>\u0414\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u044f Dishka \u2014 context.</p>"},{"location":"ru/docs/dependency_injection/#di_lock_factory","title":"di_lock_factory","text":"<p>\u0424\u0430\u0431\u0440\u0438\u043a\u0430 \u0434\u043b\u044f \u0431\u043b\u043e\u043a\u0438\u0440\u043e\u0432\u043e\u043a \u043a\u043e\u043d\u0442\u0435\u0439\u043d\u0435\u0440\u0430.</p> <pre><code>di_lock_factory: Callable[[], contextlib.AbstractAsyncContextManager[Any]] | None = Lock\n</code></pre> <p>\u0414\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u044f Dishka \u2014 lock_factory.</p> <pre><code>import threading\n\ncontainer = make_container(provider, lock_factory=threading.Lock):\nwith container(lock_factory=threading.Lock) as nested_container:\n    ...\n\nimport asyncio\n\ncontainer = make_async_container(provider, lock_factory=asyncio.Lock)\nasync with container(lock_factory=asyncio.Lock) as nested_container:\n    ...\n</code></pre>"},{"location":"ru/docs/dependency_injection/#di_skip_validation","title":"di_skip_validation","text":"<p>\u0424\u043b\u0430\u0433, \u043e\u0442\u043a\u043b\u044e\u0447\u0430\u044e\u0449\u0438\u0439 \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0443 \u0442\u0438\u043f\u043e\u0432 \u043f\u0440\u043e\u0432\u0430\u0439\u0434\u0435\u0440\u043e\u0432.</p> <pre><code>di_skip_validation: bool = False\n</code></pre> <p>\u0414\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u044f Dishka \u2014 skip_validation.</p>"},{"location":"ru/docs/dependency_injection/#di_start_scope","title":"di_start_scope","text":"<p>\u041d\u0430\u0447\u0430\u043b\u044c\u043d\u044b\u0439 scope \u043a\u043e\u043d\u0442\u0435\u0439\u043d\u0435\u0440\u0430.</p> <pre><code>di_start_scope: BaseScope | None = None\n</code></pre> <p>\u0414\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u044f Dishka \u2014 start_scope.</p>"},{"location":"ru/docs/dependency_injection/#di_validation_settings","title":"di_validation_settings","text":"<p>\u041d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0438 \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u0438 \u043a\u043e\u043d\u0442\u0435\u0439\u043d\u0435\u0440\u0430.</p> <pre><code>di_validation_settings: ValidationSettings = DEFAULT_VALIDATION\n</code></pre> <p>\u0414\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u044f Dishka \u2014 alias.</p> <p>\u0414\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u044f Dishka \u2014 from_context.</p> <p>\u0414\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u044f Dishka \u2014 provide.</p>"},{"location":"ru/docs/encoders/#_1","title":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435","text":"<p>jsonify \u2014 \u044d\u0442\u043e <code>Rapidy</code>-\u043a\u043e\u0434\u0438\u0440\u043e\u0432\u0449\u0438\u043a, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u0434\u043b\u044f \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u044f \u0441\u043b\u043e\u0436\u043d\u044b\u0445 python-\u043e\u0431\u044a\u0435\u043a\u0442\u043e\u0432 \u043a \u0431\u043e\u043b\u0435\u0435 \u043f\u0440\u043e\u0441\u0442\u044b\u043c python-\u043e\u0431\u044a\u0435\u043a\u0442\u0430\u043c \u0438\u043b\u0438 \u0441\u0442\u0440\u043e\u043a\u0435.</p> <p><code>jsonify</code> \u0441\u0438\u043b\u044c\u043d\u043e \u0443\u043f\u0440\u043e\u0449\u0430\u0435\u0442 \u043f\u0440\u043e\u0446\u0435\u0441\u0441 \u0441\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u044f \u0438 \u043e\u0442\u043f\u0440\u0430\u0432\u043a\u0438 \u0441\u043b\u043e\u0436\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445.</p> <pre><code>from datetime import datetime\nfrom decimal import Decimal\nfrom pydantic import BaseModel, Field\nfrom rapidy.encoders import jsonify\n\nclass InnerData(BaseModel):\n    text: str = 'text'\n\nclass ComplexData(BaseModel):\n    decimal: Decimal = Decimal('1.22223311')\n    date: datetime = datetime.now()\n    inner: InnerData = Field(default_factory=InnerData)\n\njsonify('text')  # 'text'\njsonify('text', dumps=True)  # '\"text\"'\n\njsonify(Decimal(\"1.22223311\"))  # '1.22223311'\n\njsonify(ComplexData())  # {'decimal': '1.22223311', 'date': '2024-10-30T10:51:07.884276', 'inner': {'text': 'text'}}\njsonify(ComplexData(), dumps=True)  # '{\"decimal\": \"1.22223311\", \"date\": \"2024-10-30T10:51:07.884276\", \"inner\": {\"text\": \"text\"}}'\n</code></pre> <p>jsonify \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u044b\u0432\u0430\u0442\u044c \u043b\u044e\u0431\u043e\u0439 \u043e\u0431\u044a\u0435\u043a\u0442 <code>python</code> \u0432 \u0441\u0442\u0440\u043e\u043a\u0443 \u0438\u043b\u0438 \u0431\u043e\u043b\u0435\u0435 \u043f\u0440\u043e\u0441\u0442\u043e\u0439 \u043e\u0431\u044a\u0435\u043a\u0442, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d \u0432 \u0444\u043e\u0440\u043c\u0430\u0442 <code>json</code>.</p> <p>\u0412\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c <code>jsonify</code>, \u0447\u0442\u043e\u0431\u044b \u043f\u043e\u0434\u0433\u043e\u0442\u043e\u0432\u0438\u0442\u044c \u0434\u0430\u043d\u043d\u044b\u0435 \u0434\u043b\u044f \u0441\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u044f \u0432 \u0431\u0430\u0437\u0443 \u0434\u0430\u043d\u043d\u044b\u0445 (\u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u0434\u043b\u044f <code>MongoDB</code>/<code>Redis</code> \u0438\u043b\u0438 \u043a\u0430\u043a \u043f\u043e\u043b\u0435 <code>JSON</code>/<code>JSONB</code> \u0432 <code>Postgres</code>).</p> <p><code>Rapidy</code> \u0442\u0430\u043a\u0436\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442 <code>jsonify</code> \u0432\u043d\u0443\u0442\u0440\u0438 \u0441\u0435\u0431\u044f \u043f\u0440\u0438 \u043f\u043e\u0434\u0433\u043e\u0442\u043e\u0432\u043a\u0435 \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u044b\u0445 \u043e\u0442\u0432\u0435\u0442\u043e\u0432.</p> <p><code>Decimal</code> \u0432\u0441\u0435\u0433\u0434\u0430 \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u0443\u0435\u0442\u0441\u044f \u0432 \u0441\u0442\u0440\u043e\u043a\u0443.</p>"},{"location":"ru/docs/encoders/#jsonify_1","title":"\u0410\u0442\u0440\u0438\u0431\u0443\u0442\u044b <code>jsonify</code>","text":""},{"location":"ru/docs/encoders/#obj","title":"obj","text":"<p>obj: <code>Any</code> \u2014 \u043e\u0431\u044a\u0435\u043a\u0442 \u0434\u043b\u044f \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u044f (\u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u043f\u0440\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u0438 \u0447\u0435\u043c \u0443\u0433\u043e\u0434\u043d\u043e).</p>"},{"location":"ru/docs/encoders/#include","title":"include","text":"<p>include: <code>set[str] | dict[str, Any] | None = None</code> \u2014 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440 Pydantic <code>include</code>, \u043f\u0435\u0440\u0435\u0434\u0430\u0432\u0430\u0435\u043c\u044b\u0439 \u043c\u043e\u0434\u0435\u043b\u044f\u043c Pydantic \u0434\u043b\u044f \u0443\u043a\u0430\u0437\u0430\u043d\u0438\u044f \u043f\u043e\u043b\u0435\u0439, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043d\u0443\u0436\u043d\u043e \u0432\u043a\u043b\u044e\u0447\u0438\u0442\u044c. <pre><code>from pydantic import BaseModel, Field\nfrom rapidy.encoders import jsonify\n\nclass Result(BaseModel):\n    value: str = Field('data', alias='someValue')\n    another_value: str = Field('another_data', alias='someAnotherValue')\n\njsonify(\n    Result(),\n    include={'value'},\n)\n# {'someValue': 'data'}\n</code></pre></p>"},{"location":"ru/docs/encoders/#exclude","title":"exclude","text":"<p>exclude: <code>set[str] | dict[str, Any] | None = None</code> \u2014 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440 Pydantic <code>exclude</code>, \u043f\u0435\u0440\u0435\u0434\u0430\u0432\u0430\u0435\u043c\u044b\u0439 \u043c\u043e\u0434\u0435\u043b\u044f\u043c Pydantic \u0434\u043b\u044f \u0443\u043a\u0430\u0437\u0430\u043d\u0438\u044f \u043f\u043e\u043b\u0435\u0439, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043d\u0443\u0436\u043d\u043e \u0438\u0441\u043a\u043b\u044e\u0447\u0438\u0442\u044c. <pre><code>from pydantic import BaseModel, Field\nfrom rapidy.encoders import jsonify\n\nclass Result(BaseModel):\n    value: str = Field('data', alias='someValue')\n    another_value: str = Field('another_data', alias='someAnotherValue')\n\njsonify(\n    Result(),\n    exclude={'value'},\n)\n# {'someAnotherValue': 'another_data'}\n</code></pre></p>"},{"location":"ru/docs/encoders/#by_alias","title":"by_alias","text":"<p>by_alias: <code>bool = True</code> \u2014 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440 Pydantic <code>by_alias</code>, \u043f\u0435\u0440\u0435\u0434\u0430\u0432\u0430\u0435\u043c\u044b\u0439 \u043c\u043e\u0434\u0435\u043b\u044f\u043c Pydantic, \u0447\u0442\u043e\u0431\u044b \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0438\u0442\u044c, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u043b\u0438 \u043f\u0440\u0438 \u0432\u044b\u0432\u043e\u0434\u0435 \u0438\u043c\u0435\u043d\u0430 \u043f\u0441\u0435\u0432\u0434\u043e\u043d\u0438\u043c\u043e\u0432 (\u0435\u0441\u043b\u0438 \u043e\u043d\u0438 \u043f\u0440\u0435\u0434\u043e\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u044b) \u0438\u043b\u0438 \u0438\u043c\u0435\u043d\u0430 \u0430\u0442\u0440\u0438\u0431\u0443\u0442\u043e\u0432 Python. <pre><code>from pydantic import BaseModel, Field\nfrom rapidy.encoders import jsonify\n\nclass Result(BaseModel):\n    value: str = Field('data', alias='someValue')\n\njsonify(\n    Result(),\n    by_alias=True,  # &lt;-- default\n)\n# {\"someValue\": \"data\"}\n\n...\n\njsonify(\n    Result(),\n    by_alias=False,\n)\n# {\"value\": \"data\"}\n</code></pre></p>"},{"location":"ru/docs/encoders/#exclude_unset","title":"exclude_unset","text":"<p>exclude_unset: <code>bool = False</code> \u2014 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440 Pydantic <code>exclude_unset</code>, \u043f\u0435\u0440\u0435\u0434\u0430\u0432\u0430\u0435\u043c\u044b\u0439 \u043c\u043e\u0434\u0435\u043b\u044f\u043c Pydantic \u0434\u043b\u044f \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u044f, \u0434\u043e\u043b\u0436\u0435\u043d \u043b\u0438 \u043e\u043d \u0438\u0441\u043a\u043b\u044e\u0447\u0430\u0442\u044c \u0438\u0437 \u0432\u044b\u0432\u043e\u0434\u0430 \u043f\u043e\u043b\u044f, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043d\u0435 \u0431\u044b\u043b\u0438 \u044f\u0432\u043d\u043e \u0437\u0430\u0434\u0430\u043d\u044b (\u0438 \u0438\u043c\u0435\u043b\u0438 \u0442\u043e\u043b\u044c\u043a\u043e \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e). <pre><code>from pydantic import BaseModel, Field\nfrom rapidy.encoders import jsonify\n\nclass Result(BaseModel):\n    value: str = Field('data', alias='someValue')\n    another_value: str = Field('another_data', alias='someAnotherValue')\n\njsonify(\n    Result(someAnotherValue='new_data'),\n    exclude_unset=False,  # &lt;-- default\n)\n# {\"someValue\": \"data\", \"someAnotherValue\": \"new_data\"}\n\n...\n\njsonify(\n    Result(someAnotherValue='new_data'),\n    exclude_unset=True,\n)\n# {\"someAnotherValue\": \"new_data\"}\n</code></pre></p>"},{"location":"ru/docs/encoders/#exclude_defaults","title":"exclude_defaults","text":"<p>exclude_defaults: <code>bool = False</code> \u2014 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440 Pydantic <code>exclude_defaults</code>, \u043f\u0435\u0440\u0435\u0434\u0430\u0432\u0430\u0435\u043c\u044b\u0439 \u043c\u043e\u0434\u0435\u043b\u044f\u043c Pydantic, \u0447\u0442\u043e\u0431\u044b \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0438\u0442\u044c, \u043d\u0443\u0436\u043d\u043e \u043b\u0438 \u0438\u0441\u043a\u043b\u044e\u0447\u0430\u0442\u044c \u0438\u0437 \u0432\u044b\u0432\u043e\u0434\u0430 \u043f\u043e\u043b\u044f, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0438\u043c\u0435\u044e\u0442 \u043e\u0434\u0438\u043d\u0430\u043a\u043e\u0432\u043e\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e, \u0434\u0430\u0436\u0435 \u0435\u0441\u043b\u0438 \u043e\u043d\u0438 \u0431\u044b\u043b\u0438 \u0437\u0430\u0434\u0430\u043d\u044b \u044f\u0432\u043d\u043e. <pre><code>from pydantic import BaseModel, Field\nfrom rapidy.encoders import jsonify\n\nclass Result(BaseModel):\n    value: str = Field('data', alias='someValue')\n\njsonify(\n    Result(),\n    response_exclude_defaults=True,\n)\n# {}\n</code></pre></p>"},{"location":"ru/docs/encoders/#exclude_none","title":"exclude_none","text":"<p>exclude_none: <code>bool = False</code> \u2014 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440 Pydantic <code>exclude_none</code>, \u043f\u0435\u0440\u0435\u0434\u0430\u0432\u0430\u0435\u043c\u044b\u0439 \u043c\u043e\u0434\u0435\u043b\u044f\u043c Pydantic \u0434\u043b\u044f \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u044f, \u043d\u0443\u0436\u043d\u043e \u043b\u0438 \u0438\u0441\u043a\u043b\u044e\u0447\u0430\u0442\u044c \u0438\u0437 \u0432\u044b\u0432\u043e\u0434\u0430 \u043f\u043e\u043b\u044f, \u0438\u043c\u0435\u044e\u0449\u0438\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 <code>None</code>. <pre><code>from pydantic import BaseModel, Field\nfrom rapidy.encoders import jsonify\n\nclass Result(BaseModel):\n    value: str = Field('data', alias='someValue')\n    none_value: None = None\n\njsonify(\n    Result(),\n    exclude_none=True,\n)\n# {\"someValue\": \"data\"}\n\n...\n\njsonify(\n    Result(),\n    exclude_none=False,  # default\n)\n# {\"someValue\": \"data\", \"none_value\": null}\n</code></pre></p>"},{"location":"ru/docs/encoders/#charset","title":"charset","text":"<p>charset: <code>str = 'utf-8'</code> \u2014 \u043d\u0430\u0431\u043e\u0440 \u0441\u0438\u043c\u0432\u043e\u043b\u043e\u0432, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0431\u0443\u0434\u0435\u0442 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c\u0441\u044f \u0434\u043b\u044f \u043a\u043e\u0434\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u0438 \u0434\u0435\u043a\u043e\u0434\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u0434\u0430\u043d\u043d\u044b\u0445 obj. <pre><code>from rapidy.enums import Charset\nfrom rapidy.encoders import jsonify\n\njsonify(\n    'data',\n    charset=Charset.utf32,\n    # or\n    charset='utf32',\n)\n</code></pre></p>"},{"location":"ru/docs/encoders/#dumps","title":"dumps","text":"<p>dumps: <code>bool = True</code> \u2014 \u0444\u043b\u0430\u0433, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u0435\u0442, \u043d\u0443\u0436\u043d\u043e \u043b\u0438 \u0434\u0435\u043b\u0430\u0442\u044c \u0438\u0437 \u0441\u043e\u0437\u0434\u0430\u043d\u043d\u043e\u0433\u043e \u043e\u0431\u044a\u0435\u043a\u0442\u0430 \u0441\u0442\u0440\u043e\u043a\u0443. \u041c\u043e\u0436\u043d\u043e \u0443\u043a\u0430\u0437\u0430\u0442\u044c <code>False</code>, \u0435\u0441\u043b\u0438 \u043e\u0431\u044a\u0435\u043a\u0442 \u0443\u0436\u0435 \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f <code>json</code>-\u0441\u0442\u0440\u043e\u043a\u043e\u0439. <pre><code>from rapidy.encoders import jsonify\n\njsonify('text')  # 'text'\njsonify('text', dumps=True)  # '\"text\"'\n</code></pre></p>"},{"location":"ru/docs/encoders/#dumps_encoder","title":"dumps_encoder","text":"<p>dumps_encoder: <code>Callable = json.dumps</code> \u2014 \u043b\u044e\u0431\u043e\u0439 \u0432\u044b\u0437\u044b\u0432\u0430\u0435\u043c\u044b\u0439 \u043e\u0431\u044a\u0435\u043a\u0442, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0435\u0442 \u043e\u0431\u044a\u0435\u043a\u0442 \u0438 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0441\u0442\u0440\u043e\u043a\u0443 JSON. <pre><code>from typing import Any\nfrom rapidy.encoders import jsonify\n\ndef custom_encoder(obj: Any) -&gt; str:\n    ...\n\njsonify(\n    'data',\n    dumps_encoder=custom_encoder,\n)\n</code></pre></p>"},{"location":"ru/docs/encoders/#custom_encoder","title":"custom_encoder","text":"<p>custom_encoder: <code>Callable | None = None</code> \u2014 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440 Pydantic <code>custom_encoder</code>, \u043f\u0435\u0440\u0435\u0434\u0430\u0432\u0430\u0435\u043c\u044b\u0439 \u0432 \u043c\u043e\u0434\u0435\u043b\u0438 Pydantic \u0434\u043b\u044f \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u043e\u0433\u043e \u043a\u043e\u0434\u0438\u0440\u043e\u0432\u0449\u0438\u043a\u0430.</p>"},{"location":"ru/docs/enums/#_1","title":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435","text":"<p><code>Rapidy</code> \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u0435\u0442 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0432\u0438\u0434\u043e\u0432 \u043f\u0435\u0440\u0435\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u0439, \u0447\u0442\u043e \u0434\u0435\u043b\u0430\u0435\u0442 \u043a\u043e\u0434 \u0431\u043e\u043b\u0435\u0435 \u0447\u0438\u0442\u0430\u0435\u043c\u044b\u043c \u0438 \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u0435\u043c\u044b\u043c.</p> <p>\u0412\u043c\u0435\u0441\u0442\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f \"\u043c\u0430\u0433\u0438\u0447\u0435\u0441\u043a\u0438\u0445\" \u0447\u0438\u0441\u0435\u043b \u0438\u043b\u0438 \u0441\u0442\u0440\u043e\u043a \u043f\u0440\u0438\u043c\u0435\u043d\u044f\u044e\u0442\u0441\u044f \u043f\u043e\u043d\u044f\u0442\u043d\u044b\u0435 \u0438\u043c\u0435\u043d\u0430, \u0447\u0442\u043e \u0441\u043f\u043e\u0441\u043e\u0431\u0441\u0442\u0432\u0443\u0435\u0442 \u0443\u043b\u0443\u0447\u0448\u0435\u043d\u0438\u044e \u044f\u0441\u043d\u043e\u0441\u0442\u0438 \u043a\u043e\u0434\u0430 \u0438 \u0441\u043d\u0438\u0436\u0435\u043d\u0438\u044e \u0432\u0435\u0440\u043e\u044f\u0442\u043d\u043e\u0441\u0442\u0438 \u043e\u0448\u0438\u0431\u043e\u043a.</p> <p>\u0412\u0441\u0435 \u043f\u0435\u0440\u0435\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u044f (<code>enum</code>) \u043d\u0430\u0445\u043e\u0434\u044f\u0442\u0441\u044f \u0432 \u043c\u043e\u0434\u0443\u043b\u0435 <code>rapidy.enums</code>.</p>"},{"location":"ru/docs/enums/#contenttype","title":"ContentType","text":"<p><code>rapidy.enums.ContentType</code> \u2014 \u043f\u0435\u0440\u0435\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u0435, \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0449\u0435\u0435 \u0447\u0430\u0441\u0442\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c\u044b\u0435 <code>MIME-\u0442\u0438\u043f\u044b</code>.</p> <pre><code>class ContentType(str, Enum):\n    any = '*/*'\n\n    # application\n    json = 'application/json'\n    ldap = 'application/ld+json'\n    app_xml = 'application/xml'\n    zip = 'application/zip'\n    pdf = 'application/pdf'\n    stream = 'application/octet-stream'\n    x_www_form = 'application/x-www-form-urlencoded'\n\n    # text\n    text_plain = 'text/plain'\n    text_html = 'text/html'\n    text_css = 'text/css'\n    text_csv = 'text/csv'\n    text_js = 'text/javascript'\n    text_xml = 'text/xml'\n    text_any = 'text/*'\n\n    # multipart\n    m_part_mixed = 'multipart/mixed'\n    m_part_alt = 'multipart/alternative'\n    m_part_related = 'multipart/related'  # using by MHTML (HTML mail)\n    m_part_form_data = 'multipart/form-data'\n\n    # image\n    img_jpeg = 'image/jpeg'\n    img_png = 'image/png'\n    img_gif = 'image/gif'\n    img_tiff = 'image/tiff'\n    img_x_ico = 'image/x-icon'\n    img_ms_ico = 'image/vnd.microsoft.icon'\n    img_svg_xml = 'image/svg+xml'\n    img_vnd_djvu = 'image/vnd.djvu'\n\n    # audio\n    audio_mpeg = 'audio/mpeg'\n    audio_x_ms_wma = 'audio/x-ms-wma'\n    audio_x_wav = 'audio/x-wav'\n\n    # video\n    video_mpeg = 'video/mpeg'\n    video_mp4 = 'video/mp4'\n    video_quicktime = 'video/quicktime'\n    video_x_ms_wmv = 'video/x-ms-wmv'\n    video_x_flv = 'video/x-flv'\n    video_webm = 'video/webm'\n</code></pre> <p>\u041d\u0435 \u043d\u0430\u0448\u043b\u0438 \u0447\u0442\u043e \u0438\u0441\u043a\u0430\u043b\u0438?</p> <p>\u0415\u0441\u043b\u0438 \u0432\u044b \u043d\u0435 \u043d\u0430\u0448\u043b\u0438 \u0447\u0442\u043e \u0438\u0441\u043a\u0430\u043b\u0438 \u0432\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u0443\u043a\u0430\u0437\u0430\u0442\u044c <code>mime-type</code> \u0441\u0442\u0440\u043e\u043a\u043e\u0439 (<code>application/some-type</code>) \u0438\u043b\u0438 \u043e\u0444\u043e\u0440\u043c\u0438\u0442\u044c \u0432\u0430\u0448\u0435 \u043f\u0440\u0435\u0434\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u043f\u043e \u0440\u0430\u0441\u0448\u0438\u0440\u0435\u043d\u0438\u044e <code>ContentType</code> \u0437\u0434\u0435\u0441\u044c.</p>"},{"location":"ru/docs/enums/#charset","title":"Charset","text":"<p><code>rapidy.enums.Charset</code> \u2014 \u043f\u0435\u0440\u0435\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u0435, \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0449\u0435\u0435 \u0447\u0430\u0441\u0442\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c\u044b\u0435 \u043a\u043e\u0434\u0438\u0440\u043e\u0432\u043a\u0438 \u0441\u0438\u043c\u0432\u043e\u043b\u043e\u0432 (<code>charset</code>).</p> <pre><code>class Charset(str, Enum):\n    utf8 = 'utf-8'\n    utf16 = 'utf-16'\n    utf32 = 'utf-32'\n</code></pre> <p>\u041d\u0435 \u043d\u0430\u0448\u043b\u0438 \u043d\u0443\u0436\u043d\u0443\u044e \u043a\u043e\u0434\u0438\u0440\u043e\u0432\u043a\u0443?</p> <p>\u0415\u0441\u043b\u0438 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e\u0439 \u043a\u043e\u0434\u0438\u0440\u043e\u0432\u043a\u0438 \u043d\u0435\u0442 \u0432 \u0441\u043f\u0438\u0441\u043a\u0435, \u0432\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u0443\u043a\u0430\u0437\u0430\u0442\u044c \u0435\u0451 \u0441\u0442\u0440\u043e\u043a\u043e\u0439 (<code>utf-8</code>) \u0438\u043b\u0438 \u043f\u0440\u0435\u0434\u043b\u043e\u0436\u0438\u0442\u044c \u0435\u0451 \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0432 <code>Charset</code> \u0437\u0434\u0435\u0441\u044c.</p>"},{"location":"ru/docs/enums/#headername","title":"HeaderName","text":"<p><code>rapidy.enums.HeaderName</code> \u2014 \u043f\u0435\u0440\u0435\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u0435, \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0449\u0435\u0435 \u0447\u0430\u0441\u0442\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c\u044b\u0435 \u0437\u0430\u0433\u043e\u043b\u043e\u0432\u043a\u0438 HTTP.</p> <pre><code>class HeaderName(str, Enum):\n    content_type = 'Content-Type'\n    content_length = 'Content-Length'\n    content_encoding = 'Content-Encoding'\n    content_language = 'Content-Language'\n    content_location = 'Content-Location'\n    content_md5 = 'Content-MD5'\n    content_range = 'Content-Range'\n    expires = 'Expires'\n    last_modified = 'Last-Modified'\n\n    host = 'Host'\n    user_agent = 'User-Agent'\n    cookie = 'Cookie'\n\n    etag = 'ETag'\n    location = 'Location'\n    server = 'Server'\n    set_cookie = 'Set-Cookie'\n    retry_after = 'Retry-After'\n\n    authorization = 'Authorization'\n    www_authenticate = 'WWW-Authenticate'\n    proxy_authenticate = 'Proxy-Authenticate'\n    proxy_authorization = 'Proxy-Authorization'\n</code></pre> <p>\u041d\u0435 \u043d\u0430\u0448\u043b\u0438 \u043d\u0443\u0436\u043d\u044b\u0439 \u0437\u0430\u0433\u043e\u043b\u043e\u0432\u043e\u043a?</p> <p>\u0415\u0441\u043b\u0438 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e\u0433\u043e \u0437\u0430\u0433\u043e\u043b\u043e\u0432\u043a\u0430 \u043d\u0435\u0442 \u0432 \u0441\u043f\u0438\u0441\u043a\u0435, \u0432\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u0443\u043a\u0430\u0437\u0430\u0442\u044c \u0435\u0433\u043e \u0441\u0442\u0440\u043e\u043a\u043e\u0439 (<code>Awesome-Header</code>) \u0438\u043b\u0438 \u043f\u0440\u0435\u0434\u043b\u043e\u0436\u0438\u0442\u044c \u0435\u0433\u043e \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0432 <code>HeaderName</code> \u0437\u0434\u0435\u0441\u044c.</p>"},{"location":"ru/docs/lifespan/#_1","title":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435","text":"<p>Lifespan \u2014 \u044d\u0442\u043e \u043c\u0435\u043d\u0435\u0434\u0436\u0435\u0440 \u0436\u0438\u0437\u043d\u0435\u043d\u043d\u043e\u0433\u043e \u0446\u0438\u043a\u043b\u0430 \u0444\u043e\u043d\u043e\u0432\u044b\u0445 \u0437\u0430\u0434\u0430\u0447 \u0432 <code>Rapidy</code>.</p> <p>\u041e\u043d \u0443\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 \u0437\u0430\u0434\u0430\u0447\u0430\u043c\u0438, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0434\u043e\u043b\u0436\u043d\u044b \u0431\u044b\u0442\u044c \u0437\u0430\u043f\u0443\u0449\u0435\u043d\u044b \u0434\u043e \u0438\u043b\u0438 \u043f\u043e\u0441\u043b\u0435 \u0441\u0442\u0430\u0440\u0442\u0430 \u0441\u0435\u0440\u0432\u0435\u0440\u0430, \u043b\u0438\u0431\u043e \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0442\u044c\u0441\u044f \u043f\u043e\u0441\u0442\u043e\u044f\u043d\u043d\u043e.</p>"},{"location":"ru/docs/lifespan/#on_startup","title":"on_startup","text":"<p>on_startup \u2014 \u044d\u0442\u043e \u0437\u0430\u0434\u0430\u0447\u0438, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0437\u0430\u043f\u0443\u0441\u043a\u0430\u044e\u0442\u0441\u044f \u0432 \u0446\u0438\u043a\u043b\u0435 \u0441\u043e\u0431\u044b\u0442\u0438\u0439 \u0441\u0440\u0430\u0437\u0443 \u043f\u043e\u0441\u043b\u0435 \u0441\u0442\u0430\u0440\u0442\u0430 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f \u0432\u043c\u0435\u0441\u0442\u0435 \u0441 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u043e\u043c \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432.</p> <p>\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u0438 <code>on_startup</code> \u0434\u043e\u043b\u0436\u043d\u044b \u0438\u043c\u0435\u0442\u044c \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0443\u044e \u0441\u0438\u0433\u043d\u0430\u0442\u0443\u0440\u0443.</p> <p><pre><code>from rapidy import Rapidy\n\ndef startup() -&gt; None:\n    print('startup')\n\nrapidy = Rapidy(on_startup=[startup])\n</code></pre> <pre><code>from rapidy import Rapidy\n\ndef startup(rapidy: Rapidy) -&gt; None:\n    print(f'startup, application: {app}')\n\nrapidy = Rapidy(on_startup=[startup])\n</code></pre> <pre><code>from rapidy import Rapidy\n\nasync def async_startup() -&gt; None:\n    print('async_startup')\n\nrapidy = Rapidy(on_startup=[async_startup])\n</code></pre> <pre><code>from rapidy import Rapidy\n\nasync def async_startup(rapidy: Rapidy) -&gt; None:\n    print(f'async_startup, application: {app}')\n\nrapidy = Rapidy(on_startup=[async_startup])\n</code></pre></p> <p>\u0415\u0441\u043b\u0438 \u0443 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u0430 \u0435\u0441\u0442\u044c \u0430\u0442\u0440\u0438\u0431\u0443\u0442\u044b, \u043f\u0435\u0440\u0432\u044b\u043c \u0432\u0441\u0435\u0433\u0434\u0430 \u0431\u0443\u0434\u0435\u0442 \u043f\u0435\u0440\u0435\u0434\u0430\u0432\u0430\u0442\u044c\u0441\u044f \u0442\u0435\u043a\u0443\u0449\u0438\u0439 \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440 <code>Rapidy</code>.</p> <p>\u0414\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u043e\u0432 \u0432 \u0443\u0436\u0435 \u0441\u043e\u0437\u0434\u0430\u043d\u043d\u044b\u0439 \u043e\u0431\u044a\u0435\u043a\u0442 <code>Rapidy</code>.</p> <pre><code>from rapidy import Rapidy\n\nasync def startup() -&gt; None:\n    print('startup')\n\nrapidy = Rapidy()\nrapidy.lifespan.on_startup.append(startup)\n</code></pre>"},{"location":"ru/docs/lifespan/#on_shutdown","title":"on_shutdown","text":"<p>on_shutdown \u2014 \u044d\u0442\u043e \u0437\u0430\u0434\u0430\u0447\u0438, \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0435\u043c\u044b\u0435 \u043f\u043e\u0441\u043b\u0435 \u043e\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0438 \u0441\u0435\u0440\u0432\u0435\u0440\u0430.</p> <p>\u042d\u0442\u043e\u0442 \u043c\u0435\u0445\u0430\u043d\u0438\u0437\u043c \u043c\u043e\u0436\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0434\u043b\u044f \u043a\u043e\u0440\u0440\u0435\u043a\u0442\u043d\u043e\u0433\u043e \u0437\u0430\u0432\u0435\u0440\u0448\u0435\u043d\u0438\u044f \u0434\u043e\u043b\u0433\u043e\u0436\u0438\u0432\u0443\u0449\u0438\u0445 \u0441\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u0439, \u0442\u0430\u043a\u0438\u0445 \u043a\u0430\u043a \u0432\u0435\u0431-\u0441\u043e\u043a\u0435\u0442\u044b \u0438\u043b\u0438 \u043f\u043e\u0442\u043e\u043a\u043e\u0432\u0430\u044f \u043f\u0435\u0440\u0435\u0434\u0430\u0447\u0430 \u0434\u0430\u043d\u043d\u044b\u0445.</p> <p>\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u0438 <code>on_shutdown</code> \u0434\u043e\u043b\u0436\u043d\u044b \u0438\u043c\u0435\u0442\u044c \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0443\u044e \u0441\u0438\u0433\u043d\u0430\u0442\u0443\u0440\u0443.</p> <p><pre><code>from rapidy import Rapidy\n\ndef shutdown() -&gt; None:\n    print('shutdown')\n\nrapidy = Rapidy(on_shutdown=[shutdown])\n</code></pre> <pre><code>from rapidy import Rapidy\n\ndef shutdown(rapidy: Rapidy) -&gt; None:\n    print(f'shutdown, application: {rapidy}')\n\nrapidy = Rapidy(on_shutdown=[shutdown])\n</code></pre> <pre><code>from rapidy import Rapidy\n\nasync def async_shutdown() -&gt; None:\n    print('async_shutdown')\n\nrapidy = Rapidy(on_shutdown=[async_shutdown])\n</code></pre> <pre><code>from rapidy import Rapidy\n\nasync def async_shutdown(rapidy: Rapidy) -&gt; None:\n    print(f'async_shutdown, application: {rapidy}')\n\nrapidy = Rapidy(on_shutdown=[async_shutdown])\n</code></pre></p> <p>\u0415\u0441\u043b\u0438 \u0443 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u0430 \u0435\u0441\u0442\u044c \u0430\u0442\u0440\u0438\u0431\u0443\u0442\u044b, \u043f\u0435\u0440\u0432\u044b\u043c \u0432\u0441\u0435\u0433\u0434\u0430 \u0431\u0443\u0434\u0435\u0442 \u043f\u0435\u0440\u0435\u0434\u0430\u0432\u0430\u0442\u044c\u0441\u044f \u0442\u0435\u043a\u0443\u0449\u0438\u0439 \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440 <code>Application</code>.</p> <p>\u0414\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u043e\u0432 \u0432 \u0443\u0436\u0435 \u0441\u043e\u0437\u0434\u0430\u043d\u043d\u044b\u0439 \u043e\u0431\u044a\u0435\u043a\u0442 <code>Application</code>.</p> <pre><code>from rapidy import Rapidy\n\nasync def shutdown() -&gt; None:\n    print('shutdown')\n\nrapidy = Rapidy()\nrapidy.lifespan.on_shutdown.append(shutdown)\n</code></pre>"},{"location":"ru/docs/lifespan/#on_cleanup","title":"on_cleanup","text":"<p>on_cleanup \u2014 \u044d\u0442\u043e \u0437\u0430\u0434\u0430\u0447\u0438, \u0437\u0430\u043f\u0443\u0441\u043a\u0430\u0435\u043c\u044b\u0435 \u043f\u043e\u0441\u043b\u0435 \u043e\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0438 \u0441\u0435\u0440\u0432\u0435\u0440\u0430 \u0438 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0432\u0441\u0435\u0445 <code>on_shutdown</code> \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u043e\u0432.</p> <p>\u042d\u0442\u043e\u0442 \u0441\u0438\u0433\u043d\u0430\u043b \u043c\u043e\u0436\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c, \u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u0434\u043b\u044f \u043a\u043e\u0440\u0440\u0435\u043a\u0442\u043d\u043e\u0433\u043e \u0437\u0430\u043a\u0440\u044b\u0442\u0438\u044f \u0441\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u0439 \u0441 \u0431\u0430\u0437\u043e\u0439 \u0434\u0430\u043d\u043d\u044b\u0445.</p> <p>\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u0438 <code>on_cleanup</code> \u0434\u043e\u043b\u0436\u043d\u044b \u0438\u043c\u0435\u0442\u044c \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0443\u044e \u0441\u0438\u0433\u043d\u0430\u0442\u0443\u0440\u0443.</p> <p><pre><code>from rapidy import Rapidy\n\ndef cleanup() -&gt; None:\n    print('cleanup')\n\nrapidy = Rapidy(on_cleanup=[cleanup])\n</code></pre> <pre><code>from rapidy import Rapidy\n\ndef cleanup(rapidy: Rapidy) -&gt; None:\n    print(f'cleanup, application: {rapidy}')\n\nrapidy = Rapidy(on_cleanup=[cleanup])\n</code></pre> <pre><code>from rapidy import Rapidy\n\nasync def async_cleanup() -&gt; None:\n    print('async_cleanup')\n\nrapidy = Rapidy(on_cleanup=[async_cleanup])\n</code></pre> <pre><code>from rapidy import Rapidy\n\nasync def async_cleanup(rapidy: Rapidy) -&gt; None:\n    print(f'async_cleanup, application: {rapidy}')\n\nrapidy = Rapidy(on_cleanup=[async_cleanup])\n</code></pre></p> <p>\u0415\u0441\u043b\u0438 \u0443 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u0430 \u0435\u0441\u0442\u044c \u0430\u0442\u0440\u0438\u0431\u0443\u0442\u044b, \u043f\u0435\u0440\u0432\u044b\u043c \u0432\u0441\u0435\u0433\u0434\u0430 \u0431\u0443\u0434\u0435\u0442 \u043f\u0435\u0440\u0435\u0434\u0430\u0432\u0430\u0442\u044c\u0441\u044f \u0442\u0435\u043a\u0443\u0449\u0438\u0439 \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440 <code>Application</code>.</p> <p>\u0414\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u043e\u0432 \u0432 \u0443\u0436\u0435 \u0441\u043e\u0437\u0434\u0430\u043d\u043d\u044b\u0439 \u043e\u0431\u044a\u0435\u043a\u0442 <code>Application</code>.</p> <pre><code>from rapidy import Rapidy\n\nasync def cleanup() -&gt; None:\n    print('cleanup')\n\nrapidy = Rapidy()\nrapidy.lifespan.on_cleanup.append(cleanup)\n</code></pre> <p>\u0421\u0438\u0433\u043d\u0430\u043b\u044b <code>on_cleanup</code> \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u044e\u0442\u0441\u044f \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u043c\u0438.</p>"},{"location":"ru/docs/lifespan/#lifespan_1","title":"lifespan","text":"<p>lifespan \u043e\u0442\u0432\u0435\u0447\u0430\u0435\u0442 \u0437\u0430 \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0444\u043e\u043d\u043e\u0432\u044b\u043c\u0438 \u0437\u0430\u0434\u0430\u0447\u0430\u043c\u0438.</p> <p>\u042d\u0442\u043e\u0442 \u043c\u0435\u0445\u0430\u043d\u0438\u0437\u043c \u043f\u043e\u043b\u0435\u0437\u0435\u043d \u043f\u0440\u0438 \u0440\u0430\u0431\u043e\u0442\u0435 \u0441 \u0434\u043e\u043b\u0433\u043e\u0436\u0438\u0432\u0443\u0449\u0438\u043c\u0438 \u0437\u0430\u0434\u0430\u0447\u0430\u043c\u0438 \u0438\u043b\u0438 \u0432 \u0441\u043b\u0443\u0447\u0430\u044f\u0445, \u043a\u043e\u0433\u0434\u0430 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u0442\u044c \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0451\u043d\u043d\u044b\u0439 \u043e\u0431\u044a\u0435\u043a\u0442 \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442\u0430, \u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440 \u0441\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u044f.</p> <p>\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u0438 <code>lifespan</code> \u0434\u043e\u043b\u0436\u043d\u044b \u0438\u043c\u0435\u0442\u044c \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0443\u044e \u0441\u0438\u0433\u043d\u0430\u0442\u0443\u0440\u0443.</p> <p><pre><code>from contextlib import asynccontextmanager\nfrom typing import AsyncGenerator\nfrom rapidy import Rapidy\n\n@asynccontextmanager\nasync def bg_task() -&gt; AsyncGenerator[None, None]:\n    try:\n        print('starting background task')\n        yield\n    finally:\n        print('finishing background task')\n\nrapidy = Rapidy(\n    lifespan=[bg_task()],\n)\n</code></pre> <pre><code>from contextlib import asynccontextmanager\nfrom typing import AsyncGenerator\nfrom rapidy import Rapidy\n\n@asynccontextmanager\nasync def bg_task_with_app(rapidy: Rapidy) -&gt; AsyncGenerator[None, None]:\n    try:\n        print('starting background task')\n        yield\n    finally:\n        print('finishing background task')\n\nrapidy = Rapidy(\n    lifespan=[bg_task_with_app],\n)\n</code></pre></p> <p>\u0414\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u043e\u0432 \u0432 \u0443\u0436\u0435 \u0441\u043e\u0437\u0434\u0430\u043d\u043d\u044b\u0439 \u043e\u0431\u044a\u0435\u043a\u0442 <code>Application</code>.</p> <pre><code>from contextlib import asynccontextmanager\nfrom typing import AsyncGenerator\n\nfrom rapidy import Rapidy\n\n@asynccontextmanager\nasync def bg_task() -&gt; AsyncGenerator[None, None]:\n    try:\n        print('starting background task')\n        yield\n    finally:\n        print('finishing background task')\n\nrapidy = Rapidy()\nrapidy.lifespan.append(bg_task())\n</code></pre> <p>\u0417\u0430\u0434\u0430\u0447\u0438 <code>lifespan</code> \u0437\u0430\u0432\u0435\u0440\u0448\u0430\u044e\u0442\u0441\u044f \u043f\u0435\u0440\u0435\u0434 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435\u043c \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u043e\u0432 <code>on_cleanup</code>.</p>"},{"location":"ru/docs/mypy/#_1","title":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435","text":"<p><code>Rapidy</code> \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u0435\u0442 \u0441\u043e\u0431\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u0439 <code>mypy</code> \u043f\u043b\u0430\u0433\u0438\u043d.</p> <p>\u0427\u0442\u043e\u0431\u044b \u0432\u043a\u043b\u044e\u0447\u0438\u0442\u044c <code>mypy</code> \u043f\u043b\u0430\u0433\u0438\u043d \u043f\u0440\u043e\u0441\u0442\u043e \u0434\u043e\u0431\u0430\u0432\u044c\u0442\u0435 \u0435\u0433\u043e \u0432 \u043e\u0434\u0438\u043d \u0438\u0437 \u0444\u0430\u0439\u043b\u043e\u0432 \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u0438.</p> <pre><code># pyproject.toml\n[tool.mypy]\nplugins = [\n    \"pydantic.mypy\",\n    \"rapidy.mypy\"     # &lt;-- enable rapidy plugin\n]\n</code></pre>"},{"location":"ru/docs/server/","title":"HTTP-\u0441\u0435\u0440\u0432\u0435\u0440","text":""},{"location":"ru/docs/server/#_1","title":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435","text":"<p><code>Rapidy</code> \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u0441\u043e\u0437\u0434\u0430\u0432\u0430\u0442\u044c \u0432\u044b\u0441\u043e\u043a\u043e\u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u0432\u0435\u0431-\u0441\u0435\u0440\u0432\u0435\u0440\u044b \u043d\u0430 <code>Python</code>, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043c\u043e\u0433\u0443\u0442 \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0442\u044c, \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0442\u044c \u0438 \u0430\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438 \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0442\u044c \u043b\u044e\u0431\u0443\u044e \u0432\u0445\u043e\u0434\u044f\u0449\u0443\u044e \u0438\u043b\u0438 \u0438\u0441\u0445\u043e\u0434\u044f\u0449\u0443\u044e \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e.</p> <p>\u041f\u0440\u043e\u0441\u0442\u0435\u0439\u0448\u0438\u0439 \u0441\u0435\u0440\u0432\u0435\u0440 \u043c\u043e\u0436\u043d\u043e \u0437\u0430\u043f\u0443\u0441\u0442\u0438\u0442\u044c \u0432\u0441\u0435\u0433\u043e \u0432 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0441\u0442\u0440\u043e\u043a \u043a\u043e\u0434\u0430:</p> <pre><code>from rapidy import Rapidy, run_app\nfrom rapidy.http import get\n\n@get('/hello')\nasync def hello() -&gt; dict[str, str]:\n    return {'message': 'Hello, Web-Server!'}\n\nrapidy = Rapidy(http_route_handlers=[hello])\n\nif __name__ == '__main__':\n    run_app(rapidy, host='0.0.0.0', port=8080)\n</code></pre>"},{"location":"ru/docs/server/#_2","title":"\u0420\u0430\u0437\u0434\u0435\u043b\u044b \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u0438","text":"<ul> <li>\ud83d\ude80 \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0432\u0435\u0431-\u0441\u0435\u0440\u0432\u0435\u0440\u0430</li> <li>\ud83d\uddfa\ufe0f \u041c\u0430\u0440\u0448\u0440\u0443\u0442\u0438\u0437\u0430\u0446\u0438\u044f \u0438 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435 HTTP-\u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u043e\u0432</li> <li>\ufe0f\ud83e\udded  \u041f\u0440\u043e\u0434\u0432\u0438\u043d\u0443\u0442\u0430\u044f \u041c\u0430\u0440\u0448\u0440\u0443\u0442\u0438\u0437\u0430\u0446\u0438\u044f (HTTPRouter)</li> <li>\ud83d\udce9 \u0420\u0430\u0431\u043e\u0442\u0430 \u0441 \u0437\u0430\u043f\u0440\u043e\u0441\u0430\u043c\u0438 \u0438 \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u044f \u0434\u0430\u043d\u043d\u044b\u0445</li> <li>\ud83d\udce4 \u0420\u0430\u0431\u043e\u0442\u0430 \u0441 \u043e\u0442\u0432\u0435\u0442\u0430\u043c\u0438 \u0438 \u0441\u0435\u0440\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0434\u0430\u043d\u043d\u044b\u0445</li> <li>\ud83c\udfaf \u041f\u0440\u043e\u043c\u0435\u0436\u0443\u0442\u043e\u0447\u043d\u043e\u0435 \u041f\u041e (Middlewares)</li> <li>\u26a0\ufe0f \u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 HTTP-\u043e\u0448\u0438\u0431\u043e\u043a</li> <li>\ud83d\udd04 \u0416\u0438\u0437\u043d\u0435\u043d\u043d\u044b\u0439 \u0446\u0438\u043a\u043b \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f</li> </ul>"},{"location":"ru/docs/server/#_3","title":"\u041d\u0430\u0447\u043d\u0435\u043c \u0440\u0430\u0437\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0442\u044c!","text":"<p>\u042d\u0442\u043e\u0442 \u0444\u0440\u0435\u0439\u043c\u0432\u043e\u0440\u043a \u0441\u043e\u0437\u0434\u0430\u043d, \u0447\u0442\u043e\u0431\u044b \u0443\u0441\u043a\u043e\u0440\u0438\u0442\u044c \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u043a\u0443 \u0438 \u0443\u043f\u0440\u043e\u0441\u0442\u0438\u0442\u044c \u0440\u0430\u0431\u043e\u0442\u0443 \u0441 \u0432\u0435\u0431-\u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f\u043c\u0438.</p> <p>\u0413\u043e\u0442\u043e\u0432\u044b \u043f\u043e\u043f\u0440\u043e\u0431\u043e\u0432\u0430\u0442\u044c?</p> <p>\u0427\u0438\u0442\u0430\u0439\u0442\u0435 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u044e \u0438 \u043d\u0430\u0447\u043d\u0438\u0442\u0435 \u043f\u0440\u044f\u043c\u043e \u0441\u0435\u0439\u0447\u0430\u0441! \ud83d\ude80</p>"},{"location":"ru/docs/server/application/","title":"\u0412\u0435\u0431-\u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435","text":""},{"location":"ru/docs/server/application/#_1","title":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435","text":"<p><code>Application</code> \u2014 \u044d\u0442\u043e \u0441\u0435\u0440\u0434\u0446\u0435 \u0432\u0435\u0431-\u0441\u0435\u0440\u0432\u0435\u0440\u0430, \u043e\u0442\u0432\u0435\u0447\u0430\u044e\u0449\u0435\u0435 \u0437\u0430 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0443 \u0432\u0441\u0435\u0445 \u0432\u0445\u043e\u0434\u044f\u0449\u0438\u0445 \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432.</p> <p>\u0421 \u0435\u0433\u043e \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u043c\u043e\u0436\u043d\u043e \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0438 \u0443\u043f\u0440\u0430\u0432\u043b\u044f\u0442\u044c:</p> <ul> <li>\u0432\u0435\u0431-\u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u0430\u043c\u0438 (endpoint)</li> <li>\u043f\u0440\u043e\u043c\u0435\u0436\u0443\u0442\u043e\u0447\u043d\u044b\u043c\u0438 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u0430\u043c\u0438 (middleware)</li> <li>\u0434\u043e\u0447\u0435\u0440\u043d\u0438\u043c\u0438 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f\u043c\u0438</li> <li>\u0444\u043e\u043d\u043e\u0432\u044b\u043c\u0438 \u0437\u0430\u0434\u0430\u0447\u0430\u043c\u0438</li> </ul> <p><code>rapidy.Rapidy</code> \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u043f\u0441\u0435\u0432\u0434\u043e\u043d\u0438\u043c\u043e\u043c \u0434\u043b\u044f <code>rapidy.web.Application</code></p>"},{"location":"ru/docs/server/application/#application","title":"\u0421\u0443\u0449\u043d\u043e\u0441\u0442\u0438 Application","text":""},{"location":"ru/docs/server/application/#endpoint","title":"Endpoint","text":"<p>Endpoint \u2014 \u044d\u0442\u043e \u043a\u043e\u043d\u0435\u0447\u043d\u0430\u044f \u0442\u043e\u0447\u043a\u0430 \u0432\u0435\u0431-\u0441\u0435\u0440\u0432\u0438\u0441\u0430, \u043a \u043a\u043e\u0442\u043e\u0440\u043e\u0439 \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u043e\u0435 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u043e\u0431\u0440\u0430\u0449\u0430\u0435\u0442\u0441\u044f \u0434\u043b\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0451\u043d\u043d\u044b\u0445 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0439 \u0438\u043b\u0438 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u044f \u0434\u0430\u043d\u043d\u044b\u0445, \u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, <code>/api/user/get-data</code>. <pre><code>from rapidy.http import get\n\n@get('/')\nasync def handler() -&gt; dict[str, str]:\n    return {'hello': 'rapidy'}\n</code></pre></p> <p>\u041f\u043e\u0434\u0440\u043e\u0431\u043d\u0435\u0435 \u043e \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0438 <code>endpoint</code> \u0441\u043c\u043e\u0442\u0440\u0438\u0442\u0435 \u0432 \u0440\u0430\u0437\u0434\u0435\u043b\u0435 Handlers.</p>"},{"location":"ru/docs/server/application/#middleware","title":"Middleware","text":"<p><code>Middleware</code> \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u044e\u0442 \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0442\u044c \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f \u043d\u0430\u0434 \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u043c \u0434\u043e \u0438 \u043f\u043e\u0441\u043b\u0435 \u0435\u0433\u043e \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u0432\u0435\u0431-\u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u043e\u043c. <pre><code>from rapidy.http import middleware, Request, StreamResponse, Header\nfrom rapidy.typedefs import CallNext\n\nTOKEN_REGEXP = '^[Bb]earer (?P&lt;token&gt;[A-Za-z0-9-_=.]*)'\n\n@middleware\nasync def get_bearer_middleware(\n        request: Request,\n        call_next: CallNext,\n        bearer_token: str = Header(alias='Authorization', pattern=TOKEN_REGEXP),\n) -&gt; StreamResponse:\n    # process token here...\n    return await call_next(request)\n</code></pre></p> <p>\u041f\u043e\u0434\u0440\u043e\u0431\u043d\u0435\u0435 \u043e \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0438 <code>middleware</code> \u0441\u043c\u043e\u0442\u0440\u0438\u0442\u0435 \u0432 \u0440\u0430\u0437\u0434\u0435\u043b\u0435 Middlewares.</p> \u041f\u0440\u0438\u043c\u0435\u043d\u0435\u043d\u0438\u0435 <code>middleware</code> \u0434\u043b\u044f \u0440\u0430\u0437\u043d\u044b\u0445 \u0432\u0435\u0440\u0441\u0438\u0439 API. <pre><code>from rapidy import web\nfrom rapidy.typedefs import Handler\n\nroutes = web.RouteTableDef()\n\n\ndef get_token_data(token: str) -&gt; ...:\n    ...\n\n\ndef get_session_data(session: str) -&gt; ...:\n    ...\n\n\n@web.middleware\nasync def keycloak_auth_middleware(\n        request: web.Request,\n        handler: Handler,\n        bearer_token: str = web.Header(alias='Authorization'),\n) -&gt; web.StreamResponse:\n    try:\n        parsed_token_data = get_token_data(bearer_token)\n    except Exception:\n        return web.HTTPUnauthorized(text='Failed to authenticate with bearer')\n\n    return await handler(request)\n\n\n@web.middleware\nasync def cookie_session_auth_middleware(\n        request: web.Request,\n        handler: Handler,\n        session: str = web.Cookie(alias='UserSession'),\n) -&gt; web.StreamResponse:\n    try:\n        parsed_session_data = get_session_data(session)\n    except Exception:\n        return web.HTTPUnauthorized(text='Failed to authenticate with session')\n\n    return await handler(request)\n\n\n@routes.get('/get_hello')\nasync def handler() -&gt; dict[str, str]:\n    return {'hello': 'rapidy'}\n\n\nv1_app = web.Application(middlewares=[cookie_session_auth_middleware])\nv1_app.add_routes(routes)\n\nv2_app = web.Application(middlewares=[keycloak_auth_middleware])\nv2_app.add_routes(routes)\n\napp = web.Application()\napp.add_subapp('/v1', v1_app)\napp.add_subapp('/v2', v2_app)\n</code></pre>"},{"location":"ru/docs/server/application/#routing","title":"Routing","text":"<p>\u0417\u0434\u0435\u0441\u044c \u043f\u043e\u043a\u0430\u0437\u0430\u043d\u043e, \u043a\u0430\u043a \u043c\u043e\u0436\u043d\u043e \u043e\u0440\u0433\u0430\u043d\u0438\u0437\u043e\u0432\u044b\u0432\u0430\u0442\u044c \u0433\u0440\u0443\u043f\u043f\u044b <code>web-\u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u043e\u0432</code>.</p> \u041f\u0440\u0438\u043c\u0435\u0440 \u043f\u043b\u043e\u0445\u043e\u0439 \u043f\u0440\u0430\u043a\u0442\u0438\u043a\u0438. <pre><code>@routes.get('/api/v1/get_hello')  # &lt;-- bad practice\nasync def handler() -&gt; ...:\n</code></pre> <p>\u0420\u0435\u043a\u043e\u043c\u0435\u043d\u0434\u0443\u0435\u0442\u0441\u044f \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c <code>rapidy.http.HTTPRouter</code> \u0438\u043b\u0438 \u0434\u043e\u0447\u0435\u0440\u043d\u0438\u0435 <code>rapidy.web.Application</code>.</p>"},{"location":"ru/docs/server/application/#httprouter","title":"HTTPRouter","text":"<p>\u0418\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 <code>HTTPRouter</code> \u0434\u0435\u043b\u0430\u0435\u0442 \u043a\u043e\u0434 \u0431\u043e\u043b\u0435\u0435 \u043b\u0430\u043a\u043e\u043d\u0438\u0447\u043d\u044b\u043c \u0438 \u0443\u0434\u043e\u0431\u043d\u044b\u043c. <pre><code>from rapidy import Rapidy  # &lt;-- rapidy.Rapidy == rapidy.web.Application\nfrom rapidy.http import get, HTTPRouter\n\n@get('/get_hello')\nasync def handler() -&gt; dict[str, str]:\n    return {'hello': 'rapidy'}\n\nv1_app = HTTPRouter('/v1', route_handlers=[handler])\nrapidy = Rapidy(http_route_handlers=[v1_app])\n</code></pre> <pre><code>curl -X GET http://127.0.0.1:8080/v1/get_hello\n</code></pre></p> <p>\u041f\u043e\u0434\u0440\u043e\u0431\u043d\u0435\u0435 \u043e <code>HTTPRouter</code> \u0441\u043c\u043e\u0442\u0440\u0438\u0442\u0435 \u0432 \u0440\u0430\u0437\u0434\u0435\u043b\u0435 HTTPRouter.</p>"},{"location":"ru/docs/server/application/#aiohttp-style","title":"\u041f\u043e\u0434\u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435 (aiohttp-style)","text":"<p>\u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0434\u043e\u0447\u0435\u0440\u043d\u0438\u0445 <code>Application</code>: <pre><code>from rapidy import web\n\nroutes = web.RouteTableDef()\n\n@routes.get('/get_hello')\nasync def handler() -&gt; dict[str, str]:\n    return {'hello': 'rapidy'}\n\nv1_app = web.Application()\nv1_app.add_routes(routes)\n\napp = web.Application()\napp.add_subapp('/v1', v1_app)\n</code></pre> <pre><code>curl -X GET http://127.0.0.1:8080/v1/get_hello\n</code></pre></p> <p>\u0418\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 \u0434\u043e\u0447\u0435\u0440\u043d\u0438\u0445 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0439 \u0432 \u0441\u0442\u0438\u043b\u0435 <code>aiohttp</code> \u043f\u0440\u0438 \u043d\u0430\u043f\u0438\u0441\u0430\u043d\u0438\u0438 \u043d\u043e\u0432\u043e\u0433\u043e \u043a\u043e\u0434\u0430 \u043d\u0435 \u0440\u0435\u043a\u043e\u043c\u0435\u043d\u0434\u0443\u0435\u0442\u0441\u044f.</p>"},{"location":"ru/docs/server/application/#lifespan","title":"Lifespan","text":"<p>Lifespan \u2014 \u044d\u0442\u043e \u043c\u0435\u0445\u0430\u043d\u0438\u0437\u043c \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u0436\u0438\u0437\u043d\u0435\u043d\u043d\u044b\u043c \u0446\u0438\u043a\u043b\u043e\u043c \u0444\u043e\u043d\u043e\u0432\u044b\u0445 \u0437\u0430\u0434\u0430\u0447 \u0432 <code>Rapidy</code>.</p> <p>\u041e\u043d \u0443\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 \u0437\u0430\u0434\u0430\u0447\u0430\u043c\u0438, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0434\u043e\u043b\u0436\u043d\u044b \u0437\u0430\u043f\u0443\u0441\u043a\u0430\u0442\u044c\u0441\u044f: \u0434\u043e \u0438\u043b\u0438 \u043f\u043e\u0441\u043b\u0435 \u0441\u0442\u0430\u0440\u0442\u0430 \u0441\u0435\u0440\u0432\u0435\u0440\u0430, \u0430 \u0442\u0430\u043a\u0436\u0435 \u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c \u043f\u043e\u0441\u0442\u043e\u044f\u043d\u043d\u043e. <pre><code>from contextlib import asynccontextmanager\nfrom typing import AsyncGenerator\nfrom rapidy import Rapidy\n\nasync def startup() -&gt; None:\n    print('startup')\n\nasync def shutdown() -&gt; None:\n    print('shutdown')\n\nasync def cleanup() -&gt; None:\n    print('cleanup')\n\n@asynccontextmanager\nasync def bg_task() -&gt; AsyncGenerator[None, None]:\n    try:\n        print('starting background task')\n        yield\n    finally:\n        print('finishing background task')\n\nrapidy = Rapidy(\n    on_startup=[startup],\n    on_shutdown=[shutdown],\n    on_cleanup=[cleanup],\n    lifespan=[bg_task()],\n)\n</code></pre></p> <p>\u041f\u043e\u0434\u0440\u043e\u0431\u043d\u0435\u0435 \u043e <code>lifespan</code> \u0441\u043c\u043e\u0442\u0440\u0438\u0442\u0435 \u0432 \u0440\u0430\u0437\u0434\u0435\u043b\u0435 Lifespan.</p>"},{"location":"ru/docs/server/application/#application_1","title":"\u0410\u0442\u0440\u0438\u0431\u0443\u0442\u044b Application","text":""},{"location":"ru/docs/server/application/#rapidy","title":"\u0414\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u0430\u0442\u0440\u0438\u0431\u0443\u0442\u044b \u0432 <code>Rapidy</code>","text":""},{"location":"ru/docs/server/application/#server_info_in_response","title":"server_info_in_response","text":"<p>\u041e\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u0435\u0442, \u043d\u0443\u0436\u043d\u043e \u043b\u0438 \u0432\u043a\u043b\u044e\u0447\u0430\u0442\u044c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u0441\u0435\u0440\u0432\u0435\u0440\u0435 \u0432 \u0437\u0430\u0433\u043e\u043b\u043e\u0432\u043a\u0435 <code>Server</code>. <pre><code>server_info_in_response: bool = False\n</code></pre></p>"},{"location":"ru/docs/server/application/#lifespan_1","title":"lifespan","text":"<p>\u0421\u043f\u0438\u0441\u043e\u043a \u0444\u043e\u043d\u043e\u0432\u044b\u0445 \u0437\u0430\u0434\u0430\u0447, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0437\u0430\u043f\u0443\u0441\u043a\u0430\u044e\u0442\u0441\u044f \u0438 \u0437\u0430\u0432\u0435\u0440\u0448\u0430\u044e\u0442\u0441\u044f \u0432\u043c\u0435\u0441\u0442\u0435 \u0441 \u0441\u0435\u0440\u0432\u0435\u0440\u043e\u043c. <pre><code>lifespan: Optional[List[LifespanCTX]] = None\n</code></pre></p>"},{"location":"ru/docs/server/application/#on_startup","title":"on_startup","text":"<p>\u0421\u043f\u0438\u0441\u043e\u043a \u0437\u0430\u0434\u0430\u0447, \u0437\u0430\u043f\u0443\u0441\u043a\u0430\u0435\u043c\u044b\u0445 \u0441\u0440\u0430\u0437\u0443 \u043f\u043e\u0441\u043b\u0435 \u0441\u0442\u0430\u0440\u0442\u0430 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f. <pre><code>on_startup: Optional[List[LifespanHook]] = None\n</code></pre></p>"},{"location":"ru/docs/server/application/#on_shutdown","title":"on_shutdown","text":"<p>\u0417\u0430\u0434\u0430\u0447\u0438, \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0435\u043c\u044b\u0435 \u043f\u0440\u0438 \u043e\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0435 \u0441\u0435\u0440\u0432\u0435\u0440\u0430. <pre><code>on_shutdown: Optional[List[LifespanHook]] = None\n</code></pre></p>"},{"location":"ru/docs/server/application/#on_cleanup","title":"on_cleanup","text":"<p>\u0417\u0430\u0434\u0430\u0447\u0438, \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0435\u043c\u044b\u0435 \u043f\u043e\u0441\u043b\u0435 <code>on_shutdown</code>. <pre><code>on_cleanup: Optional[List[LifespanHook]] = None\n</code></pre></p>"},{"location":"ru/docs/server/application/#http_route_handlers","title":"http_route_handlers","text":"<p>HTTP-\u0440\u043e\u0443\u0442\u0435\u0440\u044b, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043c\u043e\u0433\u0443\u0442 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u044f\u0442\u044c \u0441\u043e\u0431\u043e\u0439 \u043a\u0430\u043a \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u044b\u0435 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u0438, \u0442\u0430\u043a \u0438 \u0433\u0440\u0443\u043f\u043f\u044b <code>HTTPRouter</code>. <pre><code>http_route_handlers: Iterable[HTTPRouterType] = ()\n</code></pre></p>"},{"location":"ru/docs/server/application/#di-dishka","title":"\u0410\u0442\u0440\u0438\u0431\u0443\u0442\u044b DI (dishka)","text":"<p>\u0412 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u0434\u0432\u0438\u0436\u043a\u0430 \u0434\u043b\u044f \u0432\u043d\u0435\u0434\u0440\u0435\u043d\u0438\u044f \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0435\u0439 Rapidy \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0443 Dishka.</p> <p>\u041f\u043e\u0434\u0440\u043e\u0431\u043d\u0435\u0435 \u043e \u043c\u0435\u0445\u0430\u043d\u0438\u0437\u043c\u0435 \u0440\u0430\u0431\u043e\u0442\u044b DI \u0438 \u043e\u0441\u043e\u0431\u0435\u043d\u043d\u043e\u0441\u0442\u044f\u0445 \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u0438 \u0447\u0438\u0442\u0430\u0439\u0442\u0435 \u0437\u0434\u0435\u0441\u044c.</p>"},{"location":"ru/docs/server/application/#di_container","title":"di_container","text":"<p>\u0412\u043d\u0435\u0448\u043d\u0438\u0439 DI-\u043a\u043e\u043d\u0442\u0435\u0439\u043d\u0435\u0440, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043c\u043e\u0436\u043d\u043e \u043f\u0435\u0440\u0435\u0434\u0430\u0442\u044c \u0432 Rapidy.</p> <pre><code>di_container: AsyncContainer | None = None\n</code></pre> <p>\u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e Rapidy \u0441\u043e\u0437\u0434\u0430\u0451\u0442 \u0438 \u0443\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 \u0441\u043e\u0431\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u043c \u043a\u043e\u043d\u0442\u0435\u0439\u043d\u0435\u0440\u043e\u043c. \u0415\u0441\u043b\u0438 \u0432\u044b \u043f\u0435\u0440\u0435\u0434\u0430\u0451\u0442\u0435 \u043a\u043e\u043d\u0442\u0435\u0439\u043d\u0435\u0440 \u0432\u0440\u0443\u0447\u043d\u0443\u044e, \u0432\u0430\u043c \u043d\u0443\u0436\u043d\u043e \u0441\u0430\u043c\u043e\u0441\u0442\u043e\u044f\u0442\u0435\u043b\u044c\u043d\u043e \u043a\u043e\u043d\u0442\u0440\u043e\u043b\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0435\u0433\u043e \u0436\u0438\u0437\u043d\u0435\u043d\u043d\u044b\u0439 \u0446\u0438\u043a\u043b (\u0437\u0430\u043f\u0443\u0441\u043a \u0438 \u043e\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0443).</p> <p>Rapidy \u043d\u0435 \u0441\u043e\u0437\u0434\u0430\u0441\u0442 \u043d\u043e\u0432\u044b\u0439 \u043a\u043e\u043d\u0442\u0435\u0439\u043d\u0435\u0440, \u0434\u0430\u0436\u0435 \u0435\u0441\u043b\u0438 \u0443\u043a\u0430\u0437\u0430\u043d\u044b \u0434\u0440\u0443\u0433\u0438\u0435 DI-\u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b.</p> <p>\u0414\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u044f Dishka \u2014 container.</p>"},{"location":"ru/docs/server/application/#di_providers","title":"di_providers","text":"<p>\u041f\u0440\u043e\u0432\u0430\u0439\u0434\u0435\u0440\u044b, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0431\u0443\u0434\u0443\u0442 \u0437\u0430\u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0438\u0440\u043e\u0432\u0430\u043d\u044b \u0432 \u043a\u043e\u043d\u0442\u0435\u0439\u043d\u0435\u0440\u0435.</p> <p>\u041f\u0440\u043e\u0432\u0430\u0439\u0434\u0435\u0440 \u2014 \u044d\u0442\u043e \u043e\u0431\u044a\u0435\u043a\u0442, \u0447\u043b\u0435\u043d\u044b \u043a\u043e\u0442\u043e\u0440\u043e\u0433\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044e\u0442\u0441\u044f \u0434\u043b\u044f \u043f\u043e\u0441\u0442\u0440\u043e\u0435\u043d\u0438\u044f \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0435\u0439.</p> <pre><code>di_providers: Sequence[BaseProvider] = ()\n</code></pre> <p>\u041f\u0430\u0440\u0430\u043c\u0435\u0442\u0440 \u0431\u0443\u0434\u0435\u0442 \u043f\u0440\u043e\u0438\u0433\u043d\u043e\u0440\u0438\u0440\u043e\u0432\u0430\u043d, \u0435\u0441\u043b\u0438 \u0443\u043a\u0430\u0437\u0430\u043d <code>di_container</code>.</p> <p>\u0414\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u044f Dishka \u2014 providers.</p>"},{"location":"ru/docs/server/application/#di_scopes","title":"di_scopes","text":"<p>\u041a\u043b\u0430\u0441\u0441 <code>Scope</code>, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0431\u0443\u0434\u0435\u0442 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c\u0441\u044f \u043a\u043e\u043d\u0442\u0435\u0439\u043d\u0435\u0440\u043e\u043c.</p> <pre><code>di_scopes: type[BaseScope] = Scope\n</code></pre> <p>\u041f\u0430\u0440\u0430\u043c\u0435\u0442\u0440 \u0431\u0443\u0434\u0435\u0442 \u043f\u0440\u043e\u0438\u0433\u043d\u043e\u0440\u0438\u0440\u043e\u0432\u0430\u043d, \u0435\u0441\u043b\u0438 \u0443\u043a\u0430\u0437\u0430\u043d <code>di_container</code>.</p> <p>\u0414\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u044f Dishka \u2014 scopes.</p>"},{"location":"ru/docs/server/application/#di_context","title":"di_context","text":"<p>\u0421\u043b\u043e\u0432\u0430\u0440\u044c, \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u044e\u0449\u0438\u0439 \u043f\u0435\u0440\u0435\u0434\u0430\u0432\u0430\u0442\u044c \u0434\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0439 \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442 \u0432\u043d\u0443\u0442\u0440\u044c \u0443\u0436\u0435 \u043e\u0431\u044a\u044f\u0432\u043b\u0435\u043d\u043d\u044b\u0445 \u043f\u0440\u043e\u0432\u0430\u0439\u0434\u0435\u0440\u043e\u0432.</p> <pre><code>di_context: dict[Any, Any] | None = None\n</code></pre> <p>\u041f\u0430\u0440\u0430\u043c\u0435\u0442\u0440 \u0431\u0443\u0434\u0435\u0442 \u043f\u0440\u043e\u0438\u0433\u043d\u043e\u0440\u0438\u0440\u043e\u0432\u0430\u043d, \u0435\u0441\u043b\u0438 \u0443\u043a\u0430\u0437\u0430\u043d <code>di_container</code>.</p> <p>\u0414\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u044f Dishka \u2014 context.</p>"},{"location":"ru/docs/server/application/#di_lock_factory","title":"di_lock_factory","text":"<p>\u0424\u0430\u0431\u0440\u0438\u043a\u0430 \u0434\u043b\u044f \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u0431\u043b\u043e\u043a\u0438\u0440\u043e\u0432\u043e\u043a, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0431\u0443\u0434\u0435\u0442 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u043a\u043e\u043d\u0442\u0435\u0439\u043d\u0435\u0440.</p> <pre><code>di_lock_factory: Callable[[], contextlib.AbstractAsyncContextManager[Any]] | None = Lock\n</code></pre> <p>\u041f\u0430\u0440\u0430\u043c\u0435\u0442\u0440 \u0431\u0443\u0434\u0435\u0442 \u043f\u0440\u043e\u0438\u0433\u043d\u043e\u0440\u0438\u0440\u043e\u0432\u0430\u043d, \u0435\u0441\u043b\u0438 \u0443\u043a\u0430\u0437\u0430\u043d <code>di_container</code>.</p> <p>\u0414\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u044f Dishka \u2014 lock_factory.</p> <pre><code>import threading\n\ncontainer = make_container(provider, lock_factory=threading.Lock):\nwith container(lock_factory=threading.Lock) as nested_container:\n    ...\n\nimport asyncio\n\ncontainer = make_async_container(provider, lock_factory=asyncio.Lock)\nasync with container(lock_factory=asyncio.Lock) as nested_container:\n    ...\n</code></pre>"},{"location":"ru/docs/server/application/#di_skip_validation","title":"di_skip_validation","text":"<p>\u0424\u043b\u0430\u0433, \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u044e\u0449\u0438\u0439 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e\u0441\u0442\u044c \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0430 \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u0438 \u0434\u043b\u044f \u043f\u0440\u043e\u0432\u0430\u0439\u0434\u0435\u0440\u043e\u0432, \u0438\u043c\u0435\u044e\u0449\u0438\u0445 \u043e\u0434\u0438\u043d \u0438 \u0442\u043e\u0442 \u0436\u0435 \u0442\u0438\u043f.</p> <pre><code>di_skip_validation: bool = False\n</code></pre> <p>\u041f\u0430\u0440\u0430\u043c\u0435\u0442\u0440 \u0431\u0443\u0434\u0435\u0442 \u043f\u0440\u043e\u0438\u0433\u043d\u043e\u0440\u0438\u0440\u043e\u0432\u0430\u043d, \u0435\u0441\u043b\u0438 \u0443\u043a\u0430\u0437\u0430\u043d <code>di_container</code>.</p> <p>\u0414\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u044f Dishka \u2014 skip_validation.</p> <pre><code>from rapidy.depends import make_container, Provider, provide, Scope\n\nclass MainProvider(Provider):\n    # default component is used here\n\n    @provide(scope=Scope.APP)\n    def foo(self, a: int) -&gt; float:\n        return a/10\n\nclass AdditionalProvider(Provider):\n    component = \"X\"\n\n    @provide(scope=Scope.APP)\n    def foo(self) -&gt; int:\n        return 1\n\n# we will get error immediately during container creation, skip validation for demo needs\ncontainer = make_container(MainProvider(), AdditionalProvider(), skip_validation=True)\n# retrieve from component \"X\"\ncontainer.get(int, component=\"X\")  # value 1 would be returned\n# retrieve from default component\ncontainer.get(float)  # raises NoFactoryError because int is in another component\n</code></pre>"},{"location":"ru/docs/server/application/#di_start_scope","title":"di_start_scope","text":"<p>\u041f\u0430\u0440\u0430\u043c\u0435\u0442\u0440, \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u044e\u0449\u0438\u0439 \u043d\u0430\u0447\u0430\u043b\u044c\u043d\u044b\u0439 <code>Scope</code>.</p> <pre><code>di_start_scope: BaseScope | None = None\n</code></pre> <p>\u041f\u0430\u0440\u0430\u043c\u0435\u0442\u0440 \u0431\u0443\u0434\u0435\u0442 \u043f\u0440\u043e\u0438\u0433\u043d\u043e\u0440\u0438\u0440\u043e\u0432\u0430\u043d, \u0435\u0441\u043b\u0438 \u0443\u043a\u0430\u0437\u0430\u043d <code>di_container</code>.</p> <p>\u0414\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u044f Dishka \u2014 start_scope.</p>"},{"location":"ru/docs/server/application/#di_validation_settings","title":"di_validation_settings","text":"<p>\u041a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u044f \u0434\u043b\u044f \u043f\u0435\u0440\u0435\u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u044f \u043d\u0430\u0441\u0442\u0440\u043e\u0435\u043a \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u0438 \u043a\u043e\u043d\u0442\u0435\u0439\u043d\u0435\u0440\u0430.</p> <pre><code>di_validation_settings: ValidationSettings = DEFAULT_VALIDATION\n</code></pre> <p>\u041f\u0430\u0440\u0430\u043c\u0435\u0442\u0440 \u0431\u0443\u0434\u0435\u0442 \u043f\u0440\u043e\u0438\u0433\u043d\u043e\u0440\u0438\u0440\u043e\u0432\u0430\u043d, \u0435\u0441\u043b\u0438 \u0443\u043a\u0430\u0437\u0430\u043d <code>di_container</code>.</p> <p>\u0414\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u044f Dishka \u2014 alias.</p> <p>\u0414\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u044f Dishka \u2014 from_context.</p> <p>\u0414\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u044f Dishka \u2014 provide.</p>"},{"location":"ru/docs/server/application/#aiohttp","title":"\u0410\u0442\u0440\u0438\u0431\u0443\u0442\u044b <code>aiohttp</code>","text":""},{"location":"ru/docs/server/application/#middlewares","title":"middlewares","text":"<p>\u0421\u043f\u0438\u0441\u043e\u043a <code>middleware</code>, \u043f\u0440\u0438\u043c\u0435\u043d\u044f\u0435\u043c\u044b\u0445 \u043a\u043e \u0432\u0441\u0435\u043c \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u0430\u043c, \u0432\u043a\u043b\u044e\u0447\u0430\u044f \u0434\u043e\u0447\u0435\u0440\u043d\u0438\u0435 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f. <pre><code>middlewares: Optional[Iterable[Middleware]] = None\n</code></pre></p>"},{"location":"ru/docs/server/application/#client_max_size","title":"client_max_size","text":"<p>\u041c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u044b\u0439 \u0440\u0430\u0437\u043c\u0435\u0440 \u0437\u0430\u043f\u0440\u043e\u0441\u0430 \u0432 \u0431\u0430\u0439\u0442\u0430\u0445. <pre><code>client_max_size: int = 1024**2\n</code></pre></p>"},{"location":"ru/docs/server/application/#logger","title":"logger","text":"<p>\u041b\u043e\u0433\u0433\u0435\u0440 \u0434\u043b\u044f \u043f\u0440\u0438\u0435\u043c\u0430 \u043b\u043e\u0433\u043e\u0432 \u043e\u0442 <code>Application</code>. <pre><code>logger: logging.Logger = logging.getLogger(\"aiohttp.web\")\n</code></pre></p>"},{"location":"ru/docs/server/application/#_2","title":"\u0417\u0430\u043f\u0443\u0441\u043a \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f","text":""},{"location":"ru/docs/server/application/#_3","title":"\u041f\u0440\u043e\u0441\u0442\u043e\u0439 \u0437\u0430\u043f\u0443\u0441\u043a","text":"<p>\u0421\u043a\u043e\u043f\u0438\u0440\u0443\u0439\u0442\u0435 \u0432 \u0444\u0430\u0439\u043b <code>main.py</code>. <pre><code>from rapidy import Rapidy, run_app\nfrom rapidy.http import post\n\n@post('/')\nasync def handler() -&gt; dict[str, str]:\n    return {'hello': 'rapidy'}\n\nrapidy = Rapidy()\nrapidy.add_http_router(handler)\n\nif __name__ == '__main__':\n    run_app(rapidy)\n</code></pre> \u0417\u0430\u043f\u0443\u0441\u0442\u0438\u0442\u0435 \u0441\u0435\u0440\u0432\u0435\u0440: <pre><code>python3 main.py\n</code></pre></p> <p>\u041c\u043e\u0436\u043d\u043e \u0443\u043a\u0430\u0437\u0430\u0442\u044c \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b, \u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, <code>host</code> \u0438\u043b\u0438 <code>port</code>.</p> <pre><code>run_app(app, host='0.0.0.0', port=8080)\n</code></pre>"},{"location":"ru/docs/server/application/#wsgi-gunicorn","title":"WSGI \u0437\u0430\u043f\u0443\u0441\u043a (Gunicorn)","text":"<p>\u0423\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u0435 <code>gunicorn</code>: <pre><code>pip install gunicorn\n</code></pre> \u0421\u043a\u043e\u043f\u0438\u0440\u0443\u0439\u0442\u0435 \u043a\u043e\u0434 \u0432 <code>main.py</code>: <pre><code>from rapidy import Rapidy\nfrom rapidy.http import post\n\n@post('/')\nasync def handler() -&gt; dict[str, str]:\n    return {'hello': 'rapidy'}\n\nrapidy = Rapidy()\nrapidy.add_http_router(handler)\n</code></pre> \u0417\u0430\u043f\u0443\u0441\u0442\u0438\u0442\u0435 \u0441\u0435\u0440\u0432\u0435\u0440: <pre><code>gunicorn main:rapidy --bind localhost:8080 --reload --worker-class aiohttp.GunicornWebWorker\n</code></pre></p> <p>\u041a\u043e\u043c\u0430\u043d\u0434\u0430 <code>gunicorn main:app</code> \u043e\u0431\u0440\u0430\u0449\u0430\u0435\u0442\u0441\u044f \u043a:</p> <ul> <li><code>main</code>: \u0444\u0430\u0439\u043b <code>main.py</code> (\u043c\u043e\u0434\u0443\u043b\u044c Python).</li> <li><code>rapidy</code>: \u043e\u0431\u044a\u0435\u043a\u0442, \u0441\u043e\u0437\u0434\u0430\u043d\u043d\u044b\u0439 \u0432\u043d\u0443\u0442\u0440\u0438 \u0444\u0430\u0439\u043b\u0430 <code>main.py</code> \u0432 \u0441\u0442\u0440\u043e\u043a\u0435 <code>rapidy = Rapidy()</code>.</li> <li><code>--reload</code>: \u043f\u0435\u0440\u0435\u0437\u0430\u043f\u0443\u0441\u043a\u0430\u0435\u0442 \u0441\u0435\u0440\u0432\u0435\u0440 \u043f\u043e\u0441\u043b\u0435 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f \u043a\u043e\u0434\u0430. \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435 \u0442\u043e\u043b\u044c\u043a\u043e \u0434\u043b\u044f \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u043a\u0438.</li> </ul>"},{"location":"ru/docs/server/handlers/","title":"\u041c\u0430\u0440\u0448\u0440\u0443\u0442\u0438\u0437\u0430\u0446\u0438\u044f \u0438 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435 HTTP-\u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u043e\u0432","text":"<p>\u0412\u0435\u0431-\u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u0438 (handlers) \u043f\u0440\u0435\u0434\u043d\u0430\u0437\u043d\u0430\u0447\u0435\u043d\u044b \u0434\u043b\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u0432\u0445\u043e\u0434\u044f\u0449\u0438\u0445 HTTP-\u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432.</p> <p>\u0412 <code>Rapidy</code> \u043c\u0430\u0440\u0448\u0440\u0443\u0442\u0438\u0437\u0430\u0446\u0438\u044f \u0438 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u043e\u0432 \u0442\u0435\u0441\u043d\u043e \u0441\u0432\u044f\u0437\u0430\u043d\u044b: \u043c\u0430\u0440\u0448\u0440\u0443\u0442\u0438\u0437\u0430\u0446\u0438\u044f \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u0435\u0442, \u043a\u0430\u043a\u043e\u0439 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a \u0431\u0443\u0434\u0435\u0442 \u0432\u044b\u0437\u0432\u0430\u043d \u0432 \u043e\u0442\u0432\u0435\u0442 \u043d\u0430 \u0437\u0430\u043f\u0440\u043e\u0441.</p>"},{"location":"ru/docs/server/handlers/#_1","title":"\u041e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u043c\u0430\u0440\u0448\u0440\u0443\u0442\u043e\u0432","text":"<p>\u041c\u0430\u0440\u0448\u0440\u0443\u0442 \u2014 \u044d\u0442\u043e \u0441\u0442\u0440\u043e\u043a\u0430 <code>URL</code>, \u043f\u043e \u043a\u043e\u0442\u043e\u0440\u043e\u0439 \u0432\u044b\u0437\u044b\u0432\u0430\u0435\u0442\u0441\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a.</p> <p>\u0412\u0441\u0435\u0433\u043e \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u044e\u0442 \u0434\u0432\u0430 \u0432\u0438\u0434\u0430 \u043c\u0430\u0440\u0448\u0440\u0443\u0442\u043e\u0432 - \u0441\u0442\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u0438 \u0434\u0438\u043d\u0430\u043c\u0438\u0447\u0435\u0441\u043a\u0438\u0435.</p> <p>\u0420\u0430\u0437\u043d\u0438\u0446\u0430 \u043c\u0435\u0436\u0434\u0443 \u0441\u0442\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u043c \u0438 \u0434\u0438\u043d\u0430\u043c\u0438\u0447\u0435\u0441\u043a\u0438\u043c \u0440\u043e\u0443\u0442\u0438\u043d\u0433\u043e\u043c</p> \u0422\u0438\u043f \u043c\u0430\u0440\u0448\u0440\u0443\u0442\u0430 \u041f\u0440\u0438\u043c\u0435\u0440 URL \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0421\u0442\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0439 /about URL \u0444\u0438\u043a\u0441\u0438\u0440\u043e\u0432\u0430\u043d. \u0414\u0438\u043d\u0430\u043c\u0438\u0447\u0435\u0441\u043a\u0438\u0439 /users/{user_id} URL \u043c\u0435\u043d\u044f\u0435\u0442\u0441\u044f \u0432 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0438 \u043e\u0442 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u0432 <p><code>Rapidy</code> \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u0435\u0442 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0441\u043f\u043e\u0441\u043e\u0431\u043e\u0432 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u044f \u043c\u0430\u0440\u0448\u0440\u0443\u0442\u043e\u0432, \u0430\u043d\u0430\u043b\u043e\u0433\u0438\u0447\u043d\u044b\u0445 <code>aiohttp</code>, \u043f\u043e\u0434\u0440\u043e\u0431\u043d\u0435\u0435 \u043e \u043d\u0438\u0445 \u043d\u0438\u0436\u0435 \u0432 \u0440\u0430\u0437\u0434\u0435\u043b\u0435 <code>\u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0438 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u043e\u0432 HTTP-\u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432</code>.</p> <p>\u041f\u043e\u0434\u0440\u043e\u0431\u043d\u0435\u0435 \u043f\u0440\u043e \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u0438 <code>aiohttp</code> \u043c\u043e\u0436\u043d\u043e \u0443\u0437\u043d\u0430\u0442\u044c \u0437\u0434\u0435\u0441\u044c.</p>"},{"location":"ru/docs/server/handlers/#_2","title":"\u0421\u0442\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u043c\u0430\u0440\u0448\u0440\u0443\u0442\u044b","text":"<p>\u0421\u0442\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0439 HTTP-\u0440\u043e\u0443\u0442\u0438\u043d\u0433 \u2014 \u044d\u0442\u043e \u043c\u0430\u0440\u0448\u0440\u0443\u0442\u0438\u0437\u0430\u0446\u0438\u044f, \u0433\u0434\u0435 \u043f\u0443\u0442\u044c (URL) \u0437\u0430\u0440\u0430\u043d\u0435\u0435 \u0438\u0437\u0432\u0435\u0441\u0442\u0435\u043d \u0438 \u043d\u0435 \u043c\u0435\u043d\u044f\u0435\u0442\u0441\u044f \u0434\u0438\u043d\u0430\u043c\u0438\u0447\u0435\u0441\u043a\u0438. \u042d\u0442\u043e \u043e\u0437\u043d\u0430\u0447\u0430\u0435\u0442, \u0447\u0442\u043e \u043a\u0430\u0436\u0434\u044b\u0439 \u0437\u0430\u043f\u0440\u043e\u0441 \u0441 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0451\u043d\u043d\u044b\u043c \u043c\u0430\u0440\u0448\u0440\u0443\u0442\u043e\u043c \u0432\u0441\u0435\u0433\u0434\u0430 \u043f\u0440\u0438\u0432\u043e\u0434\u0438\u0442 \u043a \u043e\u0434\u043d\u043e\u043c\u0443 \u0438 \u0442\u043e\u043c\u0443 \u0436\u0435 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u0443.</p> <p>\u041f\u0440\u043e\u0441\u0442\u043e\u0439 \u0441\u0442\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0439 \u043c\u0430\u0440\u0448\u0440\u0443\u0442 <pre><code>from rapidy.http import get\n\n@get('/hello_rapidy')\nasync def handler() -&gt; str:\n    return 'Hello Rapidy!'\n</code></pre></p> <p>\u042d\u0442\u043e\u0442 \u043c\u0430\u0440\u0448\u0440\u0443\u0442 \u0432\u0441\u0435\u0433\u0434\u0430 \u0434\u043e\u0441\u0442\u0443\u043f\u0435\u043d \u043f\u043e <code>GET /hello</code> \u0438 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u043e\u0434\u0438\u043d \u0438 \u0442\u043e\u0442 \u0436\u0435 \u043e\u0442\u0432\u0435\u0442.</p> <pre><code>curl http://localhost:8000/hello_rapidy\n</code></pre> <p>\u0422\u0430\u043a\u0438\u043c \u0436\u0435 \u043e\u0431\u0440\u0430\u0437\u043e\u043c \u0432\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u0442\u044c \u0438 \u0434\u0440\u0443\u0433\u0438\u0435 \u043c\u0435\u0442\u043e\u0434\u044b, \u0442\u0430\u043a\u0438\u0435 \u043a\u0430\u043a <code>get</code>, <code>post</code>, <code>put</code>, <code>delete</code> \u0438 \u0442\u0430\u043a \u0434\u0430\u043b\u0435\u0435.</p>"},{"location":"ru/docs/server/handlers/#_3","title":"\u0414\u0438\u043d\u0430\u043c\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u043c\u0430\u0440\u0448\u0440\u0443\u0442\u044b","text":"<p>\u0414\u0438\u043d\u0430\u043c\u0438\u0447\u0435\u0441\u043a\u0438\u0439 \u0440\u043e\u0443\u0442\u0438\u043d\u0433 \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u0437\u0430\u0434\u0430\u0432\u0430\u0442\u044c \u043c\u0430\u0440\u0448\u0440\u0443\u0442\u044b, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u044e\u0442 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b. \u042d\u0442\u043e \u043f\u043e\u043b\u0435\u0437\u043d\u043e, \u043a\u043e\u0433\u0434\u0430 \u043d\u0443\u0436\u043d\u043e \u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c \u0441 \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u043c\u0438 \u0441\u0443\u0449\u043d\u043e\u0441\u0442\u044f\u043c\u0438 (\u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, <code>user_id</code>, <code>post_id</code> \u0438 \u0442.\u0434.), \u043f\u0435\u0440\u0435\u0434\u0430\u0432\u0430\u044f \u0438\u0445 \u0432 <code>URL</code>.</p> <p>\u0412 \u043f\u0440\u0438\u043c\u0435\u0440\u0430\u0445 \u043d\u0438\u0436\u0435 \u0431\u0443\u0434\u0435\u0442 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c\u0441\u044f <code>PathParam</code>, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c \u0434\u043b\u044f \u0438\u0437\u0432\u043b\u0435\u0447\u0435\u043d\u0438\u044f \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u0432-\u043f\u0443\u0442\u0435\u0439. \u041f\u043e\u0434\u0440\u043e\u0431\u043d\u0435\u0435 \u043e \u043d\u0435\u043c \u043c\u043e\u0436\u043d\u043e \u043f\u0440\u043e\u0447\u0438\u0442\u0430\u0442\u044c \u0437\u0434\u0435\u0441\u044c.</p>"},{"location":"ru/docs/server/handlers/#_4","title":"\u041f\u0440\u043e\u0441\u0442\u043e\u0439 \u0434\u0438\u043d\u0430\u043c\u0438\u0447\u0435\u0441\u043a\u0438\u0439 \u043c\u0430\u0440\u0448\u0440\u0443\u0442","text":"<p>\u0414\u043e\u043f\u0443\u0441\u0442\u0438\u043c, \u0443 \u043d\u0430\u0441 \u0435\u0441\u0442\u044c API \u0434\u043b\u044f \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u044f \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438 \u043e \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435 \u043f\u043e \u0435\u0433\u043e user_id:</p> <pre><code>from rapidy.http import get, PathParam\n\n@get('/users/{user_id}')\nasync def handler(user_id: int = PathParam()) -&gt; dict[str, int]:\n    return {'user_id': user_id}\n</code></pre> <p>\u041a\u0430\u043a \u0440\u0430\u0431\u043e\u0442\u0430\u0435\u0442 \u044d\u0442\u043e\u0442 \u043c\u0430\u0440\u0448\u0440\u0443\u0442?</p> <ol> <li><code>user_id</code> \u2014 \u0434\u0438\u043d\u0430\u043c\u0438\u0447\u0435\u0441\u043a\u0438\u0439 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043f\u0435\u0440\u0435\u0434\u0430\u0451\u0442\u0441\u044f \u0432 URL.</li> <li><code>Rapidy</code> \u0430\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438 \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u0443\u0435\u0442 \u0435\u0433\u043e \u0432 <code>int</code> (\u0435\u0441\u043b\u0438 \u043f\u0435\u0440\u0435\u0434\u0430\u0442\u044c \u0441\u0442\u0440\u043e\u043a\u0443, API \u0432\u0435\u0440\u043d\u0451\u0442 \u043e\u0448\u0438\u0431\u043a\u0443 <code>422</code>).</li> </ol> <p>\u041f\u0440\u0438\u043c\u0435\u0440 \u0437\u0430\u043f\u0440\u043e\u0441\u0430: <pre><code>curl http://localhost:8000/users/123\n</code></pre></p> <p>\u041e\u0442\u0432\u0435\u0442: <pre><code>{\"user_id\": 123}\n</code></pre></p>"},{"location":"ru/docs/server/handlers/#_5","title":"\u0414\u0438\u043d\u0430\u043c\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u043c\u0430\u0440\u0448\u0440\u0443\u0442\u044b \u0441 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u0438\u043c\u0438 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0430\u043c\u0438","text":"<p>\u041c\u043e\u0436\u043d\u043e \u0434\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0434\u0438\u043d\u0430\u043c\u0438\u0447\u0435\u0441\u043a\u0438\u0445 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u0432: <pre><code>from rapidy.http import get, PathParam\n\n@get('/posts/{post_id}/comments/{comment_id}')\nasync def handler(\n    post_id: int = PathParam(),\n    comment_id: int = PathParam(),\n) -&gt; dict[str, int]:\n    return {'post_id': post_id, 'comment_id': comment_id}\n</code></pre></p> <p>\u0422\u0435\u043f\u0435\u0440\u044c \u0437\u0430\u043f\u0440\u043e\u0441 <code>GET /posts/10/comments/5</code> \u0432\u0435\u0440\u043d\u0451\u0442: <pre><code>{\"post_id\": 10, \"comment_id\": 5}\n</code></pre></p>"},{"location":"ru/docs/server/handlers/#_6","title":"\u0413\u0440\u0443\u043f\u043f\u0438\u0440\u043e\u0432\u043a\u0430 \u043c\u0430\u0440\u0448\u0440\u0443\u0442\u043e\u0432","text":"<p>\u0415\u0441\u043b\u0438 \u0443 \u0432\u0430\u0441 \u043c\u043d\u043e\u0433\u043e \u043c\u0430\u0440\u0448\u0440\u0443\u0442\u043e\u0432, \u043c\u043e\u0436\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u043e\u0434\u0438\u043d \u0438\u0437 \u043f\u043e\u0434\u0445\u043e\u0434\u043e\u0432 \u0434\u043b\u044f \u0433\u0440\u0443\u043f\u043f\u0438\u0440\u043e\u0432\u043a\u0438 HTTP-\u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432.</p> <p>\u0420\u0435\u043a\u043e\u043c\u0435\u043d\u0434\u0443\u0435\u0442\u0441\u044f \u043f\u0440\u0438\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u0442\u044c\u0441\u044f \u0442\u043e\u043b\u044c\u043a\u043e \u043e\u0434\u043d\u043e\u0433\u043e \u043f\u043e\u0434\u0445\u043e\u0434\u0430 \u0432 \u0440\u0430\u043c\u043a\u0430\u0445 \u043f\u0440\u043e\u0435\u043a\u0442\u0430.</p>"},{"location":"ru/docs/server/handlers/#httprouter","title":"HTTPRouter","text":"<p><code>Rapidy</code> \u043f\u0440\u0435\u0434\u043b\u0430\u0433\u0430\u0435\u0442 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u043e\u0431\u044a\u0435\u043a\u0442 <code>HTTPRouter</code> \u0434\u043b\u044f \u0433\u0440\u0443\u043f\u043f\u0438\u0440\u043e\u0432\u043a\u0438 \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432.</p> <p><code>HTTPRouter</code> \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0433\u0440\u0443\u043f\u043f\u044b \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u043e\u0432 \u0438 \u0438\u0433\u0440\u0430\u0435\u0442 \u043a\u043b\u044e\u0447\u0435\u0432\u0443\u044e \u0440\u043e\u043b\u044c \u0432 \u043c\u0430\u0440\u0448\u0440\u0443\u0442\u0438\u0437\u0430\u0446\u0438\u0438 (routing), \u043f\u043e\u043c\u043e\u0433\u0430\u044f \u043d\u0430\u043f\u0440\u0430\u0432\u043b\u044f\u0442\u044c \u0437\u0430\u043f\u0440\u043e\u0441\u044b \u043a \u043d\u0443\u0436\u043d\u044b\u043c \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u0430\u043c \u0432 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0438 \u043e\u0442 HTTP-\u043c\u0435\u0442\u043e\u0434\u0430, \u043f\u0443\u0442\u0438, \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u0432 \u0438 \u0434\u0440\u0443\u0433\u0438\u0445 \u0443\u0441\u043b\u043e\u0432\u0438\u0439.</p> <p>HTTPRouter \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0438\u0440\u0443\u0435\u0442\u0441\u044f \u0442\u043e\u0447\u043d\u043e \u0442\u0430\u043a \u0436\u0435, \u043a\u0430\u043a \u0438 \u043b\u044e\u0431\u043e\u0439 HTTP-\u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a.</p> <pre><code>from rapidy import Rapidy\nfrom rapidy.http import HTTPRouter, controller, get\n\n@get('/healthcheck')  # /healthcheck\nasync def healthcheck() -&gt; str:\n    return 'ok'\n\n@get('/hello')  # /api/hello\nasync def hello_handler() -&gt; dict[str, str]:\n    return {'hello': 'rapidy'}\n\napi_router = HTTPRouter('/api', [hello_handler])\n\nrapidy = Rapidy(http_route_handlers=[healthcheck, api_router])\n</code></pre> <p><code>HTTPRouter</code> \u0443\u043c\u0435\u0435\u0442 \u0431\u043e\u043b\u044c\u0448\u0435!</p> <p><code>HTTPRouter</code> \u0442\u0430\u043a\u0436\u0435 \u0438\u043c\u0435\u0435\u0442 \u0440\u044f\u0434 \u0430\u0442\u0440\u0438\u0431\u0443\u0442\u043e\u0432 \u0440\u0430\u0441\u0448\u0438\u0440\u044f\u044e\u0449\u0438\u0445 \u0435\u0433\u043e \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u0438, \u0442\u0430\u043a\u0438\u0435 \u043a\u0430\u043a \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 <code>middleware</code>, \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0444\u043e\u043d\u043e\u0432\u044b\u043c\u0438 \u0437\u0430\u0434\u0430\u0447\u0430\u043c\u0438 \u0438 \u0442\u0434.</p> <p>\u0422\u0430\u043a\u0436\u0435 \u0432\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u0441\u043e\u0437\u0434\u0430\u0432\u0430\u0442\u044c \u0432\u043b\u043e\u0436\u0435\u043d\u043d\u044b\u0435 <code>HTTPRouter</code>.</p> <p>\u041f\u043e\u0434\u0440\u043e\u0431\u043d\u0435\u0435 \u043f\u0440\u043e <code>HTTPRouter</code> \u043c\u043e\u0436\u043d\u043e \u043f\u0440\u043e\u0447\u0438\u0442\u0430\u0442\u044c \u0437\u0434\u0435\u0441\u044c</p>"},{"location":"ru/docs/server/handlers/#http-_1","title":"\u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0438 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u043e\u0432 HTTP-\u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432","text":""},{"location":"ru/docs/server/handlers/#_7","title":"\u0424\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u044b\u0435 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u0438","text":"<p>\u041f\u0440\u043e\u0441\u0442\u0435\u0439\u0448\u0438\u0439 \u0441\u043f\u043e\u0441\u043e\u0431 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u0430: <pre><code>from rapidy import Rapidy\nfrom rapidy.http import post\n\n@post('/')\nasync def handler() -&gt; dict[str, str]:\n    return {'hello': 'rapidy'}\n\nrapidy = Rapidy(http_route_handlers=[handler])\n</code></pre></p>"},{"location":"ru/docs/server/handlers/#_8","title":"\u041f\u0440\u0438\u043c\u0435\u0440\u044b \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u043e\u0432","text":"\u0420\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u0430 \u0431\u0435\u0437 \u0434\u0435\u043a\u043e\u0440\u0430\u0442\u043e\u0440\u0430 <pre><code>from rapidy import Rapidy\nfrom rapidy.http import post\n\nasync def handler() -&gt; dict[str, str]:\n    return {'hello': 'rapidy'}\n\nrapidy = Rapidy(\n    http_route_handlers=[\n        post.reg('/', handler),\n    ]\n)\n</code></pre> \u0414\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u0430 \u0447\u0435\u0440\u0435\u0437 <code>router</code> \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f (\u0432 \u0441\u0442\u0438\u043b\u0435 <code>aiohttp</code>) <pre><code>from rapidy import Rapidy\n\nasync def handler() -&gt; dict[str, str]:\n    return {'hello': 'rapidy'}\n\nrapidy = Rapidy()\nrapidy.router.add_post('/', handler)\n</code></pre> <p>\u041f\u043e\u0434\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u0435\u043c\u044b\u0435 \u043c\u0435\u0442\u043e\u0434\u044b \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u044e\u0442 HTTP-\u043c\u0435\u0442\u043e\u0434\u0430\u043c \u0441 \u043f\u0440\u0435\u0444\u0438\u043a\u0441\u043e\u043c <code>add_</code>.</p> <ul> <li><code>add_get</code></li> <li><code>add_post</code></li> <li><code>add_put</code></li> <li><code>add_patch</code></li> <li><code>add_delete</code></li> </ul> <p>\u0418\u0441\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435 \u2014 <code>view</code>.</p> <ul> <li><code>add_view</code></li> </ul> \u0414\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u0430 \u0441 \u0434\u0435\u043a\u043e\u0440\u0430\u0442\u043e\u0440\u043e\u043c \u0447\u0435\u0440\u0435\u0437 <code>RouteTableDef</code> (\u0432 \u0441\u0442\u0438\u043b\u0435 <code>aiohttp</code>) <pre><code>from rapidy import web, Rapidy\n\nroutes = web.RouteTableDef()\n\n@routes.post('/')\nasync def handler() -&gt; dict[str, str]:\n    return {'hello': 'rapidy'}\n\nrapidy = Rapidy()\nrapidy.add_routes(routes)\n</code></pre> \u0414\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u0430 \u0431\u0435\u0437 \u0434\u0435\u043a\u043e\u0440\u0430\u0442\u043e\u0440\u0430 \u0447\u0435\u0440\u0435\u0437 <code>rapidy.web</code> (\u0432 \u0441\u0442\u0438\u043b\u0435 <code>aiohttp</code>) <pre><code>from rapidy import web, Rapidy\n\nasync def handler() -&gt; dict[str, str]:\n    return {'hello': 'rapidy'}\n\nrapidy = Rapidy()\nrapidy.add_routes([web.post('/', handler)])\n</code></pre>"},{"location":"ru/docs/server/handlers/#_9","title":"\u041a\u043b\u0430\u0441\u0441\u043e\u0432\u044b\u0435 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u0438","text":"<p>\u041a\u043b\u0430\u0441\u0441\u043e\u0432\u044b\u0435 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u0438 \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u044e\u0442 \u043e\u0431\u044a\u0435\u0434\u0438\u043d\u044f\u0442\u044c \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u043c\u0435\u0442\u043e\u0434\u043e\u0432 \u0432 \u043e\u0434\u043d\u043e\u043c \u043a\u043b\u0430\u0441\u0441\u0435: <pre><code>from rapidy import Rapidy\nfrom rapidy.http import PathParam, controller, get, post, put, patch, delete\n\n@controller('/')\nclass UserController:\n    @get('/{user_id}')\n    async def get_by_id(self, user_id: str = PathParam()) -&gt; dict[str, str]:\n        return {'user_id': user_id}\n\n    @get()\n    async def get_all_users(self) -&gt; list[dict[str, str]]:\n        return [{'name': 'John'}, {'name': 'Felix'}]\n\n    @post()\n    async def create_user(self) -&gt; str:\n        return 'ok'\n\n    @put()\n    async def update_user(self) -&gt; str:\n        return 'ok'\n\n    @patch()\n    async def patch_user(self) -&gt; str:\n        return 'ok'\n\n    @delete()\n    async def delete_user(self) -&gt; str:\n        return 'ok'\n\nrapidy = Rapidy(http_route_handlers=[UserController])\n</code></pre></p>"},{"location":"ru/docs/server/handlers/#_10","title":"\u041f\u0440\u0438\u043c\u0435\u0440\u044b \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438 \u043a\u043b\u0430\u0441\u0441\u043e\u0432\u044b\u0445 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u043e\u0432","text":"\u0420\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u0430 \u0431\u0435\u0437 \u0434\u0435\u043a\u043e\u0440\u0430\u0442\u043e\u0440\u0430 <pre><code>from rapidy import Rapidy\nfrom rapidy.http import PathParam, controller, get\n\nclass UserController:\n    @get('/{user_id}')\n    async def get_by_id(self, user_id: str = PathParam()) -&gt; dict[str, str]:\n        return {'user_id': user_id}\n\n    @get()\n    async def get_all_users(self) -&gt; list[dict[str, str]]:\n        return [{'name': 'John'}, {'name': 'Felix'}]\n\nrapidy = Rapidy(\n    http_route_handlers=[\n        controller.reg('/', UserController),\n    ]\n)\n</code></pre>"},{"location":"ru/docs/server/handlers/#view-aiohttp-style","title":"\u0418\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 <code>View</code> (aiohttp style)","text":"\u0414\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u0430 \u0447\u0435\u0440\u0435\u0437 <code>router</code> \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f (\u0432 \u0441\u0442\u0438\u043b\u0435 <code>aiohttp</code>) <pre><code>from rapidy import Rapidy\nfrom rapidy.web import View\n\nclass Handler(View):\n    async def get(self) -&gt; dict[str, str]:\n        return {'hello': 'rapidy'}\n\n    async def post(self) -&gt; dict[str, str]:\n        return {'hello': 'rapidy'}\n\n    async def put(self) -&gt; dict[str, str]:\n        return {'hello': 'rapidy'}\n\n    async def patch(self) -&gt; dict[str, str]:\n        return {'hello': 'rapidy'}\n\n    async def delete(self) -&gt; dict[str, str]:\n        return {'hello': 'rapidy'}\n\nrapidy = Rapidy()\nrapidy.router.add_view('/', Handler)\n</code></pre> \u0414\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u0430 \u0447\u0435\u0440\u0435\u0437 <code>router</code> \u0441 \u0440\u0430\u0437\u043d\u044b\u043c\u0438 \u043f\u0443\u0442\u044f\u043c\u0438 (\u0432 \u0441\u0442\u0438\u043b\u0435 <code>aiohttp</code>) <pre><code>from rapidy import Rapidy\nfrom rapidy.web import View, PathParam\n\nclass Handler(View):\n    async def get(self, user_id: str = PathParam()) -&gt; dict[str, str]:\n        return {'hello': 'rapidy'}\n\n    async def post(self) -&gt; dict[str, str]:\n        return {'hello': 'rapidy'}\n\n    async def put(self) -&gt; dict[str, str]:\n        return {'hello': 'rapidy'}\n\n    async def patch(self) -&gt; dict[str, str]:\n        return {'hello': 'rapidy'}\n\n    async def delete(self) -&gt; dict[str, str]:\n        return {'hello': 'rapidy'}\n\nrapidy = Rapidy()\nrapidy.router.add_get('/{user_id}', Handler)\nrapidy.router.add_view('/', Handler)\n</code></pre> \u0414\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u0430 \u0441 \u0434\u0435\u043a\u043e\u0440\u0430\u0442\u043e\u0440\u043e\u043c \u0447\u0435\u0440\u0435\u0437 <code>RouteTableDef</code> (\u0432 \u0441\u0442\u0438\u043b\u0435 <code>aiohttp</code>) <pre><code>from rapidy import web\n\nroutes = web.RouteTableDef()\n\n@routes.view('/')\nclass Handler(web.View):\n    async def get(self) -&gt; dict[str, str]:\n        return {'hello': 'rapidy'}\n\n    async def post(self) -&gt; dict[str, str]:\n        return {'hello': 'rapidy'}\n\n    async def put(self) -&gt; dict[str, str]:\n        return {'hello': 'rapidy'}\n\n    async def patch(self) -&gt; dict[str, str]:\n        return {'hello': 'rapidy'}\n\n    async def delete(self) -&gt; dict[str, str]:\n        return {'hello': 'rapidy'}\n\nrapidy = web.Application()\nrapidy.add_routes(routes)\n</code></pre> \u0414\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u0430 \u0441 \u0434\u0435\u043a\u043e\u0440\u0430\u0442\u043e\u0440\u043e\u043c \u0447\u0435\u0440\u0435\u0437 <code>RouteTableDef</code> \u0441 \u0440\u0430\u0437\u043d\u044b\u043c\u0438 \u043f\u0443\u0442\u044f\u043c\u0438 (\u0432 \u0441\u0442\u0438\u043b\u0435 <code>aiohttp</code>) <pre><code>from rapidy import web\n\nroutes = web.RouteTableDef()\n\n@routes.view('/')\nclass Handler(web.View):\n    @routes.get('/{user_id}')\n    async def get(self, user_id: str = web.PathParam()) -&gt; dict[str, str]:\n        return {'hello': 'rapidy'}\n\n    async def post(self) -&gt; dict[str, str]:\n        return {'hello': 'rapidy'}\n\n    async def put(self) -&gt; dict[str, str]:\n        return {'hello': 'rapidy'}\n\n    async def patch(self) -&gt; dict[str, str]:\n        return {'hello': 'rapidy'}\n\n    async def delete(self) -&gt; dict[str, str]:\n        return {'hello': 'rapidy'}\n\nrapidy = web.Application()\nrapidy.add_routes(routes)\n</code></pre> \u0414\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u0430 \u0431\u0435\u0437 \u0434\u0435\u043a\u043e\u0440\u0430\u0442\u043e\u0440\u0430 \u0447\u0435\u0440\u0435\u0437 <code>rapidy.web</code> (\u0432 \u0441\u0442\u0438\u043b\u0435 <code>aiohttp</code>) <pre><code>from rapidy import web\n\nroutes = web.RouteTableDef()\n\nclass Handler(web.View):\n    async def get(self) -&gt; dict[str, str]:\n        return {'hello': 'rapidy'}\n\n    async def post(self) -&gt; dict[str, str]:\n        return {'hello': 'rapidy'}\n\n    async def put(self) -&gt; dict[str, str]:\n        return {'hello': 'rapidy'}\n\n    async def patch(self) -&gt; dict[str, str]:\n        return {'hello': 'rapidy'}\n\n    async def delete(self) -&gt; dict[str, str]:\n        return {'hello': 'rapidy'}\n\nrapidy = web.Application()\nrapidy.add_routes([web.view('/', Handler)])\n</code></pre> \u0414\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u0430 \u0431\u0435\u0437 \u0434\u0435\u043a\u043e\u0440\u0430\u0442\u043e\u0440\u0430 \u0447\u0435\u0440\u0435\u0437 <code>rapidy.web</code> \u0441 \u0440\u0430\u0437\u043d\u044b\u043c\u0438 \u043f\u0443\u0442\u044f\u043c\u0438 (\u0432 \u0441\u0442\u0438\u043b\u0435 <code>aiohttp</code>) <pre><code>from rapidy import web\n\nroutes = web.RouteTableDef()\n\nclass Handler(web.View):\n    async def get(self, user_id: str = web.PathParam()) -&gt; dict[str, str]:\n        return {'hello': 'rapidy'}\n\n    async def post(self) -&gt; dict[str, str]:\n        return {'hello': 'rapidy'}\n\n    async def put(self) -&gt; dict[str, str]:\n        return {'hello': 'rapidy'}\n\n    async def patch(self) -&gt; dict[str, str]:\n        return {'hello': 'rapidy'}\n\n    async def delete(self) -&gt; dict[str, str]:\n        return {'hello': 'rapidy'}\n\nrapidy = web.Application()\nrapidy.add_routes([\n    web.get('/{user_id}', Handler),\n    web.view('/', Handler),\n])\n</code></pre>"},{"location":"ru/docs/server/handlers/#_11","title":"\u0410\u0442\u0440\u0438\u0431\u0443\u0442\u044b \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u043e\u0432","text":"<p>\u0410\u0442\u0440\u0438\u0431\u0443\u0442\u044b \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u044e\u0442 \u0443\u043f\u0440\u0430\u0432\u043b\u044f\u0442\u044c \u043f\u043e\u0432\u0435\u0434\u0435\u043d\u0438\u0435\u043c \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u043e\u0432 \u0438 \u043e\u0442\u0432\u0435\u0442\u0430\u043c\u0438.</p> <p>\u0410\u0442\u0440\u0438\u0431\u0443\u0442\u044b \u0430\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438 \u043f\u0440\u0438\u043c\u0435\u043d\u044f\u044e\u0442\u0441\u044f \u043a \u043e\u0442\u0432\u0435\u0442\u0430\u043c \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u043e\u0432, \u0435\u0441\u043b\u0438 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0447\u0442\u043e \u0443\u0433\u043e\u0434\u043d\u043e \u043a\u0440\u043e\u043c\u0435 <code>Response</code> (\u043d\u0435 \u043e\u0442\u043d\u043e\u0441\u0438\u0442\u0441\u044f \u043a \u0430\u0442\u0440\u0438\u0431\u0443\u0442\u0430\u043c <code>path</code> \u0438 <code>allow_head</code> \u0434\u043b\u044f \u043c\u0435\u0442\u043e\u0434\u0430 <code>get</code>).</p> <p>\u0410\u0442\u0440\u0438\u0431\u0443\u0442\u044b \u043f\u0440\u0438\u043c\u0435\u043d\u044f\u044e\u0442\u0441\u044f \u043a \u043e\u0442\u0432\u0435\u0442\u0430\u043c.</p> <p>\u0410\u0442\u0440\u0438\u0431\u0443\u0442 <code>response_content_type</code> \u0431\u0443\u0434\u0435\u0442 \u043f\u0440\u0438\u043c\u0435\u043d\u044f\u0442\u044c\u0441\u044f \u043a \u043a\u0430\u0436\u0434\u043e\u043c\u0443 \u043e\u0442\u0432\u0435\u0442\u0443 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u0430, \u043f\u043e\u0441\u043a\u043e\u043b\u044c\u043a\u0443 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 <code>python</code> \u043e\u0431\u044a\u0435\u043a\u0442. <pre><code>from rapidy.http import get, ContentType\n\n@get('/', response_content_type=ContentType.text_plain)\nasync def handler() -&gt; str:\n    return 'Hello Rapidy!'\n</code></pre></p> <p>\u0410\u0442\u0440\u0438\u0431\u0443\u0442\u044b \u043d\u0435 \u043f\u0440\u0438\u043c\u0435\u043d\u044f\u044e\u0442\u0441\u044f \u043a \u043e\u0442\u0432\u0435\u0442\u0430\u043c.</p> <p>\u0410\u0442\u0440\u0438\u0431\u0443\u0442 <code>response_content_type</code> \u043d\u0435 \u0431\u0443\u0434\u0435\u0442 \u043f\u0440\u0438\u043c\u0435\u043d\u044f\u0442\u044c\u0441\u044f \u043a \u043e\u0442\u0432\u0435\u0442\u0443 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u0430, \u043f\u043e\u0441\u043a\u043e\u043b\u044c\u043a\u0443 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u043d\u0438\u0437\u043a\u043e\u0443\u0440\u043e\u0432\u043d\u0435\u0432\u044b\u0439 <code>Response</code> \u043e\u0431\u044a\u0435\u043a\u0442. <pre><code>from rapidy.http import get, ContentType, Response\n\n@get('/', response_content_type=ContentType.text_plain)\nasync def handler() -&gt; Response:\n    return Response('Hello Rapidy!')\n</code></pre></p> <p>\u0412\u0441\u0435 \u0441\u043f\u043e\u0441\u043e\u0431\u044b \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u043e\u0432 \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u044e\u0442 \u043e\u0434\u0438\u043d\u0430\u043a\u043e\u0432\u044b\u0435 \u0430\u0442\u0440\u0438\u0431\u0443\u0442\u044b \u0434\u043b\u044f \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u0432\u0435\u0431-\u0437\u0430\u043f\u0440\u043e\u0441\u043e\u043c.</p>"},{"location":"ru/docs/server/handlers/#_12","title":"\u041e\u0441\u043d\u043e\u0432\u043d\u044b\u0435 \u0430\u0442\u0440\u0438\u0431\u0443\u0442\u044b (\u043f\u0440\u0438\u043c\u0435\u043d\u044f\u044e\u0442\u0441\u044f \u0432\u0441\u0435\u0433\u0434\u0430)","text":""},{"location":"ru/docs/server/handlers/#path","title":"path","text":"<p><code>path</code>: <code>str</code> \u2014 \u043c\u0430\u0440\u0448\u0440\u0443\u0442 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u0430 \u043d\u0430 \u0441\u0435\u0440\u0432\u0435\u0440\u0435. <pre><code>@get(\n    '/',\n)\nasync def handler() -&gt; str:\n    return 'ok'\n</code></pre></p>"},{"location":"ru/docs/server/handlers/#allow_head","title":"allow_head","text":"<p><code>allow_head</code>: <code>bool = True</code> \u2014 \u0435\u0441\u043b\u0438 \u0440\u0430\u0432\u0435\u043d True (\u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e), \u0442\u043e \u0434\u043e\u0431\u0430\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u043c\u0430\u0440\u0448\u0440\u0443\u0442 \u0434\u043b\u044f \u043c\u0435\u0442\u043e\u0434\u0430 <code>head</code> \u0441 \u0442\u0435\u043c \u0436\u0435 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u043e\u043c, \u0447\u0442\u043e \u0438 \u0434\u043b\u044f <code>get</code>.</p> <pre><code>@get(\n    '/',\n    allow_head=True,\n)\nasync def handler() -&gt; str:\n    return 'ok'\n</code></pre> <p>\u0410\u0442\u0442\u0440\u0438\u0431\u0443\u0442 \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u043f\u0440\u0438\u043c\u0435\u043d\u0435\u043d \u0442\u043e\u043b\u044c\u043a\u043e \u043a \u043c\u0435\u0442\u043e\u0434\u0443 <code>get</code>.</p>"},{"location":"ru/docs/server/handlers/#_13","title":"\u0412\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u044f \u043e\u0442\u0432\u0435\u0442\u0430","text":""},{"location":"ru/docs/server/handlers/#response_validate","title":"response_validate","text":"<p><code>response_validate</code>: <code>bool = True</code> \u2014 \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0442\u044c \u043b\u0438 \u043e\u0442\u0432\u0435\u0442 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u0430. <pre><code>@get(\n    '/',\n    response_validate=False,\n)\nasync def handler() -&gt; str:  # &lt;-- `str` will be ignored\n    return {'hello': 'rapidy'}\n</code></pre></p>"},{"location":"ru/docs/server/handlers/#response_type","title":"response_type","text":"<p><code>response_type</code>: <code>Type[Any] | None = ...</code> \u2014 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u0435\u0442 \u0442\u0438\u043f \u043e\u0442\u0432\u0435\u0442\u0430 (\u0437\u0430\u043c\u0435\u043d\u044f\u0435\u0442 \u0430\u043d\u043d\u043e\u0442\u0430\u0446\u0438\u044e \u0432\u043e\u0437\u0432\u0440\u0430\u0442\u0430). <pre><code>@get(\n    '/',\n    response_type=dict[str, str],  # &lt;-- `dict[str, str]` will be used for validation\n)\nasync def handler() -&gt; str:  # &lt;-- `str` will be ignored\n    return {'hello': 'rapidy'}\n</code></pre></p> <p>\u042d\u0442\u043e\u0442 \u0444\u043b\u0430\u0433 \u0434\u043e\u0431\u0430\u0432\u043b\u044f\u0435\u0442 \u0433\u0438\u0431\u043a\u043e\u0441\u0442\u044c \u0432 \u0441\u0435\u0440\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044e \u0438 \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u044e, \u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u0440\u0435\u0434\u043a\u043e.</p>"},{"location":"ru/docs/server/handlers/#_14","title":"\u0423\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0437\u0430\u0433\u043e\u043b\u043e\u0432\u043a\u0430\u043c\u0438 \u0438 \u043a\u043e\u0434\u0438\u0440\u043e\u0432\u043a\u043e\u0439","text":""},{"location":"ru/docs/server/handlers/#response_content_type","title":"response_content_type","text":"<p><code>response_content_type</code>: <code>str = 'application/json'</code> \u2014 \u0430\u0442\u0442\u0440\u0438\u0431\u0443\u0442 \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u044e\u0449\u0438\u0439 \u0443\u043f\u0440\u0430\u0432\u043b\u044f\u0442\u044c \u0437\u0430\u0433\u043e\u043b\u043e\u0432\u043a\u043e\u043c <code>Content-Type</code>.</p> <p>\u0417\u0430\u0433\u043e\u043b\u043e\u0432\u043e\u043a <code>Content-Type</code> \u0441\u043e\u043e\u0431\u0449\u0430\u0435\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0443 (\u0431\u0440\u0430\u0443\u0437\u0435\u0440\u0443, API-\u043a\u043b\u0438\u0435\u043d\u0442\u0443, \u0434\u0440\u0443\u0433\u043e\u043c\u0443 \u0441\u0435\u0440\u0432\u0435\u0440\u0443), \u043a\u0430\u043a\u043e\u0439 \u0442\u0438\u043f \u0434\u0430\u043d\u043d\u044b\u0445 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442\u0441\u044f \u0432 \u0442\u0435\u043b\u0435 HTTP-\u043e\u0442\u0432\u0435\u0442\u0430.</p> <pre><code>from rapidy.enums import ContentType\n\n@get(\n    '/',\n    response_content_type=ContentType.text_plain,\n)\nasync def handler() -&gt; str:\n    return 'hello, rapidy!'\n</code></pre> <p>\u0415\u0441\u043b\u0438 \u0443\u043a\u0430\u0437\u0430\u043d <code>content_type</code>, \u043f\u0435\u0440\u0435\u0434\u0430\u043d\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 \u0431\u0443\u0434\u0443\u0442 \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u044b \u0432 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0438\u0438 \u0441 \u043d\u0438\u043c.</p> <p>\u0415\u0441\u043b\u0438 <code>content_type</code> \u043d\u0435 \u0443\u043a\u0430\u0437\u0430\u043d - <code>content_type</code> \u0431\u0443\u0434\u0435\u0442 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d \u0430\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438 \u0432 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0438 \u043e\u0442 \u0442\u0438\u043f\u0430 \u0434\u0430\u043d\u043d\u044b\u0445 \u043a\u043e\u0442\u043e\u0440\u043e\u0435 \u043e\u0442\u0434\u0430\u0435\u0442 \u0441\u0435\u0440\u0432\u0435\u0440.</p> content_type=\"application/json <p><code>content_type=\"application/json\"</code> \u2014 \u0434\u0430\u043d\u043d\u044b\u0435 \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u0443\u044e\u0442\u0441\u044f \u0432 <code>JSON</code> \u0441 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\u043c jsonify(dumps=True) \u0438 \u043a\u043e\u0434\u0438\u0440\u0443\u044e\u0442\u0441\u044f \u0432 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0438\u0438 \u0441 response_charset.</p> <pre><code>from rapidy.http import get, ContentType\n\n@get(\n    '/',\n    content_type=ContentType.json,\n)\nasync def handler() -&gt; dict[str, str]:\n    return {'hello': 'rapidy!'}  # {\"hello\": \"rapidy!\"}\n</code></pre> <p>\u0415\u0441\u043b\u0438 \u043f\u0435\u0440\u0435\u0434\u0430\u043d\u043d\u044b\u0439 \u043e\u0431\u044a\u0435\u043a\u0442 \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u0441\u0442\u0440\u043e\u043a\u043e\u0439 <code>Response(body=\"string\")</code>, \u0442\u043e \u0441\u0442\u0440\u043e\u043a\u0430, \u0441\u043e\u0433\u043b\u0430\u0441\u043d\u043e \u0441\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u0443 JSON, \u0431\u0443\u0434\u0435\u0442 \u044d\u043a\u0440\u0430\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0430 \u0434\u0432\u0430\u0436\u0434\u044b: <pre><code>from rapidy.http import get, ContentType\n\n@get(\n    '/',\n    content_type=ContentType.json,\n)\nasync def handler() -&gt; str:\n    return 'hello rapidy!'  # \"'hello rapidy!'\"\n</code></pre></p> content_type=\"text/* <p><code>content_type=\"text/*\"</code> (\u043b\u044e\u0431\u043e\u0439 \u0442\u0435\u043a\u0441\u0442\u043e\u0432\u044b\u0439 \u0442\u0438\u043f: <code>text/plain</code>, <code>text/html</code> \u0438 \u0442. \u0434.) - \u0435\u0441\u043b\u0438 \u0434\u0430\u043d\u043d\u044b\u0435 \u0438\u043c\u0435\u044e\u0442 \u0442\u0438\u043f <code>str</code>, \u043e\u043d\u0438 \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u044e\u0442\u0441\u044f \u0431\u0435\u0437 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0439. \u0412 \u043f\u0440\u043e\u0442\u0438\u0432\u043d\u043e\u043c \u0441\u043b\u0443\u0447\u0430\u0435 \u043e\u043d\u0438 \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u0443\u044e\u0442\u0441\u044f \u0432 \u0441\u0442\u0440\u043e\u043a\u0443 \u0447\u0435\u0440\u0435\u0437 jsonify(dumps=False).</p> <pre><code>from rapidy.http import get, ContentType\n\n@get(\n    '/',\n    content_type=ContentType.text_any,\n)\nasync def handler() -&gt; str:\n    return 'hello rapidy!'  # \"hello rapidy!\"\n</code></pre> <p>\u0415\u0441\u043b\u0438 \u043f\u043e\u0441\u043b\u0435 <code>jsonify(dumps=False)</code> \u043e\u0431\u044a\u0435\u043a\u0442 \u0432\u0441\u0435 \u0435\u0449\u0435 \u043d\u0435 \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u0441\u0442\u0440\u043e\u043a\u043e\u0439, \u043e\u043d \u0434\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u043e \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u0443\u0435\u0442\u0441\u044f \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e response_json_encoder.</p> content_type - \u043b\u044e\u0431\u043e\u0439 \u0434\u0440\u0443\u0433\u043e\u0439 MIME-type. <p>\u0415\u0441\u043b\u0438 \u0434\u0430\u043d\u043d\u044b\u0435 \u0438\u043c\u0435\u044e\u0442 \u0442\u0438\u043f <code>bytes</code>, \u043e\u043d\u0438 \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u044e\u0442\u0441\u044f \u0431\u0435\u0437 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0439. \u0412 \u043f\u0440\u043e\u0442\u0438\u0432\u043d\u043e\u043c \u0441\u043b\u0443\u0447\u0430\u0435 \u043e\u043d\u0438 \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u0443\u044e\u0442\u0441\u044f \u0432 \u0441\u0442\u0440\u043e\u043a\u0443 \u0441 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\u043c jsonify(dumps=True) \u0438 \u043a\u043e\u0434\u0438\u0440\u0443\u044e\u0442\u0441\u044f \u0432 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0438\u0438 \u0441 response_json_encoder.</p> <p>\u0415\u0441\u043b\u0438 <code>content_type</code> \u043d\u0435 \u0443\u043a\u0430\u0437\u0430\u043d, \u043e\u043d \u0443\u0441\u0442\u0430\u043d\u0430\u0432\u043b\u0438\u0432\u0430\u0435\u0442\u0441\u044f \u0430\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438:</p> <ul> <li> <p><code>body: dict | BaseModel | dataclass</code> \u2192 <code>content_type=\"application/json\"</code> <pre><code>async def handler() -&gt; dict[str, str]:\n    return {\"hello\": \"rapidy\"}\n\nasync def handler() -&gt; SomeModel:\n    return SomeModel(hello=\"rapidy\")  # `SomeModel` inherits from `pydantic.BaseModel`\n</code></pre></p> </li> <li> <p><code>body: str | Enum | int | float | Decimal | bool</code> \u2192 <code>content_type=\"text/plain\"</code> <pre><code>async def handler() -&gt; str:\n    return 'string'\n\nasync def handler() -&gt; str:\n    return SomeEnum.string\n\nasync def handler() -&gt; int:\n    return 1\n\nasync def handler() -&gt; float:\n    return 1.0\n\nasync def handler() -&gt; Decimal:\n    return Decimal(\"1.0\")\n\nasync def handler() -&gt; bool:\n    return True\n</code></pre></p> </li> <li> <p><code>body: Any</code> \u2192 <code>content_type=\"application/octet-stream\"</code> <pre><code>async def handler() -&gt; bytes:\n    return b'bytes'\n\nasync def handler() -&gt; AnotherType:\n    return AnotherType()\n</code></pre></p> </li> </ul>"},{"location":"ru/docs/server/handlers/#response_charset","title":"response_charset","text":"<p><code>response_charset</code>: <code>str = 'utf-8'</code> \u2014 \u043a\u043e\u0434\u0438\u0440\u043e\u0432\u043a\u0430, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c\u0430\u044f \u0434\u043b\u044f \u043a\u043e\u0434\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u0434\u0430\u043d\u043d\u044b\u0445 \u043e\u0442\u0432\u0435\u0442\u0430.</p> <pre><code>from rapidy.enums import Charset\n\n@get(\n    '/',\n    response_charset=Charset.utf8,\n)\nasync def handler() -&gt; str:\n    return 'hello, rapidy!'\n</code></pre>"},{"location":"ru/docs/server/handlers/#response_json_encoder","title":"response_json_encoder","text":"<p><code>response_json_encoder</code>: <code>Callable = json.dumps</code> \u2014 \u0444\u0443\u043d\u043a\u0446\u0438\u044f, \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u044e\u0449\u0430\u044f \u043e\u0431\u044a\u0435\u043a\u0442 \u0438 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u044e\u0449\u0430\u044f \u0435\u0433\u043e JSON-\u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u0435.</p> <p>\u0410\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438 \u043f\u0440\u0438\u043c\u0435\u043d\u044f\u0435\u0442\u0441\u044f \u043a \u043b\u044e\u0431\u043e\u043c\u0443 python \u043e\u0431\u044a\u0435\u043a\u0442\u0443 \u043f\u043e\u0441\u043b\u0435 \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u0438 \u0435\u0433\u043e \u0447\u0435\u0440\u0435\u0437 <code>pydantic</code>. <pre><code>from typing import Any\n\ndef custom_encoder(obj: Any) -&gt; str:\n    ...\n\n@get(\n    '/',\n    response_json_encoder=custom_encoder,  # Converts the obtained string above into a JSON object using the `custom_encoder` function\n)\nasync def handler() -&gt; dict[str, str]:\n    return {'hello': 'rapidy!'}  # will be converted to a string by Rapidy's internal tools\n</code></pre></p>"},{"location":"ru/docs/server/handlers/#_15","title":"\u0421\u0436\u0430\u0442\u0438\u0435 \u0434\u0430\u043d\u043d\u044b\u0445","text":""},{"location":"ru/docs/server/handlers/#response_zlib_executor","title":"response_zlib_executor","text":"<p><code>response_zlib_executor</code>: <code>concurrent.futures.Executor | None = None</code> \u2014 \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u0441\u0436\u0430\u0442\u0438\u044f <code>zlib</code>. <pre><code>from concurrent.futures import Executor\n\nclass SomeExecutor(Executor):\n    ...\n\n@get(\n    '/',\n    response_zlib_executor=SomeExecutor,\n)\nasync def handler() -&gt; str:\n    return 'hello, rapidy!'\n</code></pre></p> <p>\u041f\u043e\u0434\u0440\u043e\u0431\u043d\u0435\u0435 \u043e <code>zlib_executor</code></p> <p><code>zlib_executor</code> \u2014 \u043c\u0435\u0445\u0430\u043d\u0438\u0437\u043c <code>aiohttp</code>. \u041f\u043e\u0434\u0440\u043e\u0431\u043d\u0435\u0435 \u0437\u0434\u0435\u0441\u044c.</p>"},{"location":"ru/docs/server/handlers/#response_zlib_executor_1","title":"response_zlib_executor","text":"<p>response_zlib_executor_size: <code>int | None = None</code> \u2014 \u0440\u0430\u0437\u043c\u0435\u0440 \u0442\u0435\u043b\u0430 \u0432 \u0431\u0430\u0439\u0442\u0430\u0445 \u0434\u043b\u044f \u0432\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f \u0441\u0436\u0430\u0442\u0438\u044f. <pre><code>@get(\n    '/',\n    response_zlib_executor_size=1024,\n)\nasync def handler() -&gt; str:\n    return 'hello, rapidy!'\n</code></pre></p>"},{"location":"ru/docs/server/handlers/#pydantic","title":"\u0423\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u043f\u043e\u043b\u044f\u043c\u0438 Pydantic","text":""},{"location":"ru/docs/server/handlers/#response_include_fields","title":"response_include_fields","text":"<p><code>response_include_fields</code>**: <code>set[str] | dict[str, Any] | None = None</code> \u2014 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440 <code>include</code> \u0438\u0437 <code>Pydantic</code>, \u0443\u043a\u0430\u0437\u044b\u0432\u0430\u044e\u0449\u0438\u0439, \u043a\u0430\u043a\u0438\u0435 \u043f\u043e\u043b\u044f \u0432\u043a\u043b\u044e\u0447\u0430\u0442\u044c. <pre><code>from pydantic import BaseModel, Field\n\nclass Result(BaseModel):\n    value: str = Field('data', alias='someValue')\n    another_value: str = Field('another_data', alias='someAnotherValue')\n\n@get(\n    '/',\n    response_include_fields={'value'},\n)\nasync def handler() -&gt; Result:\n    return Result()  # {'someValue': 'data'}\n</code></pre></p>"},{"location":"ru/docs/server/handlers/#response_exclude_fields","title":"response_exclude_fields","text":"<p><code>response_exclude_fields</code>: <code>set[str] | dict[str, Any] | None</code> \u2014 \u0441\u043f\u0438\u0441\u043e\u043a \u043f\u043e\u043b\u0435\u0439 \u0434\u043b\u044f \u0438\u0441\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f. <pre><code>from pydantic import BaseModel, Field\n\nclass Result(BaseModel):\n    value: str = Field('data', alias='someValue')\n    another_value: str = Field('another_data', alias='someAnotherValue')\n\n@get(\n    '/',\n    response_exclude_fields={'value'},\n)\nasync def handler() -&gt; Result:\n    return Result()  # {\"someValue\": \"data\"}\n</code></pre></p>"},{"location":"ru/docs/server/handlers/#response_by_alias","title":"response_by_alias","text":"<p><code>response_by_alias</code>: <code>bool = True</code> \u2014 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u043b\u0438 \u043f\u0441\u0435\u0432\u0434\u043e\u043d\u0438\u043c\u044b <code>Pydantic</code>. <pre><code>from pydantic import BaseModel, Field\n\nclass Result(BaseModel):\n    value: str = Field('data', alias='someValue')\n\n@get(\n    '/',\n    response_by_alias=True,  # &lt;-- default\n)\nasync def handler() -&gt; Result:\n    return Result()  # {\"someValue\": \"data\"}\n\n...\n\n@get(\n    '/',\n    response_by_alias=False,\n)\nasync def handler() -&gt; Result:\n    return Result()  # {\"value\": \"data\"}\n</code></pre></p>"},{"location":"ru/docs/server/handlers/#response_exclude_unset","title":"response_exclude_unset","text":"<p><code>response_exclude_unset</code>: <code>bool = False</code> \u2014 \u0438\u0441\u043a\u043b\u044e\u0447\u0430\u0442\u044c \u043b\u0438 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e. <pre><code>from pydantic import BaseModel, Field\n\nclass Result(BaseModel):\n    value: str = Field('data', alias='someValue')\n    another_value: str = Field('another_data', alias='someAnotherValue')\n\n@get(\n    '/',\n    exclude_unset=False,  # &lt;-- default\n)\nasync def handler() -&gt; Result:\n    Result(someAnotherValue='new_data')  # {\"someValue\": \"data\", \"someAnotherValue\": \"new_data\"}\n\n...\n\n@get(\n    '/',\n    exclude_unset=True,\n)\nasync def handler() -&gt; Result:\n    return Result(someAnotherValue='new_data')  # {\"someAnotherValue\": \"new_data\"}\n</code></pre></p>"},{"location":"ru/docs/server/handlers/#response_exclude_defaults","title":"response_exclude_defaults","text":"<p><code>response_exclude_defaults</code>: <code>bool = False</code> \u2014 \u0438\u0441\u043a\u043b\u044e\u0447\u0430\u0442\u044c \u043b\u0438 \u044f\u0432\u043d\u043e \u0437\u0430\u0434\u0430\u043d\u043d\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f, \u0435\u0441\u043b\u0438 \u043e\u043d\u0438 \u0441\u043e\u0432\u043f\u0430\u0434\u0430\u044e\u0442 \u0441 \u0434\u0435\u0444\u043e\u043b\u0442\u043d\u044b\u043c\u0438. <pre><code>from pydantic import BaseModel, Field\n\nclass Result(BaseModel):\n    value: str = Field('data', alias='someValue')\n\n@get(\n    '/',\n    exclude_defaults=False,  # &lt;-- default\n)\nasync def handler() -&gt; Result:\n    return Result()  # {\"value\": \"data\"}\n\n...\n\n@get(\n    '/',\n    exclude_defaults=True,\n)\nasync def handler() -&gt; Result:\n    return Result()  # {}\n</code></pre></p>"},{"location":"ru/docs/server/handlers/#response_exclude_none","title":"response_exclude_none","text":"<p><code>response_exclude_none</code>: <code>bool = False</code> \u2014 \u0438\u0441\u043a\u043b\u044e\u0447\u0430\u0442\u044c \u043b\u0438 <code>None</code>-\u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f. <pre><code>from pydantic import BaseModel, Field\n\nclass Result(BaseModel):\n    value: str = Field('data', alias='someValue')\n    none_value: None = None\n\n@get(\n    '/',\n    exclude_none=False,  # &lt;-- default\n)\nasync def handler() -&gt; Result:\n    return Result()  # {\"someValue\": \"data\", \"none_value\": null}\n\n...\n\n@get(\n    '/',\n    exclude_none=True,\n)\nasync def handler() -&gt; Result:\n    return Result()  # {\"someValue\": \"data\"}\n</code></pre></p>"},{"location":"ru/docs/server/handlers/#response_custom_encoder","title":"response_custom_encoder","text":"<p><code>response_custom_encoder</code>: <code>Callable | None = None</code> \u2014 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440 custom_encoder \u0438\u0437 <code>Pydantic</code>, \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u044e\u0449\u0438\u0439 \u0437\u0430\u0434\u0430\u0442\u044c \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0439 \u043a\u043e\u0434\u0438\u0440\u043e\u0432\u0449\u0438\u043a.</p>"},{"location":"ru/docs/server/handlers/http_router/#_1","title":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435","text":"<p><code>HTTPRouter</code> \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0433\u0440\u0443\u043f\u043f\u044b \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u043e\u0432 \u0438 \u0438\u0433\u0440\u0430\u0435\u0442 \u043a\u043b\u044e\u0447\u0435\u0432\u0443\u044e \u0440\u043e\u043b\u044c \u0432 \u043c\u0430\u0440\u0448\u0440\u0443\u0442\u0438\u0437\u0430\u0446\u0438\u0438 (routing), \u043d\u0430\u043f\u0440\u0430\u0432\u043b\u044f\u044f \u0437\u0430\u043f\u0440\u043e\u0441\u044b \u043a \u043d\u0443\u0436\u043d\u044b\u043c \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u0430\u043c \u0432 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0438 \u043e\u0442 HTTP-\u043c\u0435\u0442\u043e\u0434\u0430, \u043f\u0443\u0442\u0438, \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u0432 \u0438 \u0434\u0440\u0443\u0433\u0438\u0445 \u0443\u0441\u043b\u043e\u0432\u0438\u0439.</p> <p><code>HTTPRouter</code> \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0438\u0440\u0443\u0435\u0442\u0441\u044f \u0442\u0430\u043a \u0436\u0435, \u043a\u0430\u043a \u0438 \u043b\u044e\u0431\u043e\u0439 HTTP-\u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a.</p> <pre><code>from rapidy import Rapidy\nfrom rapidy.http import HTTPRouter, get\n\n@get('/healthcheck')  # /healthcheck\nasync def healthcheck() -&gt; str:\n    return 'ok'\n\n@get('/hello')  # /api/hello\nasync def hello_handler() -&gt; dict[str, str]:\n    return {'hello': 'rapidy'}\n\napi_router = HTTPRouter('/api', [hello_handler])\n\nrapidy = Rapidy(http_route_handlers=[healthcheck, api_router])\n</code></pre> <p><code>HTTPRouter</code> \u043d\u0435 \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u0435\u0442 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044e \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u043e\u0432 \u0432 \u0441\u0442\u0438\u043b\u0435 <code>aiohttp</code>.</p> <p>\u041d\u0438 \u043e\u0434\u0438\u043d \u0438\u0437 \u0441\u043f\u043e\u0441\u043e\u0431\u043e\u0432 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u043e\u0432 \u0432 \u0441\u0442\u0438\u043b\u0435 <code>aiohttp</code> \u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c \u043d\u0435 \u0431\u0443\u0434\u0435\u0442.</p> <p>\u0415\u0441\u043b\u0438 \u0432\u0430\u043c \u043d\u0443\u0436\u043d\u043e \u0437\u0430\u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0438\u0440\u043e\u0432\u0430\u0442\u044c HTTP-\u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a \u0432 <code>HTTPRouter</code>, \u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435\u0441\u044c \u043c\u0435\u0442\u043e\u0434\u0430\u043c\u0438 \u043c\u043e\u0434\u0443\u043b\u044f <code>rapidy.http</code> (<code>get</code>, <code>post</code>, ...).</p>"},{"location":"ru/docs/server/handlers/http_router/#httprouter_1","title":"\u0412\u043b\u043e\u0436\u0435\u043d\u043d\u044b\u0435 \u043c\u0430\u0440\u0448\u0440\u0443\u0442\u0438\u0437\u0430\u0442\u043e\u0440\u044b (<code>HTTPRouter</code>)","text":"<p><code>HTTPRouter</code> \u043c\u043e\u0436\u043d\u043e \u0432\u043a\u043b\u0430\u0434\u044b\u0432\u0430\u0442\u044c \u0434\u0440\u0443\u0433 \u0432 \u0434\u0440\u0443\u0433\u0430, \u0447\u0442\u043e \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u0441\u043e\u0437\u0434\u0430\u0432\u0430\u0442\u044c \u043c\u043e\u0434\u0443\u043b\u044c\u043d\u044b\u0435 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f.</p> <p>\u042d\u0442\u043e \u043f\u043e\u043b\u0435\u0437\u043d\u043e, \u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u0434\u043b\u044f \u0432\u0435\u0440\u0441\u0438\u043e\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f API.</p> <pre><code>from rapidy import Rapidy\nfrom rapidy.http import HTTPRouter, get\n\n@get('/hello')  # /api/v1/hello\nasync def hello_handler_v1() -&gt; dict[str, str | int]:\n    return {'hello': 'rapidy', 'version': 1}\n\n@get('/hello')  # /api/v2/hello\nasync def hello_handler_v2() -&gt; dict[str, str | int]:\n    return {'hello': 'rapidy', 'version': 2}\n\nv1_router = HTTPRouter('/v1', [hello_handler_v1])\nv2_router = HTTPRouter('/v2', [hello_handler_v2])\n\napi_router = HTTPRouter('/api', [v1_router, v2_router])\n\nrapidy = Rapidy(http_route_handlers=[api_router])\n</code></pre> <p>\u041a\u0430\u0436\u0434\u043e\u043c\u0443 <code>HTTPRouter</code> \u043c\u043e\u0436\u043d\u043e \u043f\u0435\u0440\u0435\u0434\u0430\u0442\u044c \u0441\u043e\u0431\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u0435 middleware.</p> <p>\u042d\u0442\u043e \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442, \u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u043f\u0440\u0438\u043c\u0435\u043d\u044f\u0442\u044c \u0440\u0430\u0437\u043d\u044b\u0435 \u043c\u0435\u0445\u0430\u043d\u0438\u0437\u043c\u044b \u0430\u0432\u0442\u043e\u0440\u0438\u0437\u0430\u0446\u0438\u0438 \u0434\u043b\u044f \u0440\u0430\u0437\u043d\u044b\u0445 \u0433\u0440\u0443\u043f\u043f \u043c\u0430\u0440\u0448\u0440\u0443\u0442\u043e\u0432.</p> <pre><code>from rapidy import Rapidy\nfrom rapidy.http import get, HTTPRouter, middleware, Request, StreamResponse\nfrom rapidy.typedefs import CallNext\n\n@get('/hello')  # /api/v1/hello &amp; /api/v2/hello\nasync def hello_handler() -&gt; dict[str, str]:\n    return {'hello': 'rapidy'}\n\n@middleware\nasync def auth_middleware_1(request: Request, call_next: CallNext) -&gt; StreamResponse:\n    # auth logic 1 ...\n    print('auth 1 ...')\n    return await call_next(request)\n\n@middleware\nasync def auth_middleware_2(request: Request, call_next: CallNext) -&gt; StreamResponse:\n    # auth logic 2 ...\n    print('auth 2 ...')\n    return await call_next(request)\n\nrouter_auth_1 = HTTPRouter('/v1', [hello_handler], middlewares=[auth_middleware_1])\nrouter_auth_2 = HTTPRouter('/v2', [hello_handler], middlewares=[auth_middleware_2])\n\napi_router = HTTPRouter('/api', [router_auth_1, router_auth_2])\n\nrapidy = Rapidy(http_route_handlers=[api_router])\n</code></pre>"},{"location":"ru/docs/server/handlers/http_router/#httprouter_2","title":"\u0410\u0442\u0440\u0438\u0431\u0443\u0442\u044b <code>HTTPRouter</code>","text":""},{"location":"ru/docs/server/handlers/http_router/#path","title":"path","text":"<p><code>path</code>: <code>str</code> \u2014 \u043c\u0430\u0440\u0448\u0440\u0443\u0442 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u0430 \u043d\u0430 \u0441\u0435\u0440\u0432\u0435\u0440\u0435.</p> <pre><code>from rapidy.http import HTTPRouter\n\nrouter = HTTPRouter(\n    path='/api',\n)\n</code></pre>"},{"location":"ru/docs/server/handlers/http_router/#route_handlers","title":"route_handlers","text":"<p><code>route_handlers</code>: <code>Iterable[BaseHTTPRouter] = ()</code> \u2014 \u0441\u043f\u0438\u0441\u043e\u043a \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u043e\u0432 \u043c\u0430\u0440\u0448\u0440\u0443\u0442\u043e\u0432. \u041c\u043e\u0436\u0435\u0442 \u0432\u043a\u043b\u044e\u0447\u0430\u0442\u044c \u043a\u0430\u043a \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u044b\u0435 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u0438, \u0442\u0430\u043a \u0438 \u0432\u043b\u043e\u0436\u0435\u043d\u043d\u044b\u0435 <code>HTTPRouter</code>.</p> <pre><code>from rapidy.http import get, HTTPRouter\n\n@get('/hello')  # /api/hello\nasync def hello_handler() -&gt; str:\n    return 'hello rapidy!'\n\nrouter = HTTPRouter(\n    path='/api',\n    route_handlers=[hello_handler],\n)\n</code></pre>"},{"location":"ru/docs/server/handlers/http_router/#middlewares","title":"middlewares","text":"<p><code>middlewares</code>: <code>Optional[Iterable[Middleware]] = None</code> \u2014 \u0441\u043f\u0438\u0441\u043e\u043a middleware, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043f\u0440\u0438\u043c\u0435\u043d\u044f\u044e\u0442\u0441\u044f \u043a\u043e \u0432\u0441\u0435\u043c \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u0430\u043c, \u0432\u043a\u043b\u044e\u0447\u0430\u044f \u0434\u043e\u0447\u0435\u0440\u043d\u0438\u0435 \u043c\u0430\u0440\u0448\u0440\u0443\u0442\u0438\u0437\u0430\u0442\u043e\u0440\u044b.</p> <pre><code>from rapidy.http import middleware, Request, StreamResponse, HTTPRouter\nfrom rapidy.typedefs import CallNext\n\n@middleware\nasync def hello_middleware(request: Request, call_next: CallNext) -&gt; StreamResponse:\n    print('hello')\n    return await call_next(request)\n\nrouter = HTTPRouter(\n    path='/api',\n    middlewares=[hello_middleware],\n)\n</code></pre> <p>\u041f\u043e\u0434\u0440\u043e\u0431\u043d\u0435\u0435 \u043f\u0440\u043e <code>Middlewares</code> \u043c\u043e\u0436\u043d\u043e \u043f\u0440\u043e\u0447\u0438\u0442\u0430\u0442\u044c \u0437\u0434\u0435\u0441\u044c.</p>"},{"location":"ru/docs/server/handlers/http_router/#client_max_size","title":"client_max_size","text":"<p><code>client_max_size</code>: <code>int = 1024**2</code> \u2014 \u041c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u044b\u0439 \u0440\u0430\u0437\u043c\u0435\u0440 \u0437\u0430\u043f\u0440\u043e\u0441\u0430 \u0432 \u0431\u0430\u0439\u0442\u0430\u0445.</p> <pre><code>from rapidy.http import HTTPRouter\n\nrouter = HTTPRouter(\n    path='/api',\n    client_max_size=1000,\n)\n</code></pre>"},{"location":"ru/docs/server/handlers/http_router/#_2","title":"\u0423\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0436\u0438\u0437\u043d\u0435\u043d\u043d\u044b\u043c \u0446\u0438\u043a\u043b\u043e\u043c","text":"<p><code>HTTPRouter</code> \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u0435\u0442 \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0436\u0438\u0437\u043d\u0435\u043d\u043d\u044b\u043c \u0446\u0438\u043a\u043b\u043e\u043c \u0442\u0430\u043a \u0436\u0435, \u043a\u0430\u043a \u0438 \u043e\u0441\u043d\u043e\u0432\u043d\u043e\u0435 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435.</p> <p>\u041f\u043e\u0434\u0440\u043e\u0431\u043d\u0435\u0435 \u043f\u0440\u043e <code>Lifespan</code> \u043c\u043e\u0436\u043d\u043e \u043f\u0440\u043e\u0447\u0438\u0442\u0430\u0442\u044c \u0437\u0434\u0435\u0441\u044c.</p>"},{"location":"ru/docs/server/handlers/http_router/#on_startup","title":"on_startup","text":"<p><code>on_startup</code>: <code>Optional[List[LifespanHook]]</code> \u2014 \u0441\u043f\u0438\u0441\u043e\u043a \u0437\u0430\u0434\u0430\u0447, \u0437\u0430\u043f\u0443\u0441\u043a\u0430\u0435\u043c\u044b\u0445 \u043f\u0440\u0438 \u0441\u0442\u0430\u0440\u0442\u0435 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f.</p> <pre><code>from rapidy.http import HTTPRouter\n\nasync def startup() -&gt; None:\n    print('startup')\n\nrouter = HTTPRouter(\n    path='/api',\n    on_startup=[startup],\n)\n</code></pre>"},{"location":"ru/docs/server/handlers/http_router/#on_shutdown","title":"on_shutdown","text":"<p><code>on_shutdown</code>: <code>Optional[List[LifespanHook]]</code> \u2014 \u0437\u0430\u0434\u0430\u0447\u0438, \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0435\u043c\u044b\u0435 \u043f\u0440\u0438 \u043e\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0435 \u0441\u0435\u0440\u0432\u0435\u0440\u0430.</p> <pre><code>from rapidy.http import HTTPRouter\n\nasync def shutdown() -&gt; None:\n    print('shutdown')\n\nrouter = HTTPRouter(\n    path='/api',\n    on_shutdown=[shutdown],\n)\n</code></pre>"},{"location":"ru/docs/server/handlers/http_router/#on_cleanup","title":"on_cleanup","text":"<p><code>on_cleanup</code>: <code>Optional[List[LifespanHook]]</code> \u2014 \u0437\u0430\u0434\u0430\u0447\u0438, \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0435\u043c\u044b\u0435 \u043f\u043e\u0441\u043b\u0435 <code>on_shutdown</code>.</p> <pre><code>from rapidy.http import HTTPRouter\n\nasync def cleanup() -&gt; None:\n    print('cleanup')\n\nrouter = HTTPRouter(\n    path='/api',\n    on_cleanup=[cleanup],\n)\n</code></pre>"},{"location":"ru/docs/server/handlers/http_router/#lifespan","title":"lifespan","text":"<p><code>lifespan</code>: <code>Optional[List[LifespanCTX]] = None</code> \u2014 \u0441\u043f\u0438\u0441\u043e\u043a \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442\u043d\u044b\u0445 \u043c\u0435\u043d\u0435\u0434\u0436\u0435\u0440\u043e\u0432, \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u044e\u0449\u0438\u0445 \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0436\u0438\u0437\u043d\u0435\u043d\u043d\u044b\u043c \u0446\u0438\u043a\u043b\u043e\u043c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f.</p> <pre><code>from contextlib import asynccontextmanager\nfrom typing import AsyncGenerator\nfrom rapidy import Rapidy\nfrom rapidy.http import HTTPRouter\n\n@asynccontextmanager\nasync def bg_task(rapidy: Rapidy) -&gt; AsyncGenerator[None, None]:\n    try:\n        print('starting background task')\n        yield\n    finally:\n        print('finishing background task')\n\nrouter = HTTPRouter(\n    path='/api',\n    lifespan=[bg_task],\n)\n</code></pre>"},{"location":"ru/docs/server/http_errors/","title":"\u0423\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 HTTP-\u043e\u0448\u0438\u0431\u043a\u0430\u043c\u0438","text":""},{"location":"ru/docs/server/http_errors/#_1","title":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435","text":"<p>HTTP-\u043e\u0448\u0438\u0431\u043a\u0438 \u2014 \u044d\u0442\u043e \u043e\u0431\u044a\u0435\u043a\u0442\u044b \u0441 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0451\u043d\u043d\u043e\u0439 \u043b\u043e\u0433\u0438\u043a\u043e\u0439, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043c\u043e\u0433\u0443\u0442 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0442\u044c \u043e\u0442\u0432\u0435\u0442 \u0432\u0435\u0431-\u0441\u0435\u0440\u0432\u0435\u0440\u0430 \u0441 \u043f\u0440\u0435\u0434\u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0451\u043d\u043d\u044b\u043c <code>HTTP-\u043a\u043e\u0434\u043e\u043c</code>.</p> <p>\u041e\u0448\u0438\u0431\u043a\u0438 \u0432\u044b\u0437\u044b\u0432\u0430\u044e\u0442\u0441\u044f \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u043a\u043e\u043d\u0441\u0442\u0440\u0443\u043a\u0446\u0438\u0438 <code>raise</code>.</p> <pre><code>from rapidy import Rapidy\nfrom rapidy.http import get, HTTPBadRequest\n\n@get('/')\nasync def handler() -&gt; None:\n    raise HTTPBadRequest()  # 400\n\napp = Rapidy(http_route_handlers=[handler])\n</code></pre> <p>HTTP-\u043e\u0448\u0438\u0431\u043a\u0438 \u043c\u043e\u0433\u0443\u0442 \u0431\u044b\u0442\u044c \u0432\u044b\u0437\u0432\u0430\u043d\u044b \u043a\u0430\u043a \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u043e\u043c, \u0442\u0430\u043a \u0438 \u0441\u0430\u043c\u0438\u043c \u0432\u0435\u0431-\u0441\u0435\u0440\u0432\u0435\u0440\u043e\u043c <code>Rapidy</code>, \u0435\u0441\u043b\u0438 \u043a\u043b\u0438\u0435\u043d\u0442 \u0438\u043b\u0438 \u0441\u0435\u0440\u0432\u0435\u0440 \u0441\u043e\u0432\u0435\u0440\u0448\u0430\u0442 \u043e\u0448\u0438\u0431\u043a\u0443.</p> <p>\u0412\u0441\u0435 \u043e\u0448\u0438\u0431\u043a\u0438 \u043d\u0430\u0445\u043e\u0434\u044f\u0442\u0441\u044f \u0432 \u043c\u043e\u0434\u0443\u043b\u0435 <code>rapidy.web_exceptions</code>, \u043d\u043e \u0438\u0445 \u0442\u0430\u043a\u0436\u0435 \u043c\u043e\u0436\u043d\u043e \u0438\u043c\u043f\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0438\u0437 <code>rapidy.http</code>.</p>"},{"location":"ru/docs/server/http_errors/#http-_1","title":"\u0412\u0438\u0434\u044b HTTP-\u043e\u0448\u0438\u0431\u043e\u043a","text":"<p><code>Rapidy</code> \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u0435\u0442 \u0447\u0435\u0442\u044b\u0440\u0435 \u0442\u0438\u043f\u0430 HTTP-\u043e\u0448\u0438\u0431\u043e\u043a:</p> <ul> <li>2xx \u2014 \u0443\u0441\u043f\u0435\u0448\u043d\u044b\u0435 \u043e\u0442\u0432\u0435\u0442\u044b (\u0431\u0430\u0437\u043e\u0432\u044b\u0439 \u043a\u043b\u0430\u0441\u0441 \u2014 <code>HTTPSuccessful</code>)</li> <li>3xx \u2014 \u043f\u0435\u0440\u0435\u043d\u0430\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u044f (\u0431\u0430\u0437\u043e\u0432\u044b\u0439 \u043a\u043b\u0430\u0441\u0441 \u2014 <code>HTTPRedirection</code>)</li> <li>4xx \u2014 \u043e\u0448\u0438\u0431\u043a\u0438 \u043a\u043b\u0438\u0435\u043d\u0442\u0430 (\u0431\u0430\u0437\u043e\u0432\u044b\u0439 \u043a\u043b\u0430\u0441\u0441 \u2014 <code>HTTPClientError</code>)</li> <li>5xx \u2014 \u043e\u0448\u0438\u0431\u043a\u0438 \u0441\u0435\u0440\u0432\u0435\u0440\u0430 (\u0431\u0430\u0437\u043e\u0432\u044b\u0439 \u043a\u043b\u0430\u0441\u0441 \u2014 <code>HTTPServerError</code>)</li> </ul> <p>\u0411\u0430\u0437\u043e\u0432\u044b\u0435 \u043a\u043b\u0430\u0441\u0441\u044b \u043c\u043e\u0436\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0434\u043b\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u0432\u0441\u0435\u0445 \u0434\u043e\u0447\u0435\u0440\u043d\u0438\u0445 \u043e\u0448\u0438\u0431\u043e\u043a.</p> <p>\u041f\u043e\u0434\u0440\u043e\u0431\u043d\u0435\u0435 \u043e HTTP-\u043e\u0448\u0438\u0431\u043a\u0430\u0445 \u043c\u043e\u0436\u043d\u043e \u043f\u0440\u043e\u0447\u0438\u0442\u0430\u0442\u044c \u0432 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u0438 <code>aiohttp</code> \u0437\u0434\u0435\u0441\u044c.</p>"},{"location":"ru/docs/server/http_errors/#http-_2","title":"\u0412\u044b\u0437\u043e\u0432 HTTP-\u043e\u0448\u0438\u0431\u043e\u043a","text":""},{"location":"ru/docs/server/http_errors/#http-_3","title":"\u0412\u044b\u0437\u043e\u0432 HTTP-\u043e\u0448\u0438\u0431\u043a\u0438 \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u043e\u043c","text":"<p>\u0420\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a \u043c\u043e\u0436\u0435\u0442 \u0432\u044b\u0437\u0432\u0430\u0442\u044c \u043e\u0448\u0438\u0431\u043a\u0443 \u0441\u0430\u043c\u043e\u0441\u0442\u043e\u044f\u0442\u0435\u043b\u044c\u043d\u043e, \u0435\u0441\u043b\u0438 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0437\u0430\u043f\u0440\u043e\u0441\u0430 \u0438\u0434\u0451\u0442 \u043f\u043e \u043d\u0435\u0443\u0441\u043f\u0435\u0448\u043d\u043e\u043c\u0443 \u0441\u0446\u0435\u043d\u0430\u0440\u0438\u044e.</p> <pre><code>from rapidy import Rapidy\nfrom rapidy.http import get, HTTPBadRequest\n\n@get('/')\nasync def handler() -&gt; None:\n    raise HTTPBadRequest()  # 400\n\napp = Rapidy(http_route_handlers=[handler])\n</code></pre> <pre><code>curl -X GET http://127.0.0.1:8080\n</code></pre> <pre><code>400: Bad Request\n</code></pre>"},{"location":"ru/docs/server/http_errors/#http-_4","title":"\u0412\u044b\u0437\u043e\u0432 HTTP-\u043e\u0448\u0438\u0431\u043a\u0438 \u0432\u0435\u0431-\u0441\u0435\u0440\u0432\u0435\u0440\u043e\u043c","text":"<p>\u0412\u0435\u0431-\u0441\u0435\u0440\u0432\u0435\u0440 \u0432\u044b\u0437\u043e\u0432\u0435\u0442 \u043e\u0448\u0438\u0431\u043a\u0443 \u0430\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438, \u0435\u0441\u043b\u0438 \u0437\u0430\u043f\u0440\u043e\u0441 \u043d\u0435 \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0430\u043d.</p> Not Found \u2014 <code>404</code> <p><pre><code>from rapidy import Rapidy\nfrom rapidy.http import get\n\n@get('/')\nasync def handler() -&gt; ...:\n    ...\n\napp = Rapidy(http_route_handlers=[handler])\n</code></pre> <pre><code>curl -X POST http://127.0.0.1:8080/some_api\n</code></pre> <pre><code>404: Not Found\n</code></pre></p> Method Not Allowed \u2014 <code>405</code> <p><pre><code>from rapidy import Rapidy\nfrom rapidy.http import get\n\n\n@get('/')\nasync def handler() -&gt; str:\n    return 'ok'\n\n\nrapidy = Rapidy(http_route_handlers=[handler])\n</code></pre> <pre><code>curl -X POST http://127.0.0.1:8080\n</code></pre> <pre><code>405: Method Not Allowed\n</code></pre></p>"},{"location":"ru/docs/server/http_errors/#validation-error","title":"\u041e\u0448\u0438\u0431\u043a\u0430 \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u0438 (Validation Error)","text":"<p>\u041f\u0440\u0438 \u043d\u0435\u0443\u0441\u043f\u0435\u0448\u043d\u043e\u0439 \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u0438 \u0432\u0435\u0431-\u0437\u0430\u043f\u0440\u043e\u0441\u0430 \u043a\u043b\u0438\u0435\u043d\u0442 \u043f\u043e\u043b\u0443\u0447\u0438\u0442 \u043e\u0442\u0432\u0435\u0442 \u0432 \u0444\u043e\u0440\u043c\u0430\u0442\u0435 <code>application/json</code> \u0441 \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0435\u043c \u043e\u0448\u0438\u0431\u043a\u0438.</p> <p><pre><code>from pydantic import BaseModel, Field\nfrom rapidy import Rapidy\nfrom rapidy.http import post, Body\n\nclass BodyRequestSchema(BaseModel):\n    data: str = Field(min_length=3, max_length=20)\n\n@post('/')\nasync def handler(\n        body: BodyRequestSchema = Body(),\n) -&gt; dict[str, str]:\n    return {'hello': 'rapidy'}\n\nrapidy = Rapidy(http_route_handlers=[handler])\n</code></pre> <pre><code>curl -X POST \\\n-H \"Content-Type: application/json\" -d '{\"data\": \"d\"}' -v \\\nhttp://127.0.0.1:8080\n</code></pre> <pre><code>&lt; HTTP/1.1 422 Unprocessable Entity ...\n{\n    \"errors\": [\n        {\n            \"loc\": [\"body\", \"data\"],\n            \"type\": \"string_too_short\",\n            \"msg\": \"String should have at least 3 characters\",\n            \"ctx\": {\"min_length\": 3}\n        }\n    ]\n}\n</code></pre></p> <p>HTTP-\u043e\u0448\u0438\u0431\u043a\u0430 <code>HTTPValidationFailure</code> \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u0441\u043f\u0438\u0441\u043e\u043a \u043e\u0448\u0438\u0431\u043e\u043a \u0432 \u043f\u043e\u043b\u0435 <code>validation_errors</code>.</p> <p>\u0427\u0442\u043e\u0431\u044b \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0434\u043e\u0441\u0442\u0443\u043f \u043a \u044d\u0442\u0438\u043c \u043e\u0448\u0438\u0431\u043a\u0430\u043c, \u043c\u043e\u0436\u043d\u043e \u043f\u0435\u0440\u0435\u0445\u0432\u0430\u0442\u0438\u0442\u044c <code>HTTPValidationFailure</code>: <pre><code>try:\n    return await handler(request)\nexcept HTTPValidationFailure as validation_failure_error:\n    errors = validation_failure_error.validation_errors\n    ...\n</code></pre></p> <p><code>HTTPValidationFailure</code> \u043d\u0430\u0441\u043b\u0435\u0434\u0443\u0435\u0442\u0441\u044f \u043e\u0442 <code>HTTPUnprocessableEntity</code>.</p> <p>\u042d\u0442\u043e \u0437\u043d\u0430\u0447\u0438\u0442, \u0447\u0442\u043e \u043e\u0431\u0435 \u043e\u0448\u0438\u0431\u043a\u0438 \u043c\u043e\u0436\u043d\u043e \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c \u0447\u0435\u0440\u0435\u0437 <code>HTTPUnprocessableEntity</code>, \u0435\u0441\u043b\u0438 \u043d\u0435 \u0442\u0440\u0435\u0431\u0443\u0435\u0442\u0441\u044f \u0440\u0430\u0441\u043a\u0440\u044b\u0432\u0430\u0442\u044c \u043a\u043b\u0438\u0435\u043d\u0442\u0443 \u043f\u043e\u0434\u0440\u043e\u0431\u043d\u043e\u0441\u0442\u0438 \u043e\u0448\u0438\u0431\u043a\u0438. <pre><code>try:\n    return await handler(request)\nexcept HTTPUnprocessableEntity:\n    ...\n</code></pre></p>"},{"location":"ru/docs/server/http_errors/#_2","title":"\u041f\u0435\u0440\u0435\u0445\u0432\u0430\u0442 \u043e\u0448\u0438\u0431\u043e\u043a","text":"<p>\u0418\u043d\u043e\u0433\u0434\u0430 \u0442\u0440\u0435\u0431\u0443\u0435\u0442\u0441\u044f \u043f\u0435\u0440\u0435\u0445\u0432\u0430\u0442\u0438\u0442\u044c \u043e\u0448\u0438\u0431\u043a\u0443, \u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u0447\u0442\u043e\u0431\u044b \u0438\u0437\u043c\u0435\u043d\u0438\u0442\u044c \u043e\u0442\u0432\u0435\u0442 \u0441\u0435\u0440\u0432\u0435\u0440\u0430.</p> <p>\u0414\u043b\u044f \u044d\u0442\u043e\u0433\u043e \u043c\u043e\u0436\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c <code>middleware</code>:</p> <pre><code>from logging import getLogger\nfrom rapidy.http import (\n    middleware, Request, StreamResponse, HTTPValidationFailure, HTTPInternalServerError, HTTPException,\n)\nfrom rapidy.typedefs import CallNext\n\nlogger = getLogger(__name__)\n\n\n@middleware\nasync def error_catch_middleware(\n        request: Request,\n        call_next: CallNext,\n) -&gt; StreamResponse:\n    try:\n        return await call_next(request)\n\n    except HTTPValidationFailure as validation_failure_error:\n        validation_errors = validation_failure_error.validation_errors\n        logger.debug('Validation error: `%s request: %s`', str(request.rel_url), validation_errors)\n        raise validation_failure_error\n\n    except HTTPInternalServerError as server_error:\n        logger.info('Internal server error: %s', server_error)\n        raise server_error\n\n    except HTTPException as unhandled_http_error:\n        raise unhandled_http_error\n\n    except Exception as unhandled_error:\n        logger.exception('Unhandled error `%s`: %s', str(request.rel_url), unhandled_error)\n        raise HTTPInternalServerError\n</code></pre> \u041f\u0440\u0438\u043c\u0435\u0440 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u0432\u0441\u0435\u0445 \u043e\u0448\u0438\u0431\u043e\u043a \u0441 \u0443\u043d\u0438\u0444\u0438\u0446\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u043c \u043e\u0442\u0432\u0435\u0442\u043e\u043c <pre><code>from http import HTTPStatus\nfrom logging import getLogger\nfrom typing import Any\nfrom pydantic import BaseModel\nfrom rapidy import Rapidy, run_app\nfrom rapidy.http import (\n    get,\n    middleware,\n    Request,\n    Response,\n    StreamResponse,\n    HTTPValidationFailure,\n    HTTPClientError,\n    HTTPInternalServerError,\n    HTTPException,\n)\nfrom rapidy.typedefs import CallNext, ValidationErrorList\n\nlogger = getLogger(__name__)\n\nclass ServerResponse(BaseModel):\n    message: str = 'Success'\n    result: Any | None = None\n    errors: ValidationErrorList | None = None\n\n@middleware\nasync def error_catch_middleware(\n        request: Request,\n        call_next: CallNext,\n        response: Response,\n) -&gt; StreamResponse | ServerResponse:\n    try:\n        return await call_next(request)\n\n    except HTTPValidationFailure as validation_failure_error:\n        validation_errors = validation_failure_error.validation_errors\n        logger.debug('Validation error while processing: `%s request: %s', str(request.rel_url), validation_errors)\n        response.set_status(validation_failure_error.status)\n        return ServerResponse(message='Validation error', errors=validation_errors)\n\n    except HTTPClientError as client_error:  # all other `4xx' errors\n        logger.info('Client error while processing: %s request: %s', str(request.rel_url), client_error)\n        response.set_status(client_error.status)\n        return ServerResponse(message=client_error.reason)\n\n    except HTTPInternalServerError as server_error:\n        logger.info('Internal error - server raise HTTPInternalServerError: %s', server_error)\n        response.set_status(server_error.status)\n        return ServerResponse(message=server_error.reason)\n\n    except HTTPException as unhandled_http_error:  # all other unhandled http-errors\n        raise unhandled_http_error\n\n    except Exception as unhandled_error:\n        logger.exception('Internal error while processing `%s` error: %s', str(request.rel_url), unhandled_error)\n        response.set_status(HTTPStatus.INTERNAL_SERVER_ERROR)\n        return ServerResponse(message='Internal server error')\n\n@get('/')\nasync def handler() -&gt; ServerResponse:\n    return ServerResponse(result={'hello': 'rapidy'})\n\napp = Rapidy(middlewares=[error_catch_middleware], http_route_handlers=[handler])\n\nif __name__ == '__main__':\n    run_app(app)\n</code></pre>"},{"location":"ru/docs/server/middlewares/#_1","title":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435","text":"<p><code>Middleware</code> \u2014 \u044d\u0442\u043e \u043f\u0440\u043e\u043c\u0435\u0436\u0443\u0442\u043e\u0447\u043d\u043e\u0435 \u041f\u041e, \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u044e\u0449\u0435\u0435 \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0442\u044c \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0451\u043d\u043d\u044b\u0435 \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f \u0434\u043e \u0438 \u043f\u043e\u0441\u043b\u0435 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u0437\u0430\u043f\u0440\u043e\u0441\u0430 \u043c\u0430\u0440\u0448\u0440\u0443\u0442\u043e\u043c.</p> <pre><code>from rapidy import Rapidy\nfrom rapidy.http import middleware, get, Request, StreamResponse\nfrom rapidy.typedefs import CallNext\n\n@middleware\nasync def hello_rapidy_middleware(request: Request, call_next: CallNext) -&gt; StreamResponse:\n    print('before')\n    handler_response = await call_next(request)\n    print('after')\n    return handler_response\n\n@get('/')\nasync def handler() -&gt; dict[str, str]:\n    return {'hello': 'rapidy'}\n\nrapidy = Rapidy(\n    http_route_handlers=[handler],\n    middlewares=[hello_rapidy_middleware],\n)\n</code></pre> <p>\u041f\u043e\u0440\u044f\u0434\u043e\u043a \u0430\u0442\u0440\u0438\u0431\u0443\u0442\u043e\u0432</p> <p>\u0412 \u0432\u0435\u0431-\u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u0435 \u043f\u0435\u0440\u0432\u044b\u043c \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u043e\u043c \u0432\u0441\u0435\u0433\u0434\u0430 \u043f\u0435\u0440\u0435\u0434\u0430\u0451\u0442\u0441\u044f <code>Request</code>, \u0430 \u0432\u0442\u043e\u0440\u044b\u043c \u2014 <code>CallNext</code> (\u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a \u0437\u0430\u043f\u0440\u043e\u0441\u0430 \u0438\u043b\u0438 <code>middleware</code> \u0432 \u0446\u0435\u043f\u043e\u0447\u043a\u0435). (\u041e\u043d\u0438 \u0438\u043c\u0435\u044e\u0442 \u043e\u0434\u0438\u043d\u0430\u043a\u043e\u0432\u0443\u044e \u0441\u0438\u0433\u043d\u0430\u0442\u0443\u0440\u0443 \u2014 <code>rapidy.typedefs.CallNext</code>.)</p> <p>\u0422\u0438\u043f \u043e\u0442\u0432\u0435\u0442\u0430 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u0430</p> <p>\u041e\u0442\u0432\u0435\u0442 \u0432\u0435\u0431-\u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u0430 \u0438\u043b\u0438 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0435\u0433\u043e <code>middleware</code> \u0432 \u0446\u0435\u043f\u043e\u0447\u043a\u0435 \u0432\u0441\u0435\u0433\u0434\u0430 \u0431\u0443\u0434\u0435\u0442 <code>StreamResponse</code>. \u0423\u0447\u0438\u0442\u044b\u0432\u0430\u0439\u0442\u0435 \u044d\u0442\u043e \u043f\u0440\u0438 \u043f\u0440\u043e\u0435\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0438 \u0432\u0430\u0448\u0438\u0445 <code>middleware</code>.</p>"},{"location":"ru/docs/server/middlewares/#_2","title":"\u0421\u043f\u043e\u0441\u043e\u0431\u044b \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f","text":"<p>\u0421\u043e\u0437\u0434\u0430\u0432\u0430\u0442\u044c <code>middleware</code> \u043c\u043e\u0436\u043d\u043e \u0434\u0432\u0443\u043c\u044f \u0441\u043f\u043e\u0441\u043e\u0431\u0430\u043c\u0438.</p>"},{"location":"ru/docs/server/middlewares/#_3","title":"\u0411\u0435\u0437 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u0432","text":"<p>\u042d\u0442\u043e\u0442 \u0432\u0430\u0440\u0438\u0430\u043d\u0442 \u043f\u043e\u0434\u0445\u043e\u0434\u0438\u0442, \u0435\u0441\u043b\u0438 \u0432\u0430\u043c \u043d\u0435 \u043d\u0443\u0436\u043d\u043e \u0443\u043f\u0440\u0430\u0432\u043b\u044f\u0442\u044c \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u043c \u0432\u043d\u0443\u0442\u0440\u0438 <code>middleware</code>.</p> <pre><code>@middleware\nasync def hello_middleware(request: Request, call_next: CallNext) -&gt; StreamResponse:\n</code></pre>"},{"location":"ru/docs/server/middlewares/#_4","title":"\u0421 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0430\u043c\u0438","text":"<p>\u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435 \u044d\u0442\u043e\u0442 \u0441\u043f\u043e\u0441\u043e\u0431, \u0435\u0441\u043b\u0438 \u0445\u043e\u0442\u0438\u0442\u0435 \u0431\u043e\u043b\u0435\u0435 \u0433\u0438\u0431\u043a\u043e \u0443\u043f\u0440\u0430\u0432\u043b\u044f\u0442\u044c \u043e\u0442\u0432\u0435\u0442\u043e\u043c \u043d\u0430 \u0437\u0430\u043f\u0440\u043e\u0441.</p> <pre><code>@middleware(\n    response_validate=...,\n    response_type = ...,\n    response_content_type = ...,\n    response_charset = ...,\n    response_zlib_executor = ...,\n    response_zlib_executor_size = ...,\n    response_include_fields = ...,\n    response_exclude_fields = ...,\n    response_by_alias = ...,\n    response_exclude_unset = ...,\n    response_exclude_defaults = ...,\n    response_exclude_none = ...,\n    response_custom_encoder = ...,\n    response_json_encoder = ...,\n)\nasync def hello_middleware(request: Request, call_next: CallNext) -&gt; StreamResponse:\n</code></pre>"},{"location":"ru/docs/server/middlewares/#_5","title":"\u0410\u0442\u0440\u0438\u0431\u0443\u0442\u044b","text":"<p><code>Rapidy-middleware</code> \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u044e\u0442 \u0432\u0441\u0435 \u043c\u0435\u0445\u0430\u043d\u0438\u0437\u043c\u044b \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u0438 \u0434\u0430\u043d\u043d\u044b\u0445, \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u044b\u0435 \u0432 \u0432\u0435\u0431-\u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u0430\u0445, \u0430 \u0442\u0430\u043a\u0436\u0435 \u0440\u0430\u0431\u043e\u0442\u0443 \u0441 \u043e\u0442\u0432\u0435\u0442\u0430\u043c\u0438.</p>"},{"location":"ru/docs/server/middlewares/#_6","title":"\u0412\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u044f","text":"<p>\u041a\u0430\u043a \u0438 \u0432\u0435\u0431-\u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u0438, <code>middleware</code> \u043c\u043e\u0433\u0443\u0442 \u043f\u043e\u043b\u0443\u0447\u0430\u0442\u044c \u0434\u043e\u0441\u0442\u0443\u043f \u043a \u043e\u0431\u044a\u0435\u043a\u0442\u0430\u043c \u0437\u0430\u043f\u0440\u043e\u0441\u0430 \u0447\u0435\u0440\u0435\u0437 \u0430\u0442\u0440\u0438\u0431\u0443\u0442\u044b.</p> <p>\u041f\u0435\u0440\u0435\u0434 \u0442\u0435\u043c \u043a\u0430\u043a \u043f\u0440\u043e\u0434\u043e\u043b\u0436\u0438\u0442\u044c, \u0440\u0435\u043a\u043e\u043c\u0435\u043d\u0434\u0443\u0435\u043c \u043e\u0437\u043d\u0430\u043a\u043e\u043c\u0438\u0442\u044c\u0441\u044f \u0441 \u0440\u0430\u0437\u0434\u0435\u043b\u043e\u043c Request \u2014 \u0423\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 HTTP-\u0437\u0430\u043f\u0440\u043e\u0441\u043e\u043c, \u043f\u043e\u0441\u043a\u043e\u043b\u044c\u043a\u0443 <code>middleware</code> \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044e\u0442 \u0442\u0430\u043a\u0443\u044e \u0436\u0435 \u043b\u043e\u0433\u0438\u043a\u0443 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u0432 \u0437\u0430\u043f\u0440\u043e\u0441\u0430.</p> <p>\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 <code>Bearer</code>-\u0442\u043e\u043a\u0435\u043d\u0430.</p> <pre><code>from rapidy.http import middleware, StreamResponse, Header, Request\nfrom rapidy.typedefs import CallNext\n\nTOKEN_REGEXP = '^[Bb]earer (?P&lt;token&gt;[A-Za-z0-9-_=.]*)'\n\n@middleware\nasync def get_bearer_middleware(\n    request: Request,\n    call_next: CallNext,\n    bearer_token: str = Header(alias='Authorization', pattern=TOKEN_REGEXP),\n) -&gt; StreamResponse:\n    # process token here ...\n    return await call_next(request)\n</code></pre> <p>\u0415\u0441\u043b\u0438 \u0432\u044b \u0438\u0437\u0432\u043b\u0435\u043a\u0430\u0435\u0442\u0435 <code>body</code> \u043a\u0430\u043a \u0432 <code>middleware</code>, \u0442\u0430\u043a \u0438 \u0432 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u0435, \u043e\u0448\u0438\u0431\u043a\u0438 \u043e \u043f\u043e\u0432\u0442\u043e\u0440\u043d\u043e\u043c \u0447\u0442\u0435\u043d\u0438\u0438 \u0434\u0430\u043d\u043d\u044b\u0445 \u043d\u0435 \u0432\u043e\u0437\u043d\u0438\u043a\u043d\u0435\u0442.</p> <p>\u0414\u0430\u043d\u043d\u044b\u0435 \u043a\u0435\u0448\u0438\u0440\u0443\u044e\u0442\u0441\u044f \u0432 \u043f\u0430\u043c\u044f\u0442\u0438 \u0438 \u043f\u043e\u0432\u0442\u043e\u0440\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044e\u0442\u0441\u044f \u043f\u0440\u0438 \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u0438.</p>"},{"location":"ru/docs/server/middlewares/#_7","title":"\u0423\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u043e\u0442\u0432\u0435\u0442\u043e\u043c","text":"<p>\u041a\u0430\u043a \u0438 \u0432\u0435\u0431-\u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u0438, <code>middleware</code> \u043c\u043e\u0433\u0443\u0442 \u0443\u043f\u0440\u0430\u0432\u043b\u044f\u0442\u044c \u043e\u0442\u0432\u0435\u0442\u0430\u043c\u0438 \u0447\u0435\u0440\u0435\u0437 \u0441\u043e\u0431\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u0435 \u0430\u0442\u0440\u0438\u0431\u0443\u0442\u044b.</p> <p>\u041f\u0435\u0440\u0435\u0434 \u0442\u0435\u043c \u043a\u0430\u043a \u043f\u0440\u043e\u0434\u043e\u043b\u0436\u0438\u0442\u044c, \u0440\u0435\u043a\u043e\u043c\u0435\u043d\u0434\u0443\u0435\u043c \u043e\u0437\u043d\u0430\u043a\u043e\u043c\u0438\u0442\u044c\u0441\u044f \u0441 \u0440\u0430\u0437\u0434\u0435\u043b\u043e\u043c Response \u2014 \u0423\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 HTTP-\u043e\u0442\u0432\u0435\u0442\u043e\u043c, \u043f\u043e\u0441\u043a\u043e\u043b\u044c\u043a\u0443 <code>middleware</code> \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044e\u0442 \u0442\u0443 \u0436\u0435 \u043b\u043e\u0433\u0438\u043a\u0443 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u043e\u0442\u0432\u0435\u0442\u043e\u0432.</p> <p>\u0423\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u043e\u0442\u0432\u0435\u0442\u043e\u043c \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e \u0442\u043e\u043b\u044c\u043a\u043e \u0432 \u0441\u043b\u0443\u0447\u0430\u0435, \u0435\u0441\u043b\u0438 <code>middleware</code> \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u043d\u0435\u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0430\u043d\u043d\u044b\u0439 \u0442\u0438\u043f \u0434\u0430\u043d\u043d\u044b\u0445 (\u043b\u044e\u0431\u043e\u0439, \u043a\u0440\u043e\u043c\u0435 <code>Response</code> \u0438\u043b\u0438 <code>StreamResponse</code>).</p> <code>Middleware</code> \u0443\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 \u043e\u0442\u0432\u0435\u0442\u043e\u043c \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u0430\u0442\u0440\u0438\u0431\u0443\u0442\u043e\u0432. <pre><code>from rapidy import Rapidy\nfrom rapidy.http import middleware, StreamResponse, get, Request\nfrom rapidy.enums import ContentType\nfrom rapidy.typedefs import CallNext\n\n@middleware(response_content_type=ContentType.text_html)\nasync def hello_rapidy_middleware(request: Request, call_next: CallNext) -&gt; StreamResponse | str:\n    try:\n        return await call_next(request)\n    except Exception:\n        return 'server error'  # Content-Type='text/html'\n\n@get('/')\nasync def handler() -&gt; dict[str, str]:\n    raise Exception\n\nrapidy = Rapidy(middlewares=[hello_rapidy_middleware], http_route_handlers=[handler])\n</code></pre> <code>Middleware</code> \u043d\u0435 \u043c\u043e\u0436\u0435\u0442 \u0443\u043f\u0440\u0430\u0432\u043b\u044f\u0442\u044c \u043e\u0442\u0432\u0435\u0442\u043e\u043c \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u0430\u0442\u0440\u0438\u0431\u0443\u0442\u043e\u0432. <pre><code>from rapidy import Rapidy\nfrom rapidy.http import middleware, StreamResponse, get, Request, Response\nfrom rapidy.enums import ContentType\nfrom rapidy.typedefs import CallNext\n\n@middleware(response_content_type=ContentType.text_html)\nasync def hello_rapidy_middleware(request: Request, call_next: CallNext) -&gt; StreamResponse:\n    try:\n        return await call_next(request)\n    except Exception:\n        return Response(status=500)  # Content-Type='application/octet-stream'\n\n@get('/')\nasync def handler() -&gt; dict[str, str]:\n    raise Exception\n\nrapidy = Rapidy(middlewares=[hello_rapidy_middleware], http_route_handlers=[handler])\n</code></pre> <p>\u0414\u043e\u0441\u0442\u0443\u043f \u043a <code>Response</code>.</p> <pre><code>@middleware\nasync def hello_rapidy_middleware(\n    request: Request,\n    call_next: CallNext,\n    response: Response,\n) -&gt; StreamResponse:\n</code></pre> <p><code>Response</code> \u0441\u043e\u0437\u0434\u0430\u0451\u0442\u0441\u044f \u0442\u043e\u043b\u044c\u043a\u043e \u0434\u043b\u044f \u0442\u0435\u043a\u0443\u0449\u0435\u0433\u043e <code>middleware</code>.</p>"},{"location":"ru/docs/server/middlewares/#middleware","title":"<code>Middleware</code> \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0434\u0440\u0443\u0433\u043e\u0439 \u0442\u0438\u043f \u0434\u0430\u043d\u043d\u044b\u0445","text":"<p>\u0415\u0441\u043b\u0438 <code>middleware</code> \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u043b\u044e\u0431\u043e\u0439 \u0442\u0438\u043f \u0434\u0430\u043d\u043d\u044b\u0445, \u043a\u0440\u043e\u043c\u0435 <code>StreamResponse</code>, \u0443\u043a\u0430\u0436\u0438\u0442\u0435 \u0435\u0433\u043e \u0432 <code>Union</code>, \u0447\u0442\u043e\u0431\u044b <code>Rapidy</code> \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043b\u0430 \u044d\u0442\u043e\u0442 \u0442\u0438\u043f \u043f\u0440\u0438 \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0435 \u043e\u0442\u0432\u0435\u0442\u043e\u0432.</p> <pre><code>@middleware\nasync def my_middleware(\n    request: Request,\n    call_next: CallNext,\n) -&gt; int | str | StreamResponse:  # or Union[int, str, StreamResponse]\n    if ...:\n        return 1\n    elif ...:\n        return 'string'\n    return await call_next(request)\n</code></pre>"},{"location":"ru/docs/server/request/","title":"HTTP-\u0437\u0430\u043f\u0440\u043e\u0441","text":"<p>\u0420\u0430\u0437\u0434\u0435\u043b \u043e\u043f\u0438\u0441\u044b\u0432\u0430\u0435\u0442 \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0443 HTTP-\u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432 \u0438 \u0441\u043f\u043e\u0441\u043e\u0431\u044b \u0438\u0445 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u0432 <code>Rapidy</code>.</p>"},{"location":"ru/docs/server/request/#_1","title":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435","text":"<p>\u0412\u0435\u0431-\u0437\u0430\u043f\u0440\u043e\u0441 \u2014 \u044d\u0442\u043e \u0437\u0430\u043f\u0440\u043e\u0441, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043a\u043b\u0438\u0435\u043d\u0442, \u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u0432\u0435\u0431-\u0431\u0440\u0430\u0443\u0437\u0435\u0440, \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 \u0441\u0435\u0440\u0432\u0435\u0440\u0443 \u0434\u043b\u044f \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u044f \u0432\u0435\u0431-\u0441\u0442\u0440\u0430\u043d\u0438\u0446\u044b \u0438\u043b\u0438 \u0434\u0440\u0443\u0433\u043e\u0433\u043e \u0440\u0435\u0441\u0443\u0440\u0441\u0430.</p>"},{"location":"ru/docs/server/request/#http-_1","title":"\u0421\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0430 HTTP-\u0437\u0430\u043f\u0440\u043e\u0441\u0430","text":"<p>HTTP-\u0437\u0430\u043f\u0440\u043e\u0441 \u0441\u043e\u0441\u0442\u043e\u0438\u0442 \u0438\u0437 \u0441\u0442\u0430\u0440\u0442\u043e\u0432\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0438, \u0437\u0430\u0433\u043e\u043b\u043e\u0432\u043a\u043e\u0432 \u0438 \u0442\u0435\u043b\u0430.</p>"},{"location":"ru/docs/server/request/#_2","title":"\u0421\u0442\u0430\u0440\u0442\u043e\u0432\u0430\u044f \u0441\u0442\u0440\u043e\u043a\u0430","text":"<p>\u041f\u0440\u0438\u043c\u0435\u0440: <code>GET /index.html HTTP/1.1</code></p> <p>\u0421\u0442\u0430\u0440\u0442\u043e\u0432\u0430\u044f \u0441\u0442\u0440\u043e\u043a\u0430 HTTP-\u0437\u0430\u043f\u0440\u043e\u0441\u0430 \u0432\u043a\u043b\u044e\u0447\u0430\u0435\u0442:</p> <ul> <li>\u041c\u0435\u0442\u043e\u0434 HTTP-\u0437\u0430\u043f\u0440\u043e\u0441\u0430 (method, \u0440\u0435\u0436\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u0442\u0435\u0440\u043c\u0438\u043d verb) \u2014 \u043a\u043e\u0440\u043e\u0442\u043a\u043e\u0435 \u0441\u043b\u043e\u0432\u043e, \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u044e\u0449\u0435\u0435, \u043a\u0430\u043a\u043e\u0435 \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0435 \u043d\u0443\u0436\u043d\u043e \u0432\u044b\u043f\u043e\u043b\u043d\u0438\u0442\u044c \u0441 \u0437\u0430\u043f\u0440\u0430\u0448\u0438\u0432\u0430\u0435\u043c\u044b\u043c \u0440\u0435\u0441\u0443\u0440\u0441\u043e\u043c.</li> <li>\u0426\u0435\u043b\u044c \u0437\u0430\u043f\u0440\u043e\u0441\u0430 \u2014 URL-\u0430\u0434\u0440\u0435\u0441 \u0440\u0435\u0441\u0443\u0440\u0441\u0430, \u0441\u043e\u0441\u0442\u043e\u044f\u0449\u0438\u0439 \u0438\u0437 \u043f\u0440\u043e\u0442\u043e\u043a\u043e\u043b\u0430, \u0434\u043e\u043c\u0435\u043d\u043d\u043e\u0433\u043e \u0438\u043c\u0435\u043d\u0438 (\u0438\u043b\u0438 IP-\u0430\u0434\u0440\u0435\u0441\u0430), \u043f\u0443\u0442\u0438 \u043a \u0440\u0435\u0441\u0443\u0440\u0441\u0443 \u043d\u0430 \u0441\u0435\u0440\u0432\u0435\u0440\u0435, \u0430 \u0442\u0430\u043a\u0436\u0435, \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e, \u043f\u043e\u0440\u0442\u0430, \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u0432 HTTP-\u0437\u0430\u043f\u0440\u043e\u0441\u0430 \u0438 \u0434\u0440\u0443\u0433\u0438\u0445 \u043e\u043f\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u044b\u0445 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432.</li> <li>\u0412\u0435\u0440\u0441\u0438\u044e \u043f\u0440\u043e\u0442\u043e\u043a\u043e\u043b\u0430 (HTTP-\u043f\u0440\u043e\u0442\u043e\u043a\u043e\u043b) \u2014 HTTP/1.1.</li> </ul> \u041c\u0435\u0442\u043e\u0434\u044b HTTP-\u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432 \u041c\u0435\u0442\u043e\u0434 \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 GET \u0417\u0430\u043f\u0440\u043e\u0441 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438. HEAD \u0417\u0430\u043f\u0440\u043e\u0441 \u0442\u043e\u043b\u044c\u043a\u043e \u0437\u0430\u0433\u043e\u043b\u043e\u0432\u043a\u043e\u0432. POST \u041e\u0442\u043f\u0440\u0430\u0432\u043a\u0430 \u0434\u0430\u043d\u043d\u044b\u0445 (\u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u0444\u043e\u0440\u043c\u044b \u0432\u0445\u043e\u0434\u0430, \u0442\u0435\u043a\u0441\u0442\u0430, PDF-\u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u043e\u0432, \u0434\u0432\u043e\u0438\u0447\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445). PUT \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043d\u043e\u0432\u043e\u0433\u043e \u0440\u0435\u0441\u0443\u0440\u0441\u0430. PATCH \u0427\u0430\u0441\u0442\u0438\u0447\u043d\u043e\u0435 \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u0435 \u0440\u0435\u0441\u0443\u0440\u0441\u0430. DELETE \u0423\u0434\u0430\u043b\u0435\u043d\u0438\u0435 \u0440\u0435\u0441\u0443\u0440\u0441\u0430. OPTIONS \u0417\u0430\u043f\u0440\u043e\u0441 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438 \u043e \u0441\u0435\u0440\u0432\u0435\u0440\u0435 (\u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u0435\u043c\u044b\u0445 HTTP-\u043c\u0435\u0442\u043e\u0434\u0430\u0445 \u0434\u043b\u044f \u0440\u0435\u0441\u0443\u0440\u0441\u0430). \u0412\u0435\u0440\u0441\u0438\u0438 HTTP-\u043f\u0440\u043e\u0442\u043e\u043a\u043e\u043b\u0430 <p>\u0421\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u044b HTTP \u0440\u0430\u0437\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u044e\u0442\u0441\u044f Internet Engineering Task Force (IETF) \u0438 World Wide Web Consortium (W3C), \u0447\u0442\u043e \u043f\u0440\u0438\u0432\u043e\u0434\u0438\u0442 \u043a \u043f\u0443\u0431\u043b\u0438\u043a\u0430\u0446\u0438\u0438 \u0441\u0435\u0440\u0438\u0438 Requests for Comments (RFC).</p> \u0412\u0435\u0440\u0441\u0438\u044f \u0422\u0438\u043f \u043f\u0440\u043e\u0442\u043e\u043a\u043e\u043b\u0430 \u0422\u0440\u0430\u043d\u0441\u043f\u043e\u0440\u0442\u043d\u044b\u0439 \u0443\u0440\u043e\u0432\u0435\u043d\u044c \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 HTTP/1.1 \u0422\u0435\u043a\u0441\u0442\u043e\u0432\u044b\u0439 TCP \u0422\u0440\u0435\u0431\u0443\u0435\u0442 \u043e\u0436\u0438\u0434\u0430\u043d\u0438\u044f \u043e\u0442\u0432\u0435\u0442\u0430 \u043f\u0435\u0440\u0435\u0434 \u043e\u0442\u043f\u0440\u0430\u0432\u043a\u043e\u0439 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0435\u0433\u043e \u0437\u0430\u043f\u0440\u043e\u0441\u0430 \u0432 \u043e\u0434\u043d\u043e\u043c \u0441\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u0438. HTTP/2 \u0411\u0438\u043d\u0430\u0440\u043d\u044b\u0439 TCP \u041f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u043c\u043d\u043e\u0433\u043e\u043f\u043e\u0442\u043e\u0447\u043d\u043e\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 \u0441\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u044f \u0431\u0435\u0437 \u043e\u0436\u0438\u0434\u0430\u043d\u0438\u044f \u0437\u0430\u0432\u0435\u0440\u0448\u0435\u043d\u0438\u044f \u043f\u0440\u0435\u0434\u044b\u0434\u0443\u0449\u0435\u0433\u043e \u0437\u0430\u043f\u0440\u043e\u0441\u0430. HTTP/3 \u0411\u0438\u043d\u0430\u0440\u043d\u044b\u0439 UDP (QUIC) \u0420\u0430\u0431\u043e\u0442\u0430\u0435\u0442 \u043f\u043e\u0432\u0435\u0440\u0445 UDP, \u043e\u0431\u0435\u0441\u043f\u0435\u0447\u0438\u0432\u0430\u044f \u0431\u043e\u043b\u0435\u0435 \u0431\u044b\u0441\u0442\u0440\u0443\u044e \u0438 \u043d\u0430\u0434\u0435\u0436\u043d\u0443\u044e \u043f\u0435\u0440\u0435\u0434\u0430\u0447\u0443 \u0434\u0430\u043d\u043d\u044b\u0445."},{"location":"ru/docs/server/request/#_3","title":"\u0417\u0430\u0433\u043e\u043b\u043e\u0432\u043a\u0438 \u0437\u0430\u043f\u0440\u043e\u0441\u0430","text":"<p>HTTP-\u0437\u0430\u0433\u043e\u043b\u043e\u0432\u043e\u043a \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442 \u0441\u043e\u0431\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0443 \u0432\u0438\u0434\u0430 <code>\u0418\u043c\u044f-\u0417\u0430\u0433\u043e\u043b\u043e\u0432\u043a\u0430: \u0417\u043d\u0430\u0447\u0435\u043d\u0438\u0435</code>, \u0433\u0434\u0435 \u0434\u0432\u043e\u0435\u0442\u043e\u0447\u0438\u0435 (<code>:</code>) \u0441\u043b\u0443\u0436\u0438\u0442 \u0440\u0430\u0437\u0434\u0435\u043b\u0438\u0442\u0435\u043b\u0435\u043c. \u041d\u0430\u0437\u0432\u0430\u043d\u0438\u044f \u0437\u0430\u0433\u043e\u043b\u043e\u0432\u043a\u043e\u0432 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u043e\u043d\u0435\u0437\u0430\u0432\u0438\u0441\u0438\u043c\u044b: <code>Host</code> \u0438 <code>host</code> \u0432\u043e\u0441\u043f\u0440\u0438\u043d\u0438\u043c\u0430\u044e\u0442\u0441\u044f \u043e\u0434\u0438\u043d\u0430\u043a\u043e\u0432\u043e. \u041f\u0440\u0438\u043d\u044f\u0442\u043e \u043d\u0430\u0447\u0438\u043d\u0430\u0442\u044c \u043a\u0430\u0436\u0434\u043e\u0435 \u0441\u043b\u043e\u0432\u043e \u0437\u0430\u0433\u043e\u043b\u043e\u0432\u043a\u0430 \u0441 \u0437\u0430\u0433\u043b\u0430\u0432\u043d\u043e\u0439 \u0431\u0443\u043a\u0432\u044b.</p> \u041f\u0440\u0438\u043c\u0435\u0440\u044b \u0437\u0430\u0433\u043e\u043b\u043e\u0432\u043a\u043e\u0432 \u041a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u044f \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 Host \u0423\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442 \u0445\u043e\u0441\u0442, \u0441 \u043a\u043e\u0442\u043e\u0440\u043e\u0433\u043e \u0437\u0430\u043f\u0440\u0430\u0448\u0438\u0432\u0430\u0435\u0442\u0441\u044f \u0440\u0435\u0441\u0443\u0440\u0441 (\u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u0434\u043e\u043c\u0435\u043d\u043d\u043e\u0435 \u0438\u043c\u044f \u0438\u043b\u0438 IP-\u0430\u0434\u0440\u0435\u0441). User-Agent \u0421\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u043a\u043b\u0438\u0435\u043d\u0442\u0435 (\u0431\u0440\u0430\u0443\u0437\u0435\u0440, \u0435\u0433\u043e \u0432\u0435\u0440\u0441\u0438\u044f, \u041e\u0421 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f). Referer \u041f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442, \u043e\u0442\u043a\u0443\u0434\u0430 \u0431\u044b\u043b \u0441\u0434\u0435\u043b\u0430\u043d \u0442\u0435\u043a\u0443\u0449\u0438\u0439 \u0437\u0430\u043f\u0440\u043e\u0441. Cookie \u041f\u0435\u0440\u0435\u0434\u0430\u0435\u0442 \u043a\u0443\u043a\u0438 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f. Content-Type \u041e\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u0435\u0442 \u0442\u0438\u043f \u0434\u0430\u043d\u043d\u044b\u0445, \u043f\u0435\u0440\u0435\u0434\u0430\u0432\u0430\u0435\u043c\u044b\u0445 \u0432 \u0442\u0435\u043b\u0435 \u0437\u0430\u043f\u0440\u043e\u0441\u0430. Authorization \u041f\u0435\u0440\u0435\u0434\u0430\u0435\u0442 \u0443\u0447\u0435\u0442\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 \u0434\u043b\u044f \u0430\u0443\u0442\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u0438 \u043a\u043b\u0438\u0435\u043d\u0442\u0430 \u043d\u0430 \u0441\u0435\u0440\u0432\u0435\u0440\u0435."},{"location":"ru/docs/server/request/#_4","title":"\u0422\u0435\u043b\u043e \u0437\u0430\u043f\u0440\u043e\u0441\u0430","text":"<p>\u0422\u0435\u043b\u043e \u0437\u0430\u043f\u0440\u043e\u0441\u0430 \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u043e\u043f\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u044b\u043c \u0438 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u0434\u0430\u043d\u043d\u044b\u0435, \u0441\u0432\u044f\u0437\u0430\u043d\u043d\u044b\u0435 \u0441 \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u043c. \u0422\u0438\u043f \u043f\u0435\u0440\u0435\u0434\u0430\u0432\u0430\u0435\u043c\u043e\u0439 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438 \u0443\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442\u0441\u044f \u0432 \u0437\u0430\u0433\u043e\u043b\u043e\u0432\u043a\u0435 <code>Content-Type</code>. \u0422\u0435\u043b\u043e \u0437\u0430\u043f\u0440\u043e\u0441\u0430 \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c JSON-\u043e\u0431\u044a\u0435\u043a\u0442\u043e\u043c, \u043c\u0435\u0434\u0438\u0430\u0444\u0430\u0439\u043b\u043e\u043c, \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u043e\u043c, \u0442\u0435\u043a\u0441\u0442\u043e\u043c, \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c\u044e \u0431\u0430\u0439\u0442\u043e\u0432 \u0438 \u0442. \u0434.</p>"},{"location":"ru/docs/server/request/#http-_2","title":"\u0423\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 HTTP-\u0437\u0430\u043f\u0440\u043e\u0441\u043e\u043c","text":"<p>\u0414\u043b\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 HTTP-\u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432 <code>Rapidy</code> \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442 \u0441\u0443\u0449\u043d\u043e\u0441\u0442\u044c <code>Request</code>.</p> \u041f\u043e\u0434\u0440\u043e\u0431\u043d\u0435\u0435 \u043e\u0431 \u043e\u0431\u044a\u0435\u043a\u0442\u0435 <code>Request</code> <p><code>Rapidy</code> \u043e\u0441\u043d\u043e\u0432\u0430\u043d \u043d\u0430 \u043c\u0435\u0445\u0430\u043d\u0438\u0437\u043c\u0430\u0445 <code>aiohttp</code> \u0438 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442 <code>aiohttp.web.Request</code>. \u0424\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u0438 <code>rapidy.http.Request</code> \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u0441\u0441\u044b\u043b\u043a\u043e\u0439 \u043d\u0430 <code>aiohttp.web.Request</code> \u0434\u043b\u044f \u0443\u0434\u043e\u0431\u0441\u0442\u0432\u0430 \u0440\u0430\u0431\u043e\u0442\u044b.</p> <p>\u041f\u043e\u0434\u0440\u043e\u0431\u043d\u0435\u0435 \u043e <code>aiohttp.web.Request</code> \u043c\u043e\u0436\u043d\u043e \u0443\u0437\u043d\u0430\u0442\u044c \u0437\u0434\u0435\u0441\u044c.</p> <p>\u042d\u0442\u043e\u0442 \u0440\u0430\u0437\u0434\u0435\u043b \u043e\u043f\u0438\u0441\u044b\u0432\u0430\u0435\u0442, \u043a\u0430\u043a \u043f\u043e\u043b\u0443\u0447\u0430\u0442\u044c \u0438 \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0442\u044c \u0434\u0430\u043d\u043d\u044b\u0435 \u0438\u0437 \u0432\u0445\u043e\u0434\u044f\u0449\u0435\u0433\u043e HTTP-\u0437\u0430\u043f\u0440\u043e\u0441\u0430 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e <code>Rapidy</code>.</p>"},{"location":"ru/docs/server/request/#_5","title":"\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0434\u0430\u043d\u043d\u044b\u0445 \u0447\u0435\u0440\u0435\u0437 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u0437\u0430\u043f\u0440\u043e\u0441\u0430","text":"<p>\u0412\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u0438\u0437\u0432\u043b\u0435\u0447\u044c \u0438 \u0432\u0430\u043b\u0438\u0434\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u043b\u044e\u0431\u043e\u0439 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440 HTTP-\u0437\u0430\u043f\u0440\u043e\u0441\u0430, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044f <code>pydantic</code> \u0438 \u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b <code>Rapidy</code>.</p> <p>\u0418\u0437\u0432\u043b\u0435\u0447\u0435\u043d\u0438\u0435 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0430 \u0438\u0437 <code>rapidy.http</code>, <code>rapidy.parameters.http</code> \u0438\u043b\u0438 <code>rapidy.web</code> (\u0441\u0442\u0438\u043b\u044c <code>aiohttp</code>).</p> <pre><code>from rapidy.http import PathParam, Header, Cookie, QueryParam, Body, get\n\n@get('/{user_id}')\nasync def handler(\n        user_id: int = PathParam(),\n        host: str = Header(alias='Host'),\n        session: str = Cookie(alias='UserSession'),\n        age_filter: str = QueryParam(alias='AgeFilter'),\n        data: str = Body(),\n) -&gt; ...:\n</code></pre> \u0418\u043c\u043f\u043e\u0440\u0442 \u0438\u0437 <code>rapidy.parameters.http</code>. <pre><code>from rapidy.http import get\nfrom rapidy.parameters.http import PathParam, Header, Cookie, QueryParam, Body\n\n@get('/{user_id}')\nasync def handler(\n        user_id: int = PathParam(),\n        host: str = Header(alias='Host'),\n        session: str = Cookie(alias='UserSession'),\n        age_filter: str = QueryParam(alias='AgeFilter'),\n        data: str = Body(),\n) -&gt; ...:\n</code></pre> \u0418\u043c\u043f\u043e\u0440\u0442 \u0438\u0437 <code>rapidy.web</code> (<code>aiohttp</code> style). <pre><code>from rapidy import web\n\nroutes = web.RouteTableDef()\n\n@routes.get('/{user_id}')\nasync def handler(\n        user_id: int = web.PathParam(),\n        host: str = web.Header(alias='Host'),\n        session: str = web.Cookie(alias='UserSession'),\n        age_filter: str = web.QueryParam(alias='AgeFilter'),\n        data: str = web.Body(),\n) -&gt; ...:\n</code></pre> <p>\u041f\u043e\u0434\u0440\u043e\u0431\u043d\u0435\u0435 \u0441\u043c. \u0440\u0430\u0437\u0434\u0435\u043b Parameters.</p>"},{"location":"ru/docs/server/request/#_6","title":"\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0434\u0430\u043d\u043d\u044b\u0445 \u0447\u0435\u0440\u0435\u0437 \u043e\u0431\u044a\u0435\u043a\u0442 \u0437\u0430\u043f\u0440\u043e\u0441\u0430","text":"<p>\u0412\u044b \u0442\u0430\u043a\u0436\u0435 \u043c\u043e\u0436\u0435\u0442\u0435 \u043f\u043e\u043b\u0443\u0447\u0430\u0442\u044c \u0434\u0430\u043d\u043d\u044b\u0435 \u043d\u0430\u043f\u0440\u044f\u043c\u0443\u044e \u0438\u0437 \u043e\u0431\u044a\u0435\u043a\u0442\u0430 <code>rapidy.http.Request</code>, \u0434\u043e\u0431\u0430\u0432\u0438\u0432 \u0435\u0433\u043e \u043a\u0430\u043a \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442 \u0432 HTTP-\u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a.</p> <pre><code>from rapidy.http import get, Request\n\n@get('/{user_id}')\nasync def handler(\n    request: Request,\n) -&gt; ...:\n    path_params = request.match_info  # dict[str, str]\n    headers = request.headers  # CIMultiDictProxy[str]\n    cookies = request.cookies  # Mapping[str, str]\n    query_params = request.rel_url.query  # MultiDictProxy[str]\n    json_body = await request.json()  # Any\n    text_body = await request.text()  # str\n    bytes_body = await request.read()  # bytes\n    stream_body = request.content  # StreamReader\n</code></pre> <p>\u0415\u0441\u043b\u0438 \u0443 \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u0430 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u0430 \u0443\u043a\u0430\u0437\u0430\u043d \u0442\u0438\u043f <code>Request</code>, \u043f\u043e\u0440\u044f\u0434\u043e\u043a \u0435\u0433\u043e \u0440\u0430\u0441\u043f\u043e\u043b\u043e\u0436\u0435\u043d\u0438\u044f \u043d\u0435 \u0438\u043c\u0435\u0435\u0442 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f.</p> <pre><code>from rapidy.http import get, Header, Request\n\n@get('/')\nasync def handler(\n        host: str = Header(alias='Host'),\n        *,\n        request: Request,\n) -&gt; ...:\n</code></pre> <p>\u0415\u0441\u043b\u0438 \u0443 \u043f\u0435\u0440\u0432\u043e\u0433\u043e \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u0430 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u0430 \u043d\u0435 \u0443\u043a\u0430\u0437\u0430\u043d \u0442\u0438\u043f, <code>Rapidy</code> \u0430\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438 \u043f\u043e\u0434\u0441\u0442\u0430\u0432\u0438\u0442 <code>Request</code>.</p> <pre><code>from rapidy.http import get\n\n@get('/')\nasync def handler(\n        any_attr,\n) -&gt; ...:\n    print(type(any_attr))\n    # web.Request\n</code></pre> <p><code>Rapidy</code> \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442 \u0432\u0441\u0442\u0440\u043e\u0435\u043d\u043d\u044b\u0435 \u043c\u0435\u0445\u0430\u043d\u0438\u0437\u043c\u044b <code>aiohttp</code> \u0434\u043b\u044f \u0438\u0437\u0432\u043b\u0435\u0447\u0435\u043d\u0438\u044f \u0434\u0430\u043d\u043d\u044b\u0445.</p> <p>\u041f\u043e\u0434\u0440\u043e\u0431\u043d\u0435\u0435 \u043e <code>aiohttp.web.Request</code> \u0438 \u043c\u0435\u0442\u043e\u0434\u0430\u0445 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u044f \u0434\u0430\u043d\u043d\u044b\u0445 \u0438\u0437 \u043d\u0435\u0433\u043e \u043c\u043e\u0436\u043d\u043e \u0443\u0437\u043d\u0430\u0442\u044c \u0437\u0434\u0435\u0441\u044c.</p>"},{"location":"ru/docs/server/request/parameters/","title":"HTTP-\u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b","text":"<p>\u0412 \u044d\u0442\u043e\u043c \u0440\u0430\u0437\u0434\u0435\u043b\u0435 \u0440\u0430\u0441\u0441\u043c\u043e\u0442\u0440\u0438\u043c, \u043a\u0430\u043a \u0438\u0437\u0432\u043b\u0435\u043a\u0430\u0442\u044c \u0438 \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0442\u044c http-\u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e <code>Rapidy</code>.</p>"},{"location":"ru/docs/server/request/parameters/#_1","title":"\u041e\u0441\u043d\u043e\u0432\u044b \u0438\u0437\u0432\u043b\u0435\u0447\u0435\u043d\u0438\u044f \u0438 \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u0438 \u0434\u0430\u043d\u043d\u044b\u0445","text":"<p>\u0414\u043b\u044f \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0438 \u0438 \u0438\u0437\u0432\u043b\u0435\u0447\u0435\u043d\u0438\u044f \u0434\u0430\u043d\u043d\u044b\u0445 \u0438\u0437 \u0432\u0445\u043e\u0434\u044f\u0449\u0435\u0433\u043e HTTP-\u0437\u0430\u043f\u0440\u043e\u0441\u0430 Rapidy \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442 \u0441\u0432\u043e\u0438 \u0432\u043d\u0443\u0442\u0440\u0435\u043d\u043d\u0438\u0435 \u0442\u0438\u043f\u044b \u0434\u0430\u043d\u043d\u044b\u0445 \u2014 rapidy-\u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b.</p> <p>\u041f\u0440\u0438\u043c\u0435\u0440 \u043d\u0438\u0436\u0435 \u0438\u0437\u0432\u043b\u0435\u043a\u0430\u0435\u0442 \u0438 \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u0442 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0443\u044e \u0434\u0438\u043d\u0430\u043c\u0438\u0447\u0435\u0441\u043a\u043e\u0433\u043e \u043f\u0443\u0442\u0438 <code>user_id</code> \u0438 \u0437\u0430\u0433\u043e\u043b\u043e\u0432\u043e\u043a <code>Host</code>:</p> <pre><code>from rapidy.http import get, PathParam, Header\n\n@get('/{user_id}')\nasync def handler(\n    user_id: int = PathParam(),\n    host: str = Header(alias='Host'),\n) -&gt; ...:\n</code></pre>"},{"location":"ru/docs/server/request/parameters/#rapidy-","title":"\u0427\u0442\u043e \u0442\u0430\u043a\u043e\u0435 rapidy-\u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440?","text":"<p>Rapidy-\u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440 \u2014 \u044d\u0442\u043e <code>\u043c\u0435\u0442\u0430-\u043e\u0431\u044a\u0435\u043a\u0442</code>, \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0449\u0438\u0439 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u0442\u043e\u043c, \u043a\u0430\u043a \u0438\u043c\u0435\u043d\u043d\u043e \u0431\u0443\u0434\u0443\u0442 \u0438\u0437\u0432\u043b\u0435\u043a\u0430\u0442\u044c\u0441\u044f \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u0438\u0437 \u0432\u0445\u043e\u0434\u044f\u0449\u0435\u0433\u043e HTTP-\u0437\u0430\u043f\u0440\u043e\u0441\u0430.</p> <p>\u0412\u0441\u0435 rapidy-\u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u043d\u0430\u0445\u043e\u0434\u044f\u0442\u0441\u044f \u0432 \u043c\u043e\u0434\u0443\u043b\u0435 <code>rapidy.parameters.http</code>:</p> <pre><code>from rapidy.parameters.http import Header, Cookie, QueryParam, ..., Body\n\nasync def handler(\n    user_id: int = QueryParam(),\n) -&gt; ...:\n    ...\n</code></pre> <p>\u0422\u0430\u043a\u0436\u0435 \u0434\u043e\u0441\u0442\u0443\u043f \u043a \u043d\u0438\u043c \u043c\u043e\u0436\u043d\u043e \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0447\u0435\u0440\u0435\u0437 \u043c\u043e\u0434\u0443\u043b\u044c <code>rapidy.http</code>:</p> <pre><code>from rapidy.http import Header, Cookie, QueryParam, ..., Body\n\nasync def handler(\n    user_id: int = QueryParam(),\n) -&gt; ...:\n    ...\n</code></pre>"},{"location":"ru/docs/server/request/parameters/#http-_1","title":"\u041f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b http-\u0437\u0430\u043f\u0440\u043e\u0441\u0430","text":"<p>\u041f\u043e\u0434\u0440\u043e\u0431\u043d\u0435\u0435 \u043e \u043a\u0430\u0436\u0434\u043e\u043c \u0442\u0438\u043f\u0435 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u0432 \u043c\u043e\u0436\u043d\u043e \u0443\u0437\u043d\u0430\u0442\u044c \u0432 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u0445 \u0440\u0430\u0437\u0434\u0435\u043b\u0430\u0445:</p> <ul> <li>Path \u2014 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u043f\u0443\u0442\u0438 (\u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044e\u0442\u0441\u044f \u0434\u043b\u044f \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u0434\u0438\u043d\u0430\u043c\u0438\u0447\u0435\u0441\u043a\u0438\u0445 API)</li> <li>Headers \u2014 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u0437\u0430\u0433\u043e\u043b\u043e\u0432\u043a\u043e\u0432 \u0437\u0430\u043f\u0440\u043e\u0441\u0430</li> <li>Cookies \u2014 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b cookie (\u0438\u0437\u0432\u043b\u0435\u043a\u0430\u044e\u0442\u0441\u044f \u0438\u0437 \u0437\u0430\u0433\u043e\u043b\u043e\u0432\u043a\u043e\u0432 \u0430\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438)</li> <li>Query Parameters \u2014 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u0437\u0430\u043f\u0440\u043e\u0441\u0430, \u043f\u0435\u0440\u0435\u0434\u0430\u0432\u0430\u0435\u043c\u044b\u0435 \u0432 URL</li> <li>Body \u2014 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u0442\u0435\u043b\u0430 \u0437\u0430\u043f\u0440\u043e\u0441\u0430</li> </ul>"},{"location":"ru/docs/server/request/parameters/#_2","title":"\u0418\u0437\u0432\u043b\u0435\u0447\u0435\u043d\u0438\u0435 \u0434\u0430\u043d\u043d\u044b\u0445","text":"<p>\u0414\u043b\u044f \u0438\u0437\u0432\u043b\u0435\u0447\u0435\u043d\u0438\u044f \u0434\u0430\u043d\u043d\u044b\u0445 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f <code>\u0438\u043c\u044f \u0430\u0442\u0440\u0438\u0431\u0443\u0442\u0430</code> \u0438\u043b\u0438 <code>alias</code> rapidy-\u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0430.</p> <p>\u0418\u0437\u0432\u043b\u0435\u0447\u0435\u043d\u0438\u0435 \u043f\u043e \u0438\u043c\u0435\u043d\u0438 \u0430\u0442\u0440\u0438\u0431\u0443\u0442\u0430</p> <p><pre><code>from rapidy.http import QueryParam\n\nasync def handler(\n    test_query_param_name: int = QueryParam(),\n) -&gt; int:\n    return test_query_param_name\n</code></pre> <pre><code>curl -G -v -d \"test_query_param_name=123456789\" http://127.0.0.1:8080\n# &lt; HTTP/1.1 200 OK ...\n# 123456789\n</code></pre></p> <p>\u0418\u0437\u0432\u043b\u0435\u0447\u0435\u043d\u0438\u0435 \u043f\u043e alias</p> <p><pre><code>from rapidy.http import QueryParam\n\nasync def handler(\n    test_query_param_name: int = QueryParam(alias='TestQueryParamName'),\n) -&gt; int:\n    return test_query_param_name\n</code></pre> <pre><code>curl -G -v -d \"TestQueryParamName=123456789\" http://127.0.0.1:8080\n# &lt; HTTP/1.1 200 OK ...\n# 123456789\n</code></pre></p>"},{"location":"ru/docs/server/request/parameters/#_3","title":"\u0412\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u0438 \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u0438","text":"<p>\u041a\u0430\u0436\u0434\u044b\u0439 rapidy-\u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440 \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u043d\u0430\u0441\u043b\u0435\u0434\u043d\u0438\u043a\u043e\u043c pydantic.Field \u0438 \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u0435\u0442 \u0432\u0441\u0435 \u0435\u0433\u043e \u0444\u0443\u043d\u043a\u0446\u0438\u0438.</p> <pre><code>@get('/')\nasync def handler(\n    positive: int = QueryParam(gt=0),\n    non_negative: int = QueryParam(ge=0),\n    negative: int = QueryParam(lt=0),\n    non_positive: int = QueryParam(le=0),\n    even: int = QueryParam(multiple_of=2),\n    love_for_pydantic: float = QueryParam(allow_inf_nan=True),\n    short: str = QueryParam(min_length=3),\n    long: str = QueryParam(max_length=10),\n    regex: str = QueryParam(pattern=r'^\\d*$'),\n    precise: Decimal = QueryParam(max_digits=5, decimal_places=2),\n) -&gt; ...:\n    ...\n</code></pre>"},{"location":"ru/docs/server/request/parameters/#_4","title":"\u0421\u043f\u043e\u0441\u043e\u0431\u044b \u0430\u043d\u043d\u043e\u0442\u0430\u0446\u0438\u0438 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u0432","text":""},{"location":"ru/docs/server/request/parameters/#_5","title":"\u041f\u0435\u0440\u0435\u0434\u0430\u0447\u0430 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0430 \u043a\u0430\u043a \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e","text":"<p>\u0421\u0430\u043c\u044b\u0439 \u043f\u0440\u043e\u0441\u0442\u043e\u0439 \u0438 \u043f\u043e\u043d\u044f\u0442\u043d\u044b\u0439 \u0441\u043f\u043e\u0441\u043e\u0431 \u0430\u043d\u043d\u043e\u0442\u0430\u0446\u0438\u0438:</p> <pre><code>from rapidy.http import get, PathParam\n\n@get('/{user_id}')\nasync def handler(\n    user_id: int = PathParam(),\n) -&gt; ...:\n    ...\n</code></pre> <p>\u041e\u0434\u043d\u0430\u043a\u043e, \u0435\u0441\u043b\u0438 \u0432\u044b \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0435 \u0441\u0442\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u0430\u043d\u0430\u043b\u0438\u0437\u0430\u0442\u043e\u0440\u044b \u043a\u043e\u0434\u0430, \u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, <code>mypy</code>, \u043c\u043e\u0433\u0443\u0442 \u0432\u043e\u0437\u043d\u0438\u043a\u043d\u0443\u0442\u044c \u043e\u0448\u0438\u0431\u043a\u0438: <pre><code>main.py:4: error: Incompatible default for argument \"user_id\" (default has type \"PathParam\", argument has type\n\"int\")  [assignment]\n</code></pre></p> <p>\u0427\u0442\u043e\u0431\u044b \u044d\u0442\u043e\u0433\u043e \u0438\u0437\u0431\u0435\u0436\u0430\u0442\u044c, \u0432\u043a\u043b\u044e\u0447\u0438\u0442\u0435 mypy-\u043f\u043b\u0430\u0433\u0438\u043d \u0434\u043b\u044f Rapidy: <pre><code># pyproject.toml\n[tool.mypy]\nplugins = [\n    \"pydantic.mypy\",\n    \"rapidy.mypy\"     # &lt;-- \u0432\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435 \u043f\u043b\u0430\u0433\u0438\u043d\u0430 Rapidy\n]\n</code></pre></p>"},{"location":"ru/docs/server/request/parameters/#typingannotated","title":"\u0410\u043d\u043d\u043e\u0442\u0430\u0446\u0438\u044f \u0441 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\u043c <code>typing.Annotated</code>","text":"<p>\u041f\u043e\u0434\u0440\u043e\u0431\u043d\u0435\u0435 \u043e <code>typing.Annotated</code> \u043c\u043e\u0436\u043d\u043e \u043f\u0440\u043e\u0447\u0438\u0442\u0430\u0442\u044c \u0432 \u043e\u0444\u0438\u0446\u0438\u0430\u043b\u044c\u043d\u043e\u0439 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u0438 Python \u0437\u0434\u0435\u0441\u044c.</p> <pre><code>from typing import Annotated\nfrom rapidy.http import get, PathParam\n\n@get('/{user_id}')\nasync def handler(\n    user_id: Annotated[int, PathParam()],\n) -&gt; ...:\n    ...\n</code></pre> <p>\u0412 \u0430\u043d\u043d\u043e\u0442\u0430\u0446\u0438\u0438 <code>Annotated</code> \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044e\u0442\u0441\u044f \u0434\u0432\u0430 \u043a\u043b\u044e\u0447\u0435\u0432\u044b\u0445 \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u0430:</p> <ul> <li>\u041f\u0435\u0440\u0432\u044b\u0439 \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442 Annotated[int, ...] \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u0435\u0442 \u043e\u0436\u0438\u0434\u0430\u0435\u043c\u044b\u0439 \u0442\u0438\u043f \u0434\u0430\u043d\u043d\u044b\u0445 (\u0432 \u0434\u0430\u043d\u043d\u043e\u043c \u0441\u043b\u0443\u0447\u0430\u0435, <code>int</code>).</li> <li>\u041f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u0439 \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442 Annotated[..., PathParam()] \u0434\u043e\u043b\u0436\u0435\u043d \u0431\u044b\u0442\u044c \u043e\u0434\u043d\u0438\u043c \u0438\u0437 HTTP-\u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u0432 Rapidy (<code>Header</code>, <code>Headers</code>, <code>Cookie</code>, ..., <code>Body</code>). \u0412 \u0434\u0430\u043d\u043d\u043e\u043c \u0441\u043b\u0443\u0447\u0430\u0435 \u0441\u0435\u0440\u0432\u0435\u0440 \u043e\u0436\u0438\u0434\u0430\u0435\u0442 \u0437\u0430\u0433\u043e\u043b\u043e\u0432\u043e\u043a <code>Host</code>.</li> </ul> <p>\u0422\u0430\u043a \u043a\u0430\u043a <code>Annotated</code> \u043c\u043e\u0436\u0435\u0442 \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0442\u044c \u043d\u0435\u043e\u0433\u0440\u0430\u043d\u0438\u0447\u0435\u043d\u043d\u043e\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u0432, Rapidy \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442 \u0442\u043e\u043b\u044c\u043a\u043e \u043f\u0435\u0440\u0432\u044b\u0439 \u0438 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u0439 \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442 \u0434\u043b\u044f \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u0438. \u041e\u0441\u0442\u0430\u043b\u044c\u043d\u044b\u0435 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u043c\u043e\u0436\u0435\u0442 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c <code>pydantic</code> \u0432 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u043c\u0435\u0442\u0430-\u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438 \u0434\u043b\u044f \u043c\u043e\u0434\u0435\u043b\u0438, \u0434\u043b\u044f \u0434\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0445 \u043f\u0440\u043e\u0432\u0435\u0440\u043e\u043a, \u0435\u0441\u043b\u0438 \u043e\u043d \u0438\u0445 \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u0435\u0442.</p> <p>\u041e\u0442\u0441\u0443\u0442\u0441\u0442\u0432\u0438\u0435 HTTP-\u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u0432 \u0432 <code>Annotated</code></p> <p>\u0415\u0441\u043b\u0438 <code>Annotated</code> \u043d\u0435 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 HTTP-\u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0430, \u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, <code>Annotated[str, str]</code>, \u0430\u0442\u0440\u0438\u0431\u0443\u0442 \u0431\u0443\u0434\u0435\u0442 \u043f\u0440\u043e\u0438\u0433\u043d\u043e\u0440\u0438\u0440\u043e\u0432\u0430\u043d.</p> <p>\u041f\u043e\u0434\u0434\u0435\u0440\u0436\u043a\u0430 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e</p> <p><code>Header(default=..., default_factory=...)</code></p> <p>\u041f\u043e\u0434\u0440\u043e\u0431\u043d\u0435\u0435 \u043e \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f\u0445 \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e \u043c\u043e\u0436\u043d\u043e \u043f\u0440\u043e\u0447\u0438\u0442\u0430\u0442\u044c \u0432 \u0440\u0430\u0437\u0434\u0435\u043b\u0435 \u043a\u0430\u0436\u0434\u043e\u0433\u043e http-\u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0430.</p>"},{"location":"ru/docs/server/request/parameters/cookies/","title":"\u0424\u0430\u0439\u043b\u044b cookie","text":"<p>\u0412 \u044d\u0442\u043e\u043c \u0440\u0430\u0437\u0434\u0435\u043b\u0435 \u0440\u0430\u0441\u0441\u043c\u0430\u0442\u0440\u0438\u0432\u0430\u0435\u0442\u0441\u044f, \u043a\u0430\u043a \u0438\u0437\u0432\u043b\u0435\u043a\u0430\u0442\u044c \u0438 \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0442\u044c cookie \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e <code>Rapidy</code>.</p> <p>\u0412\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u043f\u0440\u043e\u0432\u0435\u0440\u0438\u0442\u044c \u0434\u0430\u043d\u043d\u044b\u0435, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044f \u043b\u044e\u0431\u043e\u0439 \u0442\u0438\u043f, \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u0435\u043c\u044b\u0439 <code>pydantic</code>.</p>"},{"location":"ru/docs/server/request/parameters/cookies/#_1","title":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435","text":"<p>Cookie \u2014 \u044d\u0442\u043e \u043d\u0435\u0431\u043e\u043b\u044c\u0448\u043e\u0439 \u043d\u0430\u0431\u043e\u0440 \u0434\u0430\u043d\u043d\u044b\u0445 \u043e \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0445\u0440\u0430\u043d\u0438\u0442\u0441\u044f \u043d\u0430 \u0435\u0433\u043e \u0443\u0441\u0442\u0440\u043e\u0439\u0441\u0442\u0432\u0435 \u0431\u0435\u0437 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0439 \u0438 \u043a\u0430\u043a\u043e\u0439-\u043b\u0438\u0431\u043e \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438.</p> <p>\u0412\u0435\u0431-\u043a\u043b\u0438\u0435\u043d\u0442 \u043f\u0440\u0438 \u043a\u0430\u0436\u0434\u043e\u043c \u043e\u0431\u0440\u0430\u0449\u0435\u043d\u0438\u0438 \u043a \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u044e\u0449\u0435\u043c\u0443 \u0441\u0430\u0439\u0442\u0443 \u043f\u0435\u0440\u0435\u0434\u0430\u0451\u0442 \u044d\u0442\u0438 \u0434\u0430\u043d\u043d\u044b\u0435 \u0432\u0435\u0431-\u0441\u0435\u0440\u0432\u0435\u0440\u0443 \u0432 \u0441\u043e\u0441\u0442\u0430\u0432\u0435 HTTP-\u0437\u0430\u043f\u0440\u043e\u0441\u0430.</p>"},{"location":"ru/docs/server/request/parameters/cookies/#cookie_1","title":"\u0418\u0437\u0432\u043b\u0435\u0447\u0435\u043d\u0438\u0435 \u043e\u0434\u0438\u043d\u043e\u0447\u043d\u043e\u0433\u043e cookie","text":"<p><code>Cookie</code> \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u044b\u0439 cookie \u043f\u043e \u0435\u0433\u043e \u0438\u043c\u0435\u043d\u0438.</p> <p><pre><code>from rapidy.http import get, Cookie\n\n@get('/')\nasync def handler(\n    user_id: str = Cookie(alias='UserID'),\n) -&gt; ...:\n</code></pre> <pre><code>from rapidy.http import get, Cookie\n\n@get('/')\nasync def handler(\n    user_id: str = Cookie(alias='UserID'),\n    user_session: str = Cookie(alias='UserSession'),\n) -&gt; ...:\n</code></pre></p>"},{"location":"ru/docs/server/request/parameters/cookies/#cookies","title":"\u0418\u0437\u0432\u043b\u0435\u0447\u0435\u043d\u0438\u0435 \u0432\u0441\u0435\u0445 cookies","text":"<p><code>Cookies</code> \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u0438\u0437\u0432\u043b\u0435\u0447\u044c \u0441\u0440\u0430\u0437\u0443 \u0432\u0441\u0435 cookies.</p>"},{"location":"ru/docs/server/request/parameters/cookies/#_2","title":"\u0418\u0437\u0432\u043b\u0435\u0447\u0435\u043d\u0438\u0435 \u0432 \u0437\u0430\u0440\u0430\u043d\u0435\u0435 \u0437\u0430\u0434\u0430\u043d\u043d\u0443\u044e \u0441\u0445\u0435\u043c\u0443","text":""},{"location":"ru/docs/server/request/parameters/cookies/#dataclassesdataclass","title":"dataclasses.dataclass","text":"<p><code>dataclasses.dataclass</code> \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u044e\u0442\u0441\u044f \u0432 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u043c\u043e\u0434\u0435\u043b\u0438, \u043d\u043e \u0437\u0430\u0434\u0430\u0442\u044c <code>alias</code> \u0441\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u043d\u044b\u043c\u0438 \u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0430\u043c\u0438 <code>dataclasses</code> \u043d\u0435\u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e.</p> <pre><code>from dataclasses import dataclass\nfrom rapidy.http import get, Cookies\n\n@dataclass\nclass CookieData:\n    UserID: str  # camelCase syntax if cookie name is 'UserID'\n    user_session: str  # cannot extract if cookie name is 'User-Session'\n\n@get('/')\nasync def handler(\n    cookie_data: CookieData = Cookies(),\n) -&gt; ...:\n# {\"errors\": [{\"type\": \"missing\", \"loc\": [\"cookie\", \"user_session\"], \"msg\": \"Field required\"}]}\n</code></pre>"},{"location":"ru/docs/server/request/parameters/cookies/#_3","title":"\u0418\u0437\u0432\u043b\u0435\u0447\u0435\u043d\u0438\u0435 \u0432 \u0441\u043b\u043e\u0432\u0430\u0440\u044c","text":"<pre><code>from rapidy.http import get, Cookies\n\n@get('/')\nasync def handler(\n    cookie_data: dict[str, str] = Cookies(),\n) -&gt; ...:\n# {'UserID': ..., 'User-Session': ...}\n</code></pre>"},{"location":"ru/docs/server/request/parameters/cookies/#_4","title":"\u0418\u0437\u0432\u043b\u0435\u0447\u0435\u043d\u0438\u0435 \u0431\u0435\u0437 \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u0438","text":"<p>\u041e\u0442\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435 \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u0438 \u043d\u0435 \u0440\u0435\u043a\u043e\u043c\u0435\u043d\u0434\u0443\u0435\u0442\u0441\u044f.</p> <p>\u0415\u0441\u043b\u0438 \u043e\u0442\u043a\u043b\u044e\u0447\u0438\u0442\u044c \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u044e, \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440 \u0432\u0435\u0440\u043d\u0451\u0442 \u0431\u0430\u0437\u043e\u0432\u0443\u044e \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0443 <code>aiohttp</code>:</p> <ul> <li><code>Cookie</code> \u2192 <code>str</code></li> <li><code>Cookies</code> \u2192 <code>Mapping[str, str]</code></li> </ul>"},{"location":"ru/docs/server/request/parameters/cookies/#_5","title":"\u0421\u043f\u043e\u0441\u043e\u0431\u044b \u043e\u0442\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u0438","text":""},{"location":"ru/docs/server/request/parameters/cookies/#_6","title":"\u042f\u0432\u043d\u043e\u0435 \u043e\u0442\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435","text":"<pre><code>from rapidy.http import get, Cookie, Cookies\n\n@get('/')\nasync def handler_1(\n    user_id: int = Cookie(alias='UserID', validate=False)\n) -&gt; ...:\n    # ...\n\n@get('/')\nasync def handler_2(\n    cookie_data: int = Cookies(validate=False)\n) -&gt; ...:\n    # # {'UserID': ..., 'User-Session': ...}\n</code></pre>"},{"location":"ru/docs/server/request/parameters/cookies/#any","title":"\u0418\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 <code>Any</code>","text":"<pre><code>from typing import Any\n\n@get('/')\nasync def handler_1(\n    user_id: Any = Cookie(alias='UserID', validate=False)\n) -&gt; ...:\n    # ...\n\n@get('/')\nasync def handler_2(\n    cookie_data: Any = Cookies(validate=False)\n) -&gt; ...:\n    # # {'UserID': ..., 'User-Session': ...}\n</code></pre>"},{"location":"ru/docs/server/request/parameters/cookies/#_7","title":"\u041e\u0442\u0441\u0443\u0442\u0441\u0442\u0432\u0438\u0435 \u0430\u043d\u043d\u043e\u0442\u0430\u0446\u0438\u0438 \u0442\u0438\u043f\u0430","text":"<p>\u0415\u0441\u043b\u0438 \u0442\u0438\u043f \u043d\u0435 \u0443\u043a\u0430\u0437\u0430\u043d, \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e \u0431\u0443\u0434\u0435\u0442 \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u043b\u0435\u043d <code>Any</code>. <pre><code>@get('/')\nasync def handler_1(\n    user_id=Cookie(alias='UserID')\n) -&gt; ...:\n    # ...\n\n@get('/')\nasync def handler_2(\n    cookie_data=Cookies()\n) -&gt; ...:\n    # # {'UserID': ..., 'User-Session': ...}\n</code></pre></p>"},{"location":"ru/docs/server/request/parameters/cookies/#_8","title":"\u0417\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e","text":"<p>\u0417\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e \u0434\u043b\u044f <code>Cookie</code> \u0431\u0443\u0434\u0435\u0442 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c\u0441\u044f, \u0435\u0441\u043b\u0438 \u0432 \u043f\u043e\u0441\u0442\u0443\u043f\u0438\u0432\u0448\u0435\u043c \u0437\u0430\u043f\u0440\u043e\u0441\u0435 \u043d\u0435 \u0431\u0443\u0434\u0435\u0442 \u043d\u0430\u0439\u0434\u0435\u043d <code>cookie</code> \u0441 \u0442\u0430\u043a\u0438\u043c \u0438\u043c\u0435\u043d\u0435\u043c.</p> <p>\u0417\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e \u0434\u043b\u044f <code>Cookies</code> \u0431\u0443\u0434\u0435\u0442 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c\u0441\u044f, \u0435\u0441\u043b\u0438 \u0432 \u043f\u043e\u0441\u0442\u0443\u043f\u0438\u0432\u0448\u0435\u043c \u0437\u0430\u043f\u0440\u043e\u0441\u0435 \u043d\u0435 \u0431\u0443\u0434\u0435\u0442 \u043d\u0430\u0439\u0434\u0435\u043d\u043e \u043d\u0438 \u043e\u0434\u043d\u043e\u0433\u043e <code>cookie</code>.</p>"},{"location":"ru/docs/server/request/parameters/cookies/#default","title":"\u0418\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 <code>default</code>","text":"<p><pre><code>@get('/')\nasync def handler(\n    some_cookie: str = Cookie(alias='Some-Cookie', default='SomeValue'),\n) -&gt; ...:\n</code></pre> <pre><code>from typing import Annotated\n\n@get('/')\nasync def handler(\n    some_cookie: Annotated[str, Cookie(alias='Some-Cookie', default='SomeValue')],\n) -&gt; ...:\n</code></pre> <pre><code>from typing import Annotated\n\n@get('/')\nasync def handler(\n    some_cookie: Annotated[str, Cookie(alias='Some-Cookie')] = 'SomeValue',\n) -&gt; ...:\n</code></pre></p>"},{"location":"ru/docs/server/request/parameters/cookies/#default_factory","title":"\u0418\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 <code>default_factory</code>","text":"<p><pre><code>@get('/')\nasync def handler(\n    some_cookie: str = Cookie(alias='Some-Cookie', default_factory=lambda: 'SomeValue'),\n) -&gt; ...:\n</code></pre> <pre><code>from typing import Annotated\n\n@get('/')\nasync def handler(\n    some_cookie: Annotated[str, Cookie(alias='Some-Cookie', default_factory=lambda:'SomeValue')],\n) -&gt; ...:\n</code></pre></p> <p>\u041d\u0435\u043b\u044c\u0437\u044f \u043e\u0434\u043d\u043e\u0432\u0440\u0435\u043c\u0435\u043d\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c <code>default</code> \u0438 <code>default_factory</code>.</p> <p>\u041f\u0440\u0438 \u043f\u043e\u043f\u044b\u0442\u043a\u0435 \u0443\u043a\u0430\u0437\u0430\u0442\u044c \u043e\u0431\u0430 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0430 \u0431\u0443\u0434\u0435\u0442 \u0432\u044b\u0437\u0432\u0430\u043d\u043e \u0438\u0441\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435 <code>pydantic</code>: <pre><code>TypeError('cannot specify both default and default_factory')\n</code></pre></p>"},{"location":"ru/docs/server/request/parameters/cookies/#_9","title":"\u041f\u0440\u0435\u0434\u0443\u043f\u0440\u0435\u0436\u0434\u0435\u043d\u0438\u044f \u0438 \u043e\u0441\u043e\u0431\u0435\u043d\u043d\u043e\u0441\u0442\u0438","text":""},{"location":"ru/docs/server/request/parameters/cookies/#cookie-cookies","title":"\u041e\u0434\u043d\u043e\u0432\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 <code>Cookie</code> \u0438 <code>Cookies</code>","text":"<p>\u041d\u0435\u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c <code>Cookie</code> \u0438 <code>Cookies</code> \u043e\u0434\u043d\u043e\u0432\u0440\u0435\u043c\u0435\u043d\u043d\u043e \u0432 \u043e\u0434\u043d\u043e\u043c \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u0435.</p> <pre><code>@get('/')\nasync def handler(\n    user_id: str = Cookie(alias='UserID'),\n    cookie_data: CookieData = Cookies(),\n) -&gt; ...:\n</code></pre> <p>\u041f\u0440\u0438 \u0437\u0430\u043f\u0443\u0441\u043a\u0435 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f \u0431\u0443\u0434\u0435\u0442 \u0432\u044b\u0437\u0432\u0430\u043d\u043e \u0438\u0441\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435 <code>AnotherDataExtractionTypeAlreadyExistsError</code>.</p> <pre><code>------------------------------\nAttribute with this data extraction type cannot be added to the handler - another data extraction type is already use in handler.\n\nHandler path: `main.py`\nHandler name: `handler`\nAttribute name: `cookie_data`\n------------------------------\n</code></pre>"},{"location":"ru/docs/server/request/parameters/cookies/#alias-cookies","title":"\u0410\u0442\u0440\u0438\u0431\u0443\u0442 <code>alias</code> \u0432 <code>Cookies</code>","text":"<p>\u0410\u0442\u0440\u0438\u0431\u0443\u0442 <code>alias</code> \u043d\u0435 \u0440\u0430\u0431\u043e\u0442\u0430\u0435\u0442 \u0432 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0435 <code>Cookies()</code>.</p> <pre><code>@get('/')\nasync def handler(\n    cookie_data: CookieData = Cookies(alias='SomeName'),  # &lt;-- alias not working\n) -&gt; ...:\n</code></pre>"},{"location":"ru/docs/server/request/parameters/cookies/#_10","title":"\u041a\u0430\u043a \u0438\u0437\u0432\u043b\u0435\u043a\u0430\u044e\u0442\u0441\u044f \u0441\u044b\u0440\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435","text":"<p>\u0412\u043d\u0443\u0442\u0440\u0438 <code>Rapidy</code> \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u043c\u0435\u0442\u043e\u0434 <code>cookies</code> \u043e\u0431\u044a\u0435\u043a\u0442\u0430 <code>Request</code>, \u043f\u043e\u0441\u043b\u0435 \u0447\u0435\u0433\u043e \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 \u043f\u0435\u0440\u0435\u0434\u0430\u044e\u0442\u0441\u044f \u0432 <code>pydantic</code> \u0434\u043b\u044f \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u0438.</p> <p>\u041a\u0430\u043a \u043f\u0440\u043e\u0438\u0441\u0445\u043e\u0434\u0438\u0442 \u0438\u0437\u0432\u043b\u0435\u0447\u0435\u043d\u0438\u0435 \u0432\u043d\u0443\u0442\u0440\u0438 <code>Rapidy</code></p> <pre><code>async def extract_cookies(request: Request) -&gt; Mapping[str, str]:\n    return request.cookies\n</code></pre> <p><code>Rapidy</code> \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442 \u0432\u0441\u0442\u0440\u043e\u0435\u043d\u043d\u044b\u0435 \u043c\u0435\u0445\u0430\u043d\u0438\u0437\u043c\u044b <code>aiohttp</code></p> <p>\u041f\u043e\u0434\u0440\u043e\u0431\u043d\u0435\u0435 \u043e\u0431 \u043e\u0431\u044a\u0435\u043a\u0442\u0435 <code>aiohttp.Request</code> \u0438 \u043c\u0435\u0442\u043e\u0434\u0430\u0445 \u0438\u0437\u0432\u043b\u0435\u0447\u0435\u043d\u0438\u044f \u0434\u0430\u043d\u043d\u044b\u0445 \u043c\u043e\u0436\u043d\u043e \u0443\u0437\u043d\u0430\u0442\u044c \u0437\u0434\u0435\u0441\u044c.</p>"},{"location":"ru/docs/server/request/parameters/headers/","title":"HTTP-\u0437\u0430\u0433\u043e\u043b\u043e\u0432\u043a\u0438","text":"<p>\u0412 \u044d\u0442\u043e\u043c \u0440\u0430\u0437\u0434\u0435\u043b\u0435 \u0440\u0430\u0441\u0441\u043c\u043e\u0442\u0440\u0438\u043c, \u043a\u0430\u043a \u0438\u0437\u0432\u043b\u0435\u043a\u0430\u0442\u044c \u0438 \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0442\u044c \u0437\u0430\u0433\u043e\u043b\u043e\u0432\u043a\u0438 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e <code>Rapidy</code>.</p> <p>\u0412\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u043f\u0440\u043e\u0432\u0435\u0440\u0438\u0442\u044c \u0434\u0430\u043d\u043d\u044b\u0435, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044f \u043b\u044e\u0431\u043e\u0439 \u0442\u0438\u043f, \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u0435\u043c\u044b\u0439 <code>pydantic</code>.</p>"},{"location":"ru/docs/server/request/parameters/headers/#_1","title":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435","text":"<p>HTTP-\u0437\u0430\u0433\u043e\u043b\u043e\u0432\u043a\u0438 \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u044e\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0443 \u0438 \u0441\u0435\u0440\u0432\u0435\u0440\u0443 \u043e\u0431\u043c\u0435\u043d\u0438\u0432\u0430\u0442\u044c\u0441\u044f \u0434\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0439 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0435\u0439 \u0432 HTTP-\u0437\u0430\u043f\u0440\u043e\u0441\u0430\u0445 \u0438 \u043e\u0442\u0432\u0435\u0442\u0430\u0445.</p>"},{"location":"ru/docs/server/request/parameters/headers/#_2","title":"\u0418\u0437\u0432\u043b\u0435\u0447\u0435\u043d\u0438\u0435 \u043e\u0434\u043d\u043e\u0433\u043e \u0437\u0430\u0433\u043e\u043b\u043e\u0432\u043a\u0430","text":"<p><code>Header</code> \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u044b\u0439 \u0437\u0430\u0433\u043e\u043b\u043e\u0432\u043e\u043a.</p> <p><pre><code>from rapidy.http import get, Header\n\n@get('/')\nasync def handler(\n    host: str = Header(alias='Host'),\n) -&gt; ...:\n</code></pre> <pre><code>from rapidy.http import get, Header\n\n@get('/')\nasync def handler(\n    host: str = Header(alias='Host'),\n    keep_alive: str = Header(alias='Keep-Alive'),\n) -&gt; ...:\n</code></pre></p>"},{"location":"ru/docs/server/request/parameters/headers/#_3","title":"\u0418\u0437\u0432\u043b\u0435\u0447\u0435\u043d\u0438\u0435 \u0432\u0441\u0435\u0445 \u0437\u0430\u0433\u043e\u043b\u043e\u0432\u043a\u043e\u0432","text":"<p><code>Headers</code> \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u0438\u0437\u0432\u043b\u0435\u0447\u044c \u0441\u0440\u0430\u0437\u0443 \u0432\u0441\u0435 \u0437\u0430\u0433\u043e\u043b\u043e\u0432\u043a\u0438.</p>"},{"location":"ru/docs/server/request/parameters/headers/#_4","title":"\u0418\u0437\u0432\u043b\u0435\u0447\u0435\u043d\u0438\u0435 \u0432 \u0437\u0430\u0440\u0430\u043d\u0435\u0435 \u0437\u0430\u0434\u0430\u043d\u043d\u0443\u044e \u0441\u0445\u0435\u043c\u0443","text":""},{"location":"ru/docs/server/request/parameters/headers/#dataclassesdataclass","title":"dataclasses.dataclass","text":"<p><code>dataclasses.dataclass</code> \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u044e\u0442\u0441\u044f \u0432 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u043c\u043e\u0434\u0435\u043b\u0438, \u043d\u043e \u0437\u0430\u0434\u0430\u0442\u044c <code>alias</code> \u0441\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u043d\u044b\u043c\u0438 \u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0430\u043c\u0438 <code>dataclasses</code> \u043d\u0435\u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e.</p> <pre><code>from dataclasses import dataclass\nfrom rapidy.http import get, Headers\n\n@dataclass\nclass HeadersData:\n    host: str\n    keep_alive: str  # cannot extract if header name is 'Keep-Alive'\n\n@get('/')\nasync def handler(\n    headers_data: HeadersData = Headers(),\n) -&gt; ...:\n# {\"errors\": [{\"type\": \"missing\", \"loc\": [\"header\", \"keep_alive\" ], \"msg\": \"Field required\"}]}\n</code></pre>"},{"location":"ru/docs/server/request/parameters/headers/#_5","title":"\u0418\u0437\u0432\u043b\u0435\u0447\u0435\u043d\u0438\u0435 \u0432 \u0441\u043b\u043e\u0432\u0430\u0440\u044c","text":"<pre><code>from rapidy.http import get, Headers\n\n@get('/')\nasync def handler(\n    headers_data: dict[str, str] = Headers(),\n) -&gt; ...:\n# {Host': '0.0.0.0:8080', 'Connection': 'keep-alive', 'Upgrade-Insecure-Requests': '1', 'User-Agent': '...'}\n</code></pre>"},{"location":"ru/docs/server/request/parameters/headers/#_6","title":"\u0418\u0437\u0432\u043b\u0435\u0447\u0435\u043d\u0438\u0435 \u0431\u0435\u0437 \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u0438","text":"<p>\u041e\u0442\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435 \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u0438 \u043d\u0435 \u0440\u0435\u043a\u043e\u043c\u0435\u043d\u0434\u0443\u0435\u0442\u0441\u044f.</p> <p>\u0415\u0441\u043b\u0438 \u043e\u0442\u043a\u043b\u044e\u0447\u0438\u0442\u044c \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u044e, \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440 \u0432\u0435\u0440\u043d\u0451\u0442 \u0431\u0430\u0437\u043e\u0432\u0443\u044e \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0443 <code>aiohttp</code>:</p> <ul> <li><code>Header</code> \u2192 <code>str</code></li> <li><code>Headers</code> \u2192 <code>CIMultiDictProxy[str]</code></li> </ul>"},{"location":"ru/docs/server/request/parameters/headers/#_7","title":"\u0421\u043f\u043e\u0441\u043e\u0431\u044b \u043e\u0442\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u0438","text":""},{"location":"ru/docs/server/request/parameters/headers/#_8","title":"\u042f\u0432\u043d\u043e\u0435 \u043e\u0442\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435","text":"<pre><code>from multidict import CIMultiDictProxy\nfrom rapidy.http import get, Header, Headers\n\n@get('/')\nasync def handler_1(\n    header_host: str = Header(alias='Host', validate=False)\n) -&gt; ...:\n    # \"0.0.0.0:8080\"\n\n@get('/')\nasync def handler_2(\n    headers_data: CIMultiDictProxy[str] = Headers(validate=False)\n) -&gt; ...:\n    # &lt;CIMultiDictProxy('Host': '0.0.0.0:8080', 'Connection': 'keep-alive', 'Upgrade-Insecure-Requests': '1', 'User-Agent': '...')&gt;\n</code></pre>"},{"location":"ru/docs/server/request/parameters/headers/#any","title":"\u0418\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 <code>Any</code>","text":"<pre><code>from typing import Any\n\n@get('/')\nasync def handler_1(\n    header_host: Any = Header(alias='Host')\n) -&gt; ...:\n    # \"0.0.0.0:8080\"\n\n@get('/')\nasync def handler_2(\n    headers_data: Any = Headers()\n) -&gt; ...:\n    # &lt;CIMultiDictProxy('Host': '0.0.0.0:8080', 'Connection': 'keep-alive', 'Upgrade-Insecure-Requests': '1', 'User-Agent': '...')&gt;\n</code></pre>"},{"location":"ru/docs/server/request/parameters/headers/#_9","title":"\u041e\u0442\u0441\u0443\u0442\u0441\u0442\u0432\u0438\u0435 \u0430\u043d\u043d\u043e\u0442\u0430\u0446\u0438\u0438 \u0442\u0438\u043f\u0430","text":"<p>\u0415\u0441\u043b\u0438 \u0442\u0438\u043f \u043d\u0435 \u0443\u043a\u0430\u0437\u0430\u043d, \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f <code>Any</code>. <pre><code>from typing import Any\n\n@get('/')\nasync def handler_1(\n    header_host=Header(alias='Host')\n) -&gt; ...:\n    # \"0.0.0.0:8080\"\n\n@get('/')\nasync def handler_2(\n    headers_data=Headers()\n) -&gt; ...:\n    # &lt;CIMultiDictProxy('Host': '0.0.0.0:8080', 'Connection': 'keep-alive', 'Upgrade-Insecure-Requests': '1', 'User-Agent': '...')&gt;\n</code></pre></p>"},{"location":"ru/docs/server/request/parameters/headers/#_10","title":"\u0417\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e","text":"<p>\u0417\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e \u0434\u043b\u044f <code>Header</code> \u0431\u0443\u0434\u0435\u0442 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u043e, \u0435\u0441\u043b\u0438 \u0432 \u0437\u0430\u043f\u0440\u043e\u0441\u0435 \u043e\u0442\u0441\u0443\u0442\u0441\u0442\u0432\u0443\u0435\u0442 \u0437\u0430\u0433\u043e\u043b\u043e\u0432\u043e\u043a \u0441 \u0443\u043a\u0430\u0437\u0430\u043d\u043d\u044b\u043c \u0438\u043c\u0435\u043d\u0435\u043c.</p> <p>\u0417\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e \u0434\u043b\u044f <code>Headers</code> \u0431\u0443\u0434\u0435\u0442 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u043e, \u0435\u0441\u043b\u0438 \u0432 \u0437\u0430\u043f\u0440\u043e\u0441\u0435 \u043d\u0435\u0442 \u043d\u0438 \u043e\u0434\u043d\u043e\u0433\u043e \u0437\u0430\u0433\u043e\u043b\u043e\u0432\u043a\u0430.</p> <p>\u0417\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e \u0434\u043b\u044f <code>Headers</code> \u0432 \u0440\u0435\u0430\u043b\u044c\u043d\u043e\u0441\u0442\u0438 \u043d\u0435 \u043f\u0440\u0438\u043c\u0435\u043d\u044f\u0435\u0442\u0441\u044f.</p> <p>\u041b\u044e\u0431\u043e\u0439 HTTP-\u043a\u043b\u0438\u0435\u043d\u0442 \u0432\u0441\u0435\u0433\u0434\u0430 \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 \u0431\u0430\u0437\u043e\u0432\u044b\u0435 \u0437\u0430\u0433\u043e\u043b\u043e\u0432\u043a\u0438, \u043f\u043e\u044d\u0442\u043e\u043c\u0443 \u044d\u0442\u043e\u0442 \u0441\u043b\u0443\u0447\u0430\u0439 \u043f\u0440\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u0438 \u043d\u0435\u0432\u043e\u0437\u043c\u043e\u0436\u0435\u043d. \u041e\u0434\u043d\u0430\u043a\u043e, \u0435\u0441\u043b\u0438 \u0442\u0430\u043a\u043e\u0435 \u0432\u0434\u0440\u0443\u0433 \u043f\u0440\u043e\u0438\u0437\u043e\u0439\u0434\u0451\u0442, \u043c\u0435\u0445\u0430\u043d\u0438\u0437\u043c \u043e\u0442\u0440\u0430\u0431\u043e\u0442\u0430\u0435\u0442 \u043a\u043e\u0440\u0440\u0435\u043a\u0442\u043d\u043e.</p>"},{"location":"ru/docs/server/request/parameters/headers/#default","title":"\u0418\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 <code>default</code>","text":"<p><pre><code>@get('/')\nasync def handler(\n    some_header: str = Header(alias='Some-Header', default='SomeValue'),\n) -&gt; ...:\n</code></pre> <pre><code>from typing import Annotated\n\n@get('/')\nasync def handler(\n    some_header: Annotated[str, Header(alias='Some-Header', default='SomeValue')],\n) -&gt; ...:\n</code></pre> <pre><code>from typing import Annotated\n\n@get('/')\nasync def handler(\n    some_header: Annotated[str, Header(alias='Some-Header')] = 'SomeValue',\n) -&gt; ...:\n</code></pre></p>"},{"location":"ru/docs/server/request/parameters/headers/#default_factory","title":"\u0418\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 <code>default_factory</code>","text":"<p><pre><code>@get('/')\nasync def handler(\n    some_header: str = Header(alias='Some-Header', default_factory=lambda: 'SomeValue'),\n) -&gt; ...:\n</code></pre> <pre><code>from typing import Annotated\n\n@get('/')\nasync def handler(\n    some_header: Annotated[str, Header(alias='Some-Header', default_factory=lambda:'SomeValue')],\n) -&gt; ...:\n</code></pre></p> <p>\u041d\u0435\u043b\u044c\u0437\u044f \u043e\u0434\u043d\u043e\u0432\u0440\u0435\u043c\u0435\u043d\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c <code>default</code> \u0438 <code>default_factory</code>.</p> <p>\u041f\u0440\u0438 \u043f\u043e\u043f\u044b\u0442\u043a\u0435 \u0437\u0430\u0434\u0430\u0442\u044c \u043e\u0431\u0430 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0430 \u0431\u0443\u0434\u0435\u0442 \u0432\u044b\u0437\u0432\u0430\u043d\u043e \u0438\u0441\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435 <code>pydantic</code>: <pre><code>TypeError('cannot specify both default and default_factory')\n</code></pre></p>"},{"location":"ru/docs/server/request/parameters/headers/#_11","title":"\u041f\u0440\u0435\u0434\u0443\u043f\u0440\u0435\u0436\u0434\u0435\u043d\u0438\u044f \u0438 \u043e\u0441\u043e\u0431\u0435\u043d\u043d\u043e\u0441\u0442\u0438","text":""},{"location":"ru/docs/server/request/parameters/headers/#header-headers","title":"\u0418\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 <code>Header</code> \u0438 <code>Headers</code> \u043e\u0434\u043d\u043e\u0432\u0440\u0435\u043c\u0435\u043d\u043d\u043e","text":"<p>\u041d\u0435\u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c <code>Header</code> \u0438 <code>Headers</code> \u043e\u0434\u043d\u043e\u0432\u0440\u0435\u043c\u0435\u043d\u043d\u043e \u0432 \u043e\u0434\u043d\u043e\u043c \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u0435.</p> <pre><code>@get('/')\nasync def handler(\n    host: str = Header(alias='Host'),\n    headers_data: HeadersData = Headers(),\n) -&gt; ...:\n</code></pre> <p>\u041f\u0440\u0438 \u0437\u0430\u043f\u0443\u0441\u043a\u0435 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f \u0431\u0443\u0434\u0435\u0442 \u0432\u044b\u0437\u0432\u0430\u043d\u043e \u0438\u0441\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435 <code>AnotherDataExtractionTypeAlreadyExistsError</code>.</p> <pre><code>------------------------------\nAttribute with this data extraction type cannot be added to the handler - another data extraction type is already use in handler.\n\nHandler path: `main.py`\nHandler name: `handler`\nAttribute name: `headers_data`\n------------------------------\n</code></pre>"},{"location":"ru/docs/server/request/parameters/headers/#alias-headers","title":"\u0410\u0442\u0440\u0438\u0431\u0443\u0442 <code>alias</code> \u0432 <code>Headers</code>","text":"<p>\u0410\u0442\u0440\u0438\u0431\u0443\u0442 <code>alias</code> \u043d\u0435 \u0440\u0430\u0431\u043e\u0442\u0430\u0435\u0442 \u0432 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0435 <code>Headers()</code>.</p> <pre><code>@get('/')\nasync def handler(\n    headers_data: HeadersData = Headers(alias='SomeName'),  # &lt;-- alias not working\n) -&gt; ...:\n</code></pre>"},{"location":"ru/docs/server/request/parameters/headers/#_12","title":"\u041a\u0430\u043a \u0438\u0437\u0432\u043b\u0435\u043a\u0430\u044e\u0442\u0441\u044f \u0441\u044b\u0440\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435","text":"<p>\u0412 <code>Rapidy</code> \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u043c\u0435\u0442\u043e\u0434 <code>headers</code> \u043e\u0431\u044a\u0435\u043a\u0442\u0430 <code>Request</code>, \u043f\u043e\u0441\u043b\u0435 \u0447\u0435\u0433\u043e \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 \u043f\u0435\u0440\u0435\u0434\u0430\u044e\u0442\u0441\u044f \u0432 <code>pydantic</code> \u0434\u043b\u044f \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u0438.</p> <p>\u041a\u0430\u043a \u043f\u0440\u043e\u0438\u0441\u0445\u043e\u0434\u0438\u0442 \u0438\u0437\u0432\u043b\u0435\u0447\u0435\u043d\u0438\u0435 \u0432\u043d\u0443\u0442\u0440\u0438 <code>Rapidy</code></p> <pre><code>async def extract_headers(request: Request) -&gt; CIMultiDictProxy[str]:\n    return request.headers\n</code></pre> <p><code>Rapidy</code> \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442 \u0432\u0441\u0442\u0440\u043e\u0435\u043d\u043d\u044b\u0435 \u043c\u0435\u0445\u0430\u043d\u0438\u0437\u043c\u044b <code>aiohttp</code>.</p> <p>\u041f\u043e\u0434\u0440\u043e\u0431\u043d\u0435\u0435 \u043e\u0431 \u043e\u0431\u044a\u0435\u043a\u0442\u0435 <code>aiohttp.Request</code> \u0438 \u043c\u0435\u0442\u043e\u0434\u0430\u0445 \u0438\u0437\u0432\u043b\u0435\u0447\u0435\u043d\u0438\u044f \u0434\u0430\u043d\u043d\u044b\u0445 \u043c\u043e\u0436\u043d\u043e \u0443\u0437\u043d\u0430\u0442\u044c \u0437\u0434\u0435\u0441\u044c.</p>"},{"location":"ru/docs/server/request/parameters/path/","title":"\u041f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u043f\u0443\u0442\u0438","text":"<p>\u0412 \u044d\u0442\u043e\u043c \u0440\u0430\u0437\u0434\u0435\u043b\u0435 \u043e\u043f\u0438\u0441\u0430\u043d\u044b \u0441\u043f\u043e\u0441\u043e\u0431\u044b \u0438\u0437\u0432\u043b\u0435\u0447\u0435\u043d\u0438\u044f \u0438 \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u0438 path-\u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u0432 \u0432 <code>Rapidy</code>.</p> <p>\u0412\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0442\u044c \u0434\u0430\u043d\u043d\u044b\u0435, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044f \u043b\u044e\u0431\u043e\u0439 \u0442\u0438\u043f, \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u0435\u043c\u044b\u0439 <code>pydantic</code>.</p>"},{"location":"ru/docs/server/request/parameters/path/#_2","title":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435","text":"<p>Path-\u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u044e\u0442 \u0441\u043e\u0437\u0434\u0430\u0432\u0430\u0442\u044c \u0434\u0438\u043d\u0430\u043c\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u043c\u0430\u0440\u0448\u0440\u0443\u0442\u044b \u0432 \u0432\u0430\u0448\u0435\u043c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0438.</p> <p>\u0412\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0438\u0442\u044c path-\u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044f \u0441\u0438\u043d\u0442\u0430\u043a\u0441\u0438\u0441 \u0444\u043e\u0440\u043c\u0430\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0445 \u0441\u0442\u0440\u043e\u043a Python:</p> <pre><code>from rapidy.http import get, PathParam\n\n@get('/{user_id}')\nasync def handler(\n    user_id: str = PathParam(),\n) -&gt; ...:\n</code></pre> <p>\u041f\u043e\u0434\u0440\u043e\u0431\u043d\u0435\u0435 \u043e \u0434\u0438\u043d\u0430\u043c\u0438\u0447\u0435\u0441\u043a\u0438\u0445 \u043c\u0430\u0440\u0448\u0440\u0443\u0442\u0430\u0445 \u0432 <code>aiohttp</code> \u043c\u043e\u0436\u043d\u043e \u043f\u0440\u043e\u0447\u0438\u0442\u0430\u0442\u044c \u0437\u0434\u0435\u0441\u044c.</p>"},{"location":"ru/docs/server/request/parameters/path/#_3","title":"\u0418\u0437\u0432\u043b\u0435\u0447\u0435\u043d\u0438\u0435 \u043e\u0434\u0438\u043d\u043e\u0447\u043d\u043e\u0433\u043e \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0430 \u043f\u0443\u0442\u0438","text":"<p><code>PathParam</code> \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u0438\u0437\u0432\u043b\u0435\u0447\u044c \u043e\u0434\u0438\u043d\u043e\u0447\u043d\u044b\u0439 path-\u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440.</p> <pre><code>from rapidy.http import get, PathParam\n\n@get('/{user_id}')\nasync def handler(\n    user_id: str = PathParam(),\n) -&gt; ...:\n</code></pre> <pre><code>from rapidy.http import get, PathParam\n\n@get('/{user_id}/{user_data}')\nasync def handler(\n    user_id: str = PathParam(),\n    user_data: str = PathParam(),\n) -&gt; ...:\n</code></pre>"},{"location":"ru/docs/server/request/parameters/path/#_4","title":"\u0418\u0437\u0432\u043b\u0435\u0447\u0435\u043d\u0438\u0435 \u0432\u0441\u0435\u0445 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u0432 \u043f\u0443\u0442\u0438","text":"<p><code>PathParams</code> \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u0438\u0437\u0432\u043b\u0435\u0447\u044c \u0441\u0440\u0430\u0437\u0443 \u0432\u0441\u0435 path-\u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b.</p>"},{"location":"ru/docs/server/request/parameters/path/#_5","title":"\u0418\u0437\u0432\u043b\u0435\u0447\u0435\u043d\u0438\u0435 \u0432 \u0437\u0430\u0440\u0430\u043d\u0435\u0435 \u0437\u0430\u0434\u0430\u043d\u043d\u0443\u044e \u0441\u0445\u0435\u043c\u0443","text":""},{"location":"ru/docs/server/request/parameters/path/#dataclassesdataclass","title":"dataclasses.dataclass","text":"<p><code>dataclasses.dataclass</code> \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u044e\u0442\u0441\u044f \u0432 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u043c\u043e\u0434\u0435\u043b\u0438, \u043d\u043e \u0437\u0430\u0434\u0430\u0442\u044c <code>alias</code> \u0441\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u043d\u044b\u043c\u0438 \u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0430\u043c\u0438 <code>dataclasses</code> \u043d\u0435\u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e.</p> <pre><code>from dataclasses import dataclass\nfrom rapidy.http import get, PathParams\n\n@dataclass\nclass PathData:\n    user_id: str\n    user_data: str\n\n@get('/{user_id}/{user_data}')\nasync def handler(\n    path_data: PathData = PathParams(),\n) -&gt; ...:\n</code></pre>"},{"location":"ru/docs/server/request/parameters/path/#_6","title":"\u0418\u0437\u0432\u043b\u0435\u0447\u0435\u043d\u0438\u0435 \u0432 \u0441\u043b\u043e\u0432\u0430\u0440\u044c","text":"<pre><code>from rapidy.http import get, PathParams\n\n@get('/{user_id}/{user_data}')\nasync def handler(\n    path_data: dict[str, str] = PathParams(),\n) -&gt; ...:\n# {'user_id': ..., 'user_data': ...}\n</code></pre>"},{"location":"ru/docs/server/request/parameters/path/#_7","title":"\u0418\u0437\u0432\u043b\u0435\u0447\u0435\u043d\u0438\u0435 \u0431\u0435\u0437 \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u0438","text":"<p>\u041e\u0442\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435 \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u0438 \u043d\u0435 \u0440\u0435\u043a\u043e\u043c\u0435\u043d\u0434\u0443\u0435\u0442\u0441\u044f.</p> <p>\u0415\u0441\u043b\u0438 \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u044f \u043e\u0442\u043a\u043b\u044e\u0447\u0435\u043d\u0430, \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u044e\u0442\u0441\u044f \u0432 \u0431\u0430\u0437\u043e\u0432\u043e\u0439 \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0435 <code>aiohttp</code>:</p> <ul> <li><code>PathParam</code> \u2192 <code>str</code></li> <li><code>PathParams</code> \u2192 <code>dict[str, str]</code></li> </ul>"},{"location":"ru/docs/server/request/parameters/path/#_8","title":"\u0421\u043f\u043e\u0441\u043e\u0431\u044b \u043e\u0442\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u0438","text":""},{"location":"ru/docs/server/request/parameters/path/#_9","title":"\u042f\u0432\u043d\u043e\u0435 \u043e\u0442\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435","text":"<pre><code>from rapidy.http import get, PathParam, PathParams\n\n@get('/')\nasync def handler_1(\n    user_id: int = PathParam(validate=False)\n) -&gt; ...:\n    # ...\n\n@get('/')\nasync def handler_2(\n    path_data: int = PathParams(validate=False)\n) -&gt; ...:\n    # {'user_id': ..., 'user_data': ...}\n</code></pre>"},{"location":"ru/docs/server/request/parameters/path/#any","title":"\u0418\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 <code>Any</code>","text":"<pre><code>from typing import Any\n\n@get('/')\nasync def handler_1(\n    user_id: Any = PathParam()\n) -&gt; ...:\n    # \"0.0.0.0:8080\"\n\n@get('/')\nasync def handler_2(\n    path_data: Any = PathParams()\n) -&gt; ...:\n    # {'user_id': ..., 'user_data': ...}\n</code></pre>"},{"location":"ru/docs/server/request/parameters/path/#_10","title":"\u041e\u0442\u0441\u0443\u0442\u0441\u0442\u0432\u0438\u0435 \u0430\u043d\u043d\u043e\u0442\u0430\u0446\u0438\u0438 \u0442\u0438\u043f\u0430","text":"<p>\u0415\u0441\u043b\u0438 \u0442\u0438\u043f \u043d\u0435 \u0443\u043a\u0430\u0437\u0430\u043d, \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f <code>Any</code>. <pre><code>@get('/')\nasync def handler_1(\n    user_id=PathParam()\n) -&gt; ...:\n    # ...\n\n@get('/')\nasync def handler_2(\n    path_data=PathParams()\n) -&gt; ...:\n    # {'user_id': ..., 'user_data': ...}\n</code></pre></p>"},{"location":"ru/docs/server/request/parameters/path/#_11","title":"\u0417\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e","text":"<p><code>PathParam</code> \u0438 <code>PathParams</code> \u043d\u0435 \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u044e\u0442 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e.</p> <p>\u042d\u0442\u043e \u043e\u0441\u043e\u0437\u043d\u0430\u043d\u043d\u043e\u0435 \u0430\u0440\u0445\u0438\u0442\u0435\u043a\u0442\u0443\u0440\u043d\u043e\u0435 \u043e\u0433\u0440\u0430\u043d\u0438\u0447\u0435\u043d\u0438\u0435: \u0431\u0435\u0437 \u043d\u0435\u0433\u043e \u043d\u0435\u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e \u043a\u043e\u0440\u0440\u0435\u043a\u0442\u043d\u043e \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0434\u0438\u043d\u0430\u043c\u0438\u0447\u0435\u0441\u043a\u0443\u044e \u043c\u0430\u0440\u0448\u0440\u0443\u0442\u0438\u0437\u0430\u0446\u0438\u044e.</p> <p>\u041f\u043e\u043f\u044b\u0442\u043a\u0430 \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u044c <code>default</code> \u0438\u043b\u0438 <code>default_factory</code> \u0434\u043b\u044f path-\u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0430 \u043f\u0440\u0438\u0432\u0435\u0434\u0451\u0442 \u043a \u0438\u0441\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044e <code>ParameterCannotUseDefaultError</code> \u0438\u043b\u0438 <code>ParameterCannotUseDefaultFactoryError</code>.</p>"},{"location":"ru/docs/server/request/parameters/path/#_12","title":"\u041f\u0440\u0435\u0434\u0443\u043f\u0440\u0435\u0436\u0434\u0435\u043d\u0438\u044f \u0438 \u043e\u0441\u043e\u0431\u0435\u043d\u043d\u043e\u0441\u0442\u0438","text":""},{"location":"ru/docs/server/request/parameters/path/#pathparam-pathparams","title":"\u041e\u0434\u043d\u043e\u0432\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 <code>PathParam</code> \u0438 <code>PathParams</code>","text":"<p>\u041d\u0435\u043b\u044c\u0437\u044f \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c <code>PathParam</code> \u0438 <code>PathParams</code> \u043e\u0434\u043d\u043e\u0432\u0440\u0435\u043c\u0435\u043d\u043d\u043e \u0432 \u043e\u0434\u043d\u043e\u043c \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u0435.</p> <pre><code>@get('/{user_id}/{user_data}')\nasync def handler(\n    user_id: str = PathParam(),\n    path_data: PathData = PathParams(),\n) -&gt; ...:\n</code></pre> <p>\u041f\u0440\u0438 \u0437\u0430\u043f\u0443\u0441\u043a\u0435 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f \u0431\u0443\u0434\u0435\u0442 \u0432\u044b\u0437\u0432\u0430\u043d\u043e \u0438\u0441\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435 <code>AnotherDataExtractionTypeAlreadyExistsError</code>:</p> <pre><code>------------------------------\nAttribute with this data extraction type cannot be added to the handler - another data extraction type is already used in the handler.\n\nHandler path: `main.py`\nHandler name: `handler`\nAttribute name: `path_data`\n------------------------------\n</code></pre>"},{"location":"ru/docs/server/request/parameters/path/#alias-pathparams","title":"\u0410\u0442\u0440\u0438\u0431\u0443\u0442 <code>alias</code> \u0434\u043b\u044f <code>PathParams</code>","text":"<p>\u0410\u0442\u0440\u0438\u0431\u0443\u0442 <code>alias</code> \u043d\u0435 \u0440\u0430\u0431\u043e\u0442\u0430\u0435\u0442 \u0432 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0435 <code>PathParams()</code>.</p> <pre><code>@get('/{user_id}/{user_data}')\nasync def handler(\n    path_data: PathData = PathParams(alias='SomeName'),  # &lt;-- alias not working\n) -&gt; ...:\n</code></pre>"},{"location":"ru/docs/server/request/parameters/path/#_13","title":"\u0418\u0437\u0432\u043b\u0435\u0447\u0435\u043d\u0438\u0435 \u0441\u044b\u0440\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445","text":"<p>\u0412 <code>Rapidy</code> \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u043c\u0435\u0442\u043e\u0434 <code>match_info</code> \u043e\u0431\u044a\u0435\u043a\u0442\u0430 <code>Request</code>, \u043f\u043e\u0441\u043b\u0435 \u0447\u0435\u0433\u043e \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 \u043f\u0435\u0440\u0435\u0434\u0430\u044e\u0442\u0441\u044f \u0432 <code>pydantic</code> \u0434\u043b\u044f \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u0438.</p> <p>\u041a\u0430\u043a \u043f\u0440\u043e\u0438\u0441\u0445\u043e\u0434\u0438\u0442 \u0438\u0437\u0432\u043b\u0435\u0447\u0435\u043d\u0438\u0435 \u0432\u043d\u0443\u0442\u0440\u0438 <code>Rapidy</code></p> <pre><code>async def extract_path(request: Request) -&gt; dict[str, str]:\n    return dict(request.match_info)\n</code></pre> <p><code>Rapidy</code> \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442 \u0432\u0441\u0442\u0440\u043e\u0435\u043d\u043d\u044b\u0435 \u043c\u0435\u0445\u0430\u043d\u0438\u0437\u043c\u044b <code>aiohttp</code>.</p> <p>\u041f\u043e\u0434\u0440\u043e\u0431\u043d\u0435\u0435 \u043e\u0431 \u043e\u0431\u044a\u0435\u043a\u0442\u0435 <code>aiohttp.Request</code> \u0438 \u043c\u0435\u0442\u043e\u0434\u0430\u0445 \u0438\u0437\u0432\u043b\u0435\u0447\u0435\u043d\u0438\u044f \u0434\u0430\u043d\u043d\u044b\u0445 \u043c\u043e\u0436\u043d\u043e \u0443\u0437\u043d\u0430\u0442\u044c \u0437\u0434\u0435\u0441\u044c.</p>"},{"location":"ru/docs/server/request/parameters/query/","title":"\u041f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u0437\u0430\u043f\u0440\u043e\u0441\u0430","text":"<p>\u0414\u0430\u043d\u043d\u044b\u0439 \u0440\u0430\u0437\u0434\u0435\u043b \u043f\u043e\u043a\u0430\u0436\u0435\u0442, \u043a\u0430\u043a \u043c\u043e\u0436\u043d\u043e \u0438\u0437\u0432\u043b\u0435\u043a\u0430\u0442\u044c \u0438 \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0442\u044c query-params \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044f <code>Rapidy</code>.</p> <p>\u0412\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u043f\u0440\u043e\u0432\u0435\u0440\u0438\u0442\u044c \u0434\u0430\u043d\u043d\u044b\u0435, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044f \u043b\u044e\u0431\u043e\u0439 \u0442\u0438\u043f, \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u0435\u043c\u044b\u0439 <code>pydantic</code>.</p>"},{"location":"ru/docs/server/request/parameters/query/#_2","title":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435","text":"<p>Query-\u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u044f\u044e\u0442 \u0441\u043e\u0431\u043e\u0439 \u043d\u0430\u0431\u043e\u0440 \u043f\u0430\u0440 \u043a\u043b\u044e\u0447-\u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0438\u0434\u0443\u0442 \u043f\u043e\u0441\u043b\u0435 \u0437\u043d\u0430\u043a\u0430 ? \u0432 URL-\u0430\u0434\u0440\u0435\u0441\u0435, \u0440\u0430\u0437\u0434\u0435\u043b\u0435\u043d\u043d\u044b\u0435 \u0441\u0438\u043c\u0432\u043e\u043b\u0430\u043c\u0438 &amp;.</p> <p>\u041f\u0440\u0438\u043c\u0435\u0440 URL \u0441\u043e \u0441\u0442\u0440\u043e\u043a\u043e\u0439 \u0437\u0430\u043f\u0440\u043e\u0441\u0430, \u0432\u043a\u043b\u044e\u0447\u0430\u044e\u0449\u0435\u0439 \u0442\u0440\u0438 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0430.</p> <p>https://www.rapidy.com/search?query=database+tools&amp;star_rating=4&amp;order=alphabetical</p>"},{"location":"ru/docs/server/request/parameters/query/#queryparam","title":"QueryParam","text":"<p><code>QueryParam</code> \u0438\u0437\u0432\u043b\u0435\u043a\u0430\u0435\u0442 \u043e\u0434\u0438\u043d\u043e\u0447\u043d\u044b\u0439 query-\u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440 \u043f\u043e \u0435\u0433\u043e \u0438\u043c\u0435\u043d\u0438.</p> <p><pre><code>from rapidy.http import get, QueryParam\n\n@get('/')\nasync def handler(\n    query: str = QueryParam(),\n) -&gt; ...:\n</code></pre> <pre><code>from rapidy.http import get, QueryParam\n\n@get('/')\nasync def handler(\n    query: str = QueryParam(),\n    star_rating: str = QueryParam(),\n) -&gt; ...:\n</code></pre></p>"},{"location":"ru/docs/server/request/parameters/query/#queryparams","title":"QueryParams","text":"<p><code>QueryParams</code> \u0438\u0437\u0432\u043b\u0435\u043a\u0430\u0435\u0442 \u0441\u0440\u0430\u0437\u0443 \u0432\u0441\u0435 query-\u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b.</p> <p>\u041f\u043e\u043c\u043d\u0438\u0442\u0435, \u0432\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u043f\u0440\u043e\u0432\u0435\u0440\u0438\u0442\u044c \u0434\u0430\u043d\u043d\u044b\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044f \u043b\u044e\u0431\u043e\u0439 \u0442\u0438\u043f \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u0435\u043c\u044b\u0439 <code>pydantic</code>.</p>"},{"location":"ru/docs/server/request/parameters/query/#_3","title":"\u0418\u0437\u0432\u043b\u0435\u0447\u0435\u043d\u0438\u0435 \u0432 \u0433\u043e\u0442\u043e\u0432\u0443\u044e \u0441\u0445\u0435\u043c\u0443","text":""},{"location":"ru/docs/server/request/parameters/query/#dataclassesdataclass","title":"dataclasses.dataclass","text":"<p><code>dataclasses.dataclass</code> \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u044e\u0442\u0441\u044f \u0432 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u0442\u0438\u043f\u0430 \u043c\u043e\u0434\u0435\u043b\u0438, \u043d\u043e \u0443 \u0432\u0430\u0441 \u043d\u0435 \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u0441\u044f \u0437\u0430\u0434\u0430\u0442\u044c <code>alias</code> \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044f \u0441\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u043d\u044b\u0435 \u0438\u043d\u0441\u0442\u0440\u0443\u043c\u0435\u043d\u0442\u044b <code>dataclasses.dataclass</code>.</p> <pre><code>from dataclasses import dataclass\nfrom rapidy.http import get, QueryParams\n\n@dataclass\nclass QueryParamsData:\n    query: str\n    star_rating: str\n\n@get('/')\nasync def handler(\n    query_params_data: QueryParamsData = QueryParams(),\n) -&gt; ...:\n</code></pre>"},{"location":"ru/docs/server/request/parameters/query/#_4","title":"\u0418\u0437\u0432\u043b\u0435\u0447\u0435\u043d\u0438\u0435 \u0432 \u0441\u043b\u043e\u0432\u0430\u0440\u044c","text":"<pre><code>from rapidy.http import get, QueryParams\n\n@get('/')\nasync def handler(\n    query_params_data: dict[str, str] = QueryParams(),\n) -&gt; ...:\n# {'query': ..., 'star_rating': ...}\n</code></pre>"},{"location":"ru/docs/server/request/parameters/query/#_5","title":"\u0418\u0437\u0432\u043b\u0435\u0447\u0435\u043d\u0438\u0435 \u0431\u0435\u0437 \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u0438","text":"<p>\u041e\u0442\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435 \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u0438 \u043d\u0435 \u0440\u0435\u043a\u043e\u043c\u0435\u043d\u0434\u0443\u0435\u0442\u0441\u044f.</p> <p>\u0415\u0441\u043b\u0438 \u043e\u0442\u043a\u043b\u044e\u0447\u0438\u0442\u044c \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u044e, \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440 \u0432\u0435\u0440\u043d\u0451\u0442 \u0431\u0430\u0437\u043e\u0432\u0443\u044e \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0443 <code>aiohttp</code>:</p> <ul> <li><code>QueryParam</code> - <code>str</code></li> <li><code>QueryParams</code> - <code>MultiDictProxy[str]</code></li> </ul>"},{"location":"ru/docs/server/request/parameters/query/#_6","title":"\u0421\u043f\u043e\u0441\u043e\u0431\u044b \u043e\u0442\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u0438","text":""},{"location":"ru/docs/server/request/parameters/query/#_7","title":"\u042f\u0432\u043d\u043e\u0435 \u043e\u0442\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435","text":"<pre><code>from rapidy.http import get, QueryParam, QueryParams\n\n@get('/')\nasync def handler_1(\n    query: int = QueryParam(validate=False)\n) -&gt; ...:\n    # ...\n\n@get('/')\nasync def handler_2(\n    query_params_data: int = QueryParams(validate=False)\n) -&gt; ...:\n    # &lt;MultiDictProxy('query': ..., 'star_rating', ...)&gt;\n</code></pre>"},{"location":"ru/docs/server/request/parameters/query/#any","title":"\u0418\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 <code>Any</code>","text":"<pre><code>from typing import Any\n\n@get('/')\nasync def handler_1(\n    query: Any = QueryParam(),\n) -&gt; ...:\n    # ...\n\n@get('/')\nasync def handler_2(\n    query_params_data: Any = QueryParams(),\n) -&gt; ...:\n    # &lt;MultiDictProxy('query': ..., 'star_rating', ...)&gt;\n</code></pre>"},{"location":"ru/docs/server/request/parameters/query/#_8","title":"\u041e\u0442\u0441\u0443\u0442\u0441\u0442\u0432\u0438\u0435 \u0430\u043d\u043d\u043e\u0442\u0430\u0446\u0438\u0438 \u0442\u0438\u043f\u0430","text":"<p>\u0415\u0441\u043b\u0438 \u0442\u0438\u043f \u043d\u0435 \u0443\u043a\u0430\u0437\u0430\u043d, \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f <code>Any</code>. <pre><code>@get('/')\nasync def handler_1(\n    query=QueryParam(),\n) -&gt; ...:\n    # ...\n\n@get('/')\nasync def handler_2(\n    query_params_data=QueryParams(),\n) -&gt; ...:\n    # &lt;MultiDictProxy('query': ..., 'star_rating', ...)&gt;\n</code></pre></p>"},{"location":"ru/docs/server/request/parameters/query/#_9","title":"\u0417\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e","text":"<p>\u0417\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e \u0434\u043b\u044f <code>QueryParam</code> \u0431\u0443\u0434\u0435\u0442 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c\u0441\u044f, \u0435\u0441\u043b\u0438 \u0432 \u043f\u043e\u0441\u0442\u0443\u043f\u0438\u0432\u0448\u0435\u043c \u0437\u0430\u043f\u0440\u043e\u0441\u0435 \u043d\u0435 \u0431\u0443\u0434\u0435\u0442 \u043d\u0430\u0439\u0434\u0435\u043d <code>query-\u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440</code> \u0441 \u0442\u0430\u043a\u0438\u043c \u0438\u043c\u0435\u043d\u0435\u043c.</p> <p>\u0417\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e \u0434\u043b\u044f <code>QueryParams</code> \u0431\u0443\u0434\u0435\u0442 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c\u0441\u044f, \u0435\u0441\u043b\u0438 \u0432 \u043f\u043e\u0441\u0442\u0443\u043f\u0438\u0432\u0448\u0435\u043c \u0437\u0430\u043f\u0440\u043e\u0441\u0435 \u043d\u0435 \u0431\u0443\u0434\u0435\u0442 \u043d\u0430\u0439\u0434\u0435\u043d\u043e \u043d\u0438 \u043e\u0434\u043d\u043e\u0433\u043e <code>query-\u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0430</code>.</p>"},{"location":"ru/docs/server/request/parameters/query/#default","title":"\u0418\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 <code>default</code>","text":"<p><pre><code>@get('/')\nasync def handler(\n    some_query_param: str = QueryParam(default='SomeValue'),\n) -&gt; None:\n</code></pre> <pre><code>from typing import Annotated\n\n@get('/')\nasync def handler(\n    some_query_param: Annotated[str, QueryParam(default='SomeValue')],\n) -&gt; None:\n</code></pre> <pre><code>from typing import Annotated\n\n@get('/')\nasync def handler(\n    some_query_param: Annotated[str, QueryParam()] = 'SomeValue',\n) -&gt; None:\n</code></pre></p>"},{"location":"ru/docs/server/request/parameters/query/#default_factory","title":"\u0418\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 <code>default_factory</code>","text":"<p><pre><code>@get('/')\nasync def handler(\n    some_query_param: str = QueryParam(default_factory=lambda: 'SomeValue'),\n) -&gt; None:\n</code></pre> <pre><code>from typing import Annotated\n\n@get('/')\nasync def handler(\n    some_query_param: Annotated[str, QueryParam(default_factory=lambda:'SomeValue')],\n) -&gt; None:\n</code></pre></p> <p>\u041d\u0435\u043b\u044c\u0437\u044f \u043e\u0434\u043d\u043e\u0432\u0440\u0435\u043c\u0435\u043d\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c <code>default</code> \u0438 <code>default_factory</code>.</p> <p>\u041f\u0440\u0438 \u043f\u043e\u043f\u044b\u0442\u043a\u0435 \u0437\u0430\u0434\u0430\u0442\u044c \u043e\u0431\u0430 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0430 \u0431\u0443\u0434\u0435\u0442 \u0432\u044b\u0437\u0432\u0430\u043d\u043e \u0438\u0441\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435 <code>pydantic</code>: <pre><code>TypeError('cannot specify both default and default_factory')\n</code></pre></p>"},{"location":"ru/docs/server/request/parameters/query/#_10","title":"\u041f\u0440\u0435\u0434\u0443\u043f\u0440\u0435\u0436\u0434\u0435\u043d\u0438\u044f \u0438 \u043e\u0441\u043e\u0431\u0435\u043d\u043d\u043e\u0441\u0442\u0438","text":""},{"location":"ru/docs/server/request/parameters/query/#queryparam-queryparams","title":"\u0418\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 <code>QueryParam</code> \u0438 <code>QueryParams</code> \u043e\u0434\u043d\u043e\u0432\u0440\u0435\u043c\u0435\u043d\u043d\u043e","text":"<p>\u041d\u0435\u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c <code>QueryParam</code> \u0438 <code>QueryParams</code> \u043e\u0434\u043d\u043e\u0432\u0440\u0435\u043c\u0435\u043d\u043d\u043e \u0432 \u043e\u0434\u043d\u043e\u043c \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u0435.</p> <pre><code>@get('/')\nasync def handler(\n    query: str = QueryParam(),\n    query_params_data: QueryParamsData = QueryParams(),\n) -&gt; ...:\n</code></pre> <p>\u041f\u0440\u0438 \u0437\u0430\u043f\u0443\u0441\u043a\u0435 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f \u0431\u0443\u0434\u0435\u0442 \u0432\u044b\u0437\u0432\u0430\u043d\u043e \u0438\u0441\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435 <code>AnotherDataExtractionTypeAlreadyExistsError</code>.</p> <pre><code>------------------------------\nAttribute with this data extraction type cannot be added to the handler - another data extraction type is already use in handler.\n\nHandler path: `main.py`\nHandler name: `handler`\nAttribute name: `headers_data`\n------------------------------\n</code></pre>"},{"location":"ru/docs/server/request/parameters/query/#alias-queryparams","title":"\u0410\u0442\u0440\u0438\u0431\u0443\u0442 <code>alias</code> \u0432 <code>QueryParams</code>","text":"<p>\u0410\u0442\u0440\u0438\u0431\u0443\u0442 <code>alias</code> \u043d\u0435 \u0440\u0430\u0431\u043e\u0442\u0430\u0435\u0442 \u0432 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0435 <code>QueryParams()</code>.</p> <pre><code>@get('/')\nasync def handler(\n    query_params_data: QueryParamsData = QueryParams(alias='SomeName'),  # &lt;-- alias not working\n) -&gt; ...:\n</code></pre>"},{"location":"ru/docs/server/request/parameters/query/#_11","title":"\u041a\u0430\u043a \u0438\u0437\u0432\u043b\u0435\u043a\u0430\u044e\u0442\u0441\u044f \u0441\u044b\u0440\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435","text":"<p><code>Rapidy</code> \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u043c\u0435\u0442\u043e\u0434 <code>rel_url.query</code> \u043e\u0431\u044a\u0435\u043a\u0442\u0430 <code>Request</code>, \u043f\u043e\u0441\u043b\u0435 \u0447\u0435\u0433\u043e \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 \u043f\u0435\u0440\u0435\u0434\u0430\u044e\u0442\u0441\u044f \u0432 <code>pydantic</code> \u0434\u043b\u044f \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u0438.</p> <p>\u041a\u0430\u043a \u043f\u0440\u043e\u0438\u0441\u0445\u043e\u0434\u0438\u0442 \u0438\u0437\u0432\u043b\u0435\u0447\u0435\u043d\u0438\u0435 \u0432\u043d\u0443\u0442\u0440\u0438 <code>Rapidy</code></p> <pre><code>async def extract_query(request: Request) -&gt; MultiDictProxy[str]:\n    return request.rel_url.query\n</code></pre> <p><code>Rapidy</code> \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442 \u0432\u0441\u0442\u0440\u043e\u0435\u043d\u043d\u044b\u0435 \u043c\u0435\u0445\u0430\u043d\u0438\u0437\u043c\u044b <code>aiohttp</code>.</p> <p>\u041f\u043e\u0434\u0440\u043e\u0431\u043d\u0435\u0435 \u043e\u0431 \u043e\u0431\u044a\u0435\u043a\u0442\u0435 <code>aiohttp.Request</code> \u0438 \u043c\u0435\u0442\u043e\u0434\u0430\u0445 \u0438\u0437\u0432\u043b\u0435\u0447\u0435\u043d\u0438\u044f \u0434\u0430\u043d\u043d\u044b\u0445 \u043c\u043e\u0436\u043d\u043e \u0443\u0437\u043d\u0430\u0442\u044c \u0437\u0434\u0435\u0441\u044c.</p>"},{"location":"ru/docs/server/request/parameters/body/","title":"\u0422\u0435\u043b\u043e HTTP-\u0437\u0430\u043f\u0440\u043e\u0441\u0430","text":"<p>\u042d\u0442\u043e\u0442 \u0440\u0430\u0437\u0434\u0435\u043b \u043f\u043e\u043a\u0430\u0436\u0435\u0442, \u043a\u0430\u043a \u0438\u0437\u0432\u043b\u0435\u043a\u0430\u0442\u044c \u0438 \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0442\u044c <code>body</code> \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e <code>Rapidy</code>.</p>"},{"location":"ru/docs/server/request/parameters/body/#_1","title":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435","text":"<p>HTTP \u0442\u0435\u043b\u043e \u0437\u0430\u043f\u0440\u043e\u0441\u0430 \u2014 \u044d\u0442\u043e \u0447\u0430\u0441\u0442\u044c \u0437\u0430\u043f\u0440\u043e\u0441\u0430, \u043f\u0435\u0440\u0435\u0434\u0430\u044e\u0449\u0430\u044f \u0434\u0430\u043d\u043d\u044b\u0435 \u043e\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0430 \u043a \u0441\u0435\u0440\u0432\u0435\u0440\u0443. \u041e\u043d\u043e \u0438\u0433\u0440\u0430\u0435\u0442 \u043a\u043b\u044e\u0447\u0435\u0432\u0443\u044e \u0440\u043e\u043b\u044c \u0432 \u043c\u0435\u0442\u043e\u0434\u0430\u0445 <code>POST</code>, <code>PUT</code> \u0438 <code>PATCH</code>, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044e\u0442\u0441\u044f \u0434\u043b\u044f \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f, \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u044f \u0438 \u043c\u043e\u0434\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u0438 \u0440\u0435\u0441\u0443\u0440\u0441\u043e\u0432.</p> <p>\u041d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u043f\u0440\u0438 <code>POST</code>-\u0437\u0430\u043f\u0440\u043e\u0441\u0435 \u0434\u043b\u044f \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u0443\u0447\u0435\u0442\u043d\u043e\u0439 \u0437\u0430\u043f\u0438\u0441\u0438 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0434\u0430\u043d\u043d\u044b\u0435 \u043f\u0435\u0440\u0435\u0434\u0430\u044e\u0442\u0441\u044f \u0432 \u0442\u0435\u043b\u0435 \u0437\u0430\u043f\u0440\u043e\u0441\u0430.</p> <pre><code>from pydantic import BaseModel\nfrom rapidy.http import post, Body\n\nclass UserData(BaseModel):\n    username: str\n    password: str\n\n@post('/')\nasync def handler(\n    user_data: UserData = Body(),\n) -&gt; ...:\n</code></pre>"},{"location":"ru/docs/server/request/parameters/body/#body","title":"\u0410\u0442\u0440\u0438\u0431\u0443\u0442\u044b Body","text":""},{"location":"ru/docs/server/request/parameters/body/#content_type","title":"<code>content_type</code>","text":"<p><pre><code># `application/json` by default\ncontent_type: str | ContentType = ContentType.json\n</code></pre> \u041e\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u0435\u0442 \u043e\u0436\u0438\u0434\u0430\u0435\u043c\u044b\u0439 \u0441\u0435\u0440\u0432\u0435\u0440\u043e\u043c \u0442\u0438\u043f \u0434\u0430\u043d\u043d\u044b\u0445 \u0432 <code>body</code>.</p> <p>\u041f\u043e\u0434\u0440\u043e\u0431\u043d\u0435\u0435 \u043f\u0440\u043e <code>enum ContentType</code> \u043c\u043e\u0436\u043d\u043e \u043f\u0440\u043e\u0447\u0438\u0442\u0430\u0442\u044c \u0437\u0434\u0435\u0441\u044c.</p> <p><code>Rapidy</code> \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442 \u0437\u0430\u0434\u0430\u043d\u043d\u044b\u0439 <code>content_type</code> \u0434\u043b\u044f \u043a\u043e\u0440\u0440\u0435\u043a\u0442\u043d\u043e\u0433\u043e \u0438\u0437\u0432\u043b\u0435\u0447\u0435\u043d\u0438\u044f \u0434\u0430\u043d\u043d\u044b\u0445.</p> <p>\u041e\u0441\u043d\u043e\u0432\u043d\u044b\u0435 \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u0435\u043c\u044b\u0435 \u0442\u0438\u043f\u044b:</p> <ul> <li><code>application/json</code></li> <li><code>application/x-www-form-urlencoded</code></li> <li><code>multipart/form-data</code></li> <li><code>text/*</code> \u2014 \u043b\u044e\u0431\u044b\u0435 MIME-\u0442\u0438\u043f\u044b \u0441 \u0442\u0435\u043a\u0441\u0442\u043e\u0432\u044b\u043c\u0438 \u0434\u0430\u043d\u043d\u044b\u043c\u0438</li> <li><code>application/octet-stream</code></li> </ul> <p>\u0415\u0441\u043b\u0438 \u0441\u0435\u0440\u0432\u0435\u0440 \u043e\u0436\u0438\u0434\u0430\u0435\u0442 \u0444\u043e\u0440\u043c\u0430\u0442, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 <code>Rapidy</code> \u044f\u0432\u043d\u043e \u043d\u0435 \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u0435\u0442 (\u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, <code>video/mpeg</code>), \u0434\u0430\u043d\u043d\u044b\u0435 \u0431\u0443\u0434\u0443\u0442 \u0438\u0437\u0432\u043b\u0435\u0447\u0435\u043d\u044b \u043a\u0430\u043a <code>bytes</code> \u0438 \u043f\u0435\u0440\u0435\u0434\u0430\u043d\u044b \u0432 <code>pydantic</code>-\u043c\u043e\u0434\u0435\u043b\u044c \u0431\u0435\u0437 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438.</p>"},{"location":"ru/docs/server/request/parameters/body/#check_content_type","title":"<code>check_content_type</code>","text":"<p>\u041e\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u0435\u0442, \u043d\u0443\u0436\u043d\u043e \u043b\u0438 \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0442\u044c \u0437\u0430\u0433\u043e\u043b\u043e\u0432\u043e\u043a <code>Content-Type</code>.</p> <ul> <li>\u041f\u0440\u0438 <code>True</code> (\u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e) <code>Rapidy</code> \u0441\u0440\u0430\u0432\u043d\u0438\u0442 \u043f\u0435\u0440\u0435\u0434\u0430\u043d\u043d\u044b\u0439 \u0437\u0430\u0433\u043e\u043b\u043e\u0432\u043e\u043a <code>Content-Type</code> \u0441 \u043e\u0436\u0438\u0434\u0430\u0435\u043c\u044b\u043c <code>content_type</code>.   \u0415\u0441\u043b\u0438 \u043e\u043d\u0438 \u043d\u0435 \u0441\u043e\u0432\u043f\u0430\u0434\u0430\u044e\u0442, \u043a\u043b\u0438\u0435\u043d\u0442\u0443 \u0432\u0435\u0440\u043d\u0435\u0442\u0441\u044f \u043e\u0448\u0438\u0431\u043a\u0430:</li> </ul> <pre><code>{\n    \"errors\": [\n        {\n            \"type\": \"ExtractError\",\n            \"loc\": [\n                \"body\"\n            ],\n            \"msg\": \"Failed to extract body data: Expected Content-Type `text/plain`, got `&lt;current_request_content_type&gt;`\"\n        }\n    ]\n}\n</code></pre>"},{"location":"ru/docs/server/request/parameters/body/#json_decoder","title":"<code>json_decoder</code>","text":"<p>\u041f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u0437\u0430\u0434\u0430\u0442\u044c \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0439 <code>json_decoder</code> \u0434\u043b\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 JSON-\u0434\u0430\u043d\u043d\u044b\u0445 \u0432 \u0442\u0435\u043b\u0435 \u0437\u0430\u043f\u0440\u043e\u0441\u0430.</p> <p>\u0420\u0430\u0431\u043e\u0442\u0430\u0435\u0442 \u0442\u043e\u043b\u044c\u043a\u043e \u043f\u0440\u0438 <code>content_type=\"application/json\"</code>.</p> <p>\u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e <code>Rapidy</code> \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442 <code>json.loads</code> \u0431\u0435\u0437 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u0432.</p> <p>\u042d\u043a\u0432\u0438\u0432\u0430\u043b\u0435\u043d\u0442\u043d\u044b\u0435 \u043f\u0440\u0438\u043c\u0435\u0440\u044b:</p> <p><pre><code>from rapidy.http import post, Body\n\n@post('/')\nasync def handler(\n    data: str = Body(),\n) -&gt; ...:\n</code></pre> \u0438\u043b\u0438 <pre><code>import json\nfrom rapidy.http import post, Body\n\n@post('/')\nasync def handler(\n    data: str = Body(json_decoder=json.loads),\n) -&gt; ...:\n</code></pre></p> <p>\u0415\u0441\u043b\u0438 \u0442\u0440\u0435\u0431\u0443\u0435\u0442\u0441\u044f \u043a\u0430\u0441\u0442\u043e\u043c\u043d\u0430\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 JSON, \u043f\u0435\u0440\u0435\u0434\u0430\u0439\u0442\u0435 \u0432 <code>json_decoder</code> \u043b\u044e\u0431\u043e\u0439 \u0432\u044b\u0437\u044b\u0432\u0430\u0435\u043c\u044b\u0439 \u043e\u0431\u044a\u0435\u043a\u0442, \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u044e\u0449\u0438\u0439 <code>str</code>.</p> <p>\u041e\u0436\u0438\u0434\u0430\u0435\u043c\u044b\u0439 \u0442\u0438\u043f \u0434\u0430\u043d\u043d\u044b\u0445: <code>Callable[[str], Any]</code>.</p> <p>\u041f\u0440\u0438\u043c\u0435\u0440 \u0441 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u043c \u0434\u0435\u043a\u043e\u0434\u0435\u0440\u043e\u043c:</p> <pre><code>from typing import Any\nfrom rapidy.http import post, Body\n\ndef custom_json_decoder(data: str) -&gt; ...:\n    ...\n\n@post('/')\nasync def handler(\n    data: Any = Body(json_decoder=custom_json_decoder),\n) -&gt; ...:\n</code></pre> <p>\u0427\u0442\u043e\u0431\u044b \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c <code>json.loads</code> \u0441 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0430\u043c\u0438 \u0438\u043b\u0438 \u043f\u0435\u0440\u0435\u0434\u0430\u0442\u044c \u0434\u0435\u043a\u043e\u0434\u0435\u0440 \u0441 \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u0430\u043c\u0438, \u0432\u043e\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435\u0441\u044c <code>functools.partial</code>:</p> <pre><code>import json\nfrom functools import partial\nfrom typing import Any, OrderedDict\nfrom rapidy.http import post, Body\n\ndecoder = partial(json.loads, object_pairs_hook=OrderedDict)\n\n@post('/')\nasync def handler(\n    data: Any = Body(json_decoder=decoder),\n) -&gt; ...:\n</code></pre>"},{"location":"ru/docs/server/request/parameters/body/#_2","title":"\u0418\u0437\u0432\u043b\u0435\u0447\u0435\u043d\u0438\u0435 \u0431\u0435\u0437 \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u0438","text":"<p>\u0411\u043e\u043b\u044c\u0448\u0438\u043d\u0441\u0442\u0432\u043e \u0442\u0438\u043f\u043e\u0432 <code>Body</code> \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u044e\u0442 \u0438\u0437\u0432\u043b\u0435\u0447\u0435\u043d\u0438\u0435 \u0434\u0430\u043d\u043d\u044b\u0445 \u0431\u0435\u0437 \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u0438.</p> <p>\u042d\u0442\u043e\u0442 \u043c\u0435\u0442\u043e\u0434 \u043d\u0435 \u0440\u0435\u043a\u043e\u043c\u0435\u043d\u0434\u0443\u0435\u0442\u0441\u044f.</p> <p>\u0415\u0441\u043b\u0438 \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u044f \u043e\u0442\u043a\u043b\u044e\u0447\u0435\u043d\u0430, \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440 \u0432\u0435\u0440\u043d\u0435\u0442 \u0431\u0430\u0437\u043e\u0432\u0443\u044e \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0443 <code>aiohttp</code>.</p> <p>\u041f\u043e\u0434\u0440\u043e\u0431\u043d\u0435\u0435 \u043e\u0431 \u044d\u0442\u043e\u043c \u043c\u043e\u0436\u043d\u043e \u043f\u0440\u043e\u0447\u0438\u0442\u0430\u0442\u044c \u0432 \u0440\u0430\u0437\u0434\u0435\u043b\u0435 \u0418\u0437\u0432\u043b\u0435\u0447\u0435\u043d\u0438\u0435 \u0431\u0435\u0437 \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u0438 \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0442\u0438\u043f\u0430 <code>body</code>.</p>"},{"location":"ru/docs/server/request/parameters/body/#_3","title":"\u0421\u043f\u043e\u0441\u043e\u0431\u044b \u043e\u0442\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u0438:","text":""},{"location":"ru/docs/server/request/parameters/body/#_4","title":"\u042f\u0432\u043d\u043e\u0435 \u043e\u0442\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435","text":"<pre><code>from pydantic import BaseModel\nfrom rapidy.http import post, Body\n\nclass BodyData(BaseModel):\n    ...\n\n@post('/')\nasync def handler(\n    data: BodyData = Body(validate=False),\n) -&gt; ...:\n</code></pre>"},{"location":"ru/docs/server/request/parameters/body/#any","title":"\u0418\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 <code>Any</code>","text":"<pre><code>@post('/')\nasync def handler(\n    data: Any = Body(),\n) -&gt; ...:\n</code></pre>"},{"location":"ru/docs/server/request/parameters/body/#_5","title":"\u041e\u0442\u0441\u0443\u0442\u0441\u0442\u0432\u0438\u0435 \u0430\u043d\u043d\u043e\u0442\u0430\u0446\u0438\u0438 \u0442\u0438\u043f\u0430","text":"<p>\u0415\u0441\u043b\u0438 \u0442\u0438\u043f \u043d\u0435 \u0443\u043a\u0430\u0437\u0430\u043d, \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f <code>Any</code>. <pre><code>@post('/')\nasync def handler(\n    data=Body(),\n) -&gt; ...:\n</code></pre></p>"},{"location":"ru/docs/server/request/parameters/body/#_6","title":"\u0417\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e","text":"<p>\u0411\u043e\u043b\u044c\u0448\u0438\u043d\u0441\u0442\u0432\u043e \u0442\u0438\u043f\u043e\u0432 <code>Body</code> \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u044e\u0442 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e.</p> <p>\u0415\u0441\u043b\u0438 HTTP-\u0437\u0430\u043f\u0440\u043e\u0441 \u043d\u0435 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u0442\u0435\u043b\u0430, \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440 \u043f\u043e\u043b\u0443\u0447\u0438\u0442 \u0443\u043a\u0430\u0437\u0430\u043d\u043d\u043e\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e (\u0435\u0441\u043b\u0438 \u043e\u043d\u043e \u0437\u0430\u0434\u0430\u043d\u043e).</p>"},{"location":"ru/docs/server/request/parameters/body/#_7","title":"\u041f\u0440\u0438\u043c\u0435\u0440\u044b \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f","text":""},{"location":"ru/docs/server/request/parameters/body/#_8","title":"\u0423\u043a\u0430\u0437\u0430\u043d\u043e \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e","text":"<pre><code>from pydantic import BaseModel\nfrom rapidy.http import post, Body\n\nclass BodyData(BaseModel):\n    ...\n\n@post('/')\nasync def handler(\n    data: BodyData = Body('some_data'),\n    # or\n    data: BodyData = Body(default_factory=lambda: 'some_data'),\n) -&gt; ...:\n</code></pre>"},{"location":"ru/docs/server/request/parameters/body/#_9","title":"\u041e\u043f\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u043e\u0435 \u0442\u0435\u043b\u043e \u0437\u0430\u043f\u0440\u043e\u0441\u0430","text":"<pre><code>from pydantic import BaseModel\nfrom rapidy.http import post, Body\n\nclass BodyData(BaseModel):\n    ...\n\n@post('/')\nasync def handler(\n    data: BodyData | None = Body(),\n    # or\n    data: Optional[BodyData] = Body(),\n    # or\n    data: Union[BodyData, None] = Body(),\n) -&gt; ...:\n</code></pre> <p>\u041f\u043e\u0434\u0440\u043e\u0431\u043d\u0435\u0435 \u043e\u0431 \u044d\u0442\u043e\u043c \u043c\u043e\u0436\u043d\u043e \u043f\u0440\u043e\u0447\u0438\u0442\u0430\u0442\u044c \u0432 \u0440\u0430\u0437\u0434\u0435\u043b\u0435 \u0417\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0442\u0438\u043f\u0430 <code>body</code>.</p>"},{"location":"ru/docs/server/request/parameters/body/binary/","title":"Binary","text":"<p>\u0427\u0442\u0435\u043d\u0438\u0435 \u0442\u0435\u043b\u0430 \u0437\u0430\u043f\u0440\u043e\u0441\u0430 \u0432 \u0432\u0438\u0434\u0435 \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438 \u0431\u0430\u0439\u0442.</p>"},{"location":"ru/docs/server/request/parameters/body/binary/#_1","title":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435","text":"<p>Binary (MIME-type: <code>application/octet-stream</code>) \u2014 \u0434\u0432\u043e\u0438\u0447\u043d\u044b\u0439 \u0442\u0438\u043f \u0434\u0430\u043d\u043d\u044b\u0445.</p> <p><code>Rapidy</code> \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u0438\u0437\u0432\u043b\u0435\u043a\u0430\u0442\u044c \u043b\u044e\u0431\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 \u0441 <code>content_type</code> \u0432 \u0432\u0438\u0434\u0435 \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438 \u0431\u0430\u0439\u0442.</p> <p>\u041f\u0440\u043e\u0441\u0442\u043e \u0443\u043a\u0430\u0436\u0438\u0442\u0435 \u0430\u043d\u043d\u043e\u0442\u0430\u0446\u0438\u044e <code>bytes</code> \u0438\u043b\u0438 <code>StreamReader</code>.</p> <p>\u0417\u0430\u0447\u0435\u043c \u044d\u0442\u043e \u043d\u0443\u0436\u043d\u043e?</p> <p>\u042d\u0442\u043e \u043f\u043e\u043b\u0435\u0437\u043d\u043e, \u0435\u0441\u043b\u0438 \u043d\u0443\u0436\u043d\u043e \u044f\u0432\u043d\u043e \u043e\u0433\u0440\u0430\u043d\u0438\u0447\u0438\u0442\u044c \u0442\u0438\u043f \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0435\u043c\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445 \u0438 \u0437\u0430\u0442\u0435\u043c \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c \u0438\u0445 \u0432 \u0434\u0432\u043e\u0438\u0447\u043d\u043e\u043c \u0432\u0438\u0434\u0435.</p> <p>\u0415\u0441\u0442\u044c \u0442\u043e\u043b\u044c\u043a\u043e \u0434\u0432\u0430 \u0442\u0438\u043f\u0430 \u0434\u0430\u043d\u043d\u044b\u0445, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043c\u043e\u0436\u043d\u043e \u0438\u0437\u0432\u043b\u0435\u043a\u0430\u0442\u044c \u0431\u0435\u0437 \u0443\u0447\u0435\u0442\u0430 <code>content_type</code>: <code>bytes</code> \u0438 <code>StreamReader</code>.</p>"},{"location":"ru/docs/server/request/parameters/body/binary/#streamreader","title":"StreamReader","text":"<p>\u041f\u043e\u0434\u0440\u043e\u0431\u043d\u0435\u0435 \u043e\u0431 \u043e\u0431\u044a\u0435\u043a\u0442\u0435 <code>StreamReader</code> \u043c\u043e\u0436\u043d\u043e \u0443\u0437\u043d\u0430\u0442\u044c \u0437\u0434\u0435\u0441\u044c.</p> <pre><code>from rapidy import StreamReader\nfrom rapidy.http import post, Body\n\n@post('/')\nasync def handler(\n    user_data: StreamReader = Body(),\n) -&gt; ...:\n</code></pre>"},{"location":"ru/docs/server/request/parameters/body/binary/#_2","title":"\u0418\u0437\u0432\u043b\u0435\u0447\u0435\u043d\u0438\u0435 \u0431\u0435\u0437 \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u0438","text":"<p>\u042d\u0442\u0438 \u0441\u043f\u043e\u0441\u043e\u0431\u044b \u043d\u0435 \u0440\u0435\u043a\u043e\u043c\u0435\u043d\u0434\u0443\u044e\u0442\u0441\u044f.</p> <p>\u0415\u0441\u043b\u0438 \u043e\u0442\u043a\u043b\u044e\u0447\u0438\u0442\u044c \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u044e, \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440 \u0432\u0435\u0440\u043d\u0435\u0442 \u0431\u0430\u0437\u043e\u0432\u0443\u044e \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0443 <code>aiohttp</code>:</p> <ul> <li><code>Body(content_type=ContentType.stream)</code> \u2192 <code>bytes</code></li> </ul> <p>\u0412\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u044f <code>pydantic</code> \u0434\u043b\u044f <code>StreamReader</code> \u043d\u0435 \u0440\u0430\u0431\u043e\u0442\u0430\u0435\u0442.</p>"},{"location":"ru/docs/server/request/parameters/body/binary/#_3","title":"\u0421\u043f\u043e\u0441\u043e\u0431\u044b \u043e\u0442\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u0438","text":"<p>\u041e\u0442\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435 \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u0438 \u0441 <code>validate=False</code></p> <p>\u0423\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u0435 <code>Body(validate=False)</code>. <pre><code>@post('/')\nasync def handler(\n    data: SomeBytesType = Body(validate=False, content_type=ContentType.stream),\n) -&gt; ...:\n</code></pre></p> <p>\u041e\u0442\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435 \u0447\u0435\u0440\u0435\u0437 <code>Any</code></p> <pre><code>@post('/')\nasync def handler(\n    data: Any = Body(content_type=ContentType.stream),\n) -&gt; ...:\n</code></pre> <p>\u041e\u0442\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435 \u0442\u0438\u043f\u0438\u0437\u0430\u0446\u0438\u0438</p> <p>\u0415\u0441\u043b\u0438 \u043d\u0435 \u0443\u043a\u0430\u0437\u044b\u0432\u0430\u0442\u044c \u0442\u0438\u043f, \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e \u0431\u0443\u0434\u0435\u0442 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d <code>Any</code>. <pre><code>@post('/')\nasync def handler(\n    data=Body(content_type=ContentType.stream),\n) -&gt; ...:\n</code></pre></p>"},{"location":"ru/docs/server/request/parameters/body/binary/#_4","title":"\u0417\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e","text":"<p>\u0415\u0441\u043b\u0438 HTTP-\u0437\u0430\u043f\u0440\u043e\u0441 \u043d\u0435 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u0442\u0435\u043b\u0430, \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440 \u043f\u043e\u043b\u0443\u0447\u0438\u0442 \u0443\u043a\u0430\u0437\u0430\u043d\u043d\u043e\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e (\u0435\u0441\u043b\u0438 \u043e\u043d\u043e \u0437\u0430\u0434\u0430\u043d\u043e).</p>"},{"location":"ru/docs/server/request/parameters/body/binary/#_5","title":"\u041f\u0440\u0438\u043c\u0435\u0440\u044b \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f","text":""},{"location":"ru/docs/server/request/parameters/body/binary/#_6","title":"\u0423\u043a\u0430\u0437\u0430\u043d\u043e \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e","text":"<pre><code>@post('/')\nasync def handler(\n    data: bytes = Body(b'some_bytes', content_type=ContentType.stream),\n    # or\n    data: bytes = Body(default_factory=lambda: b'some_bytes', content_type=ContentType.stream),\n) -&gt; ...:\n</code></pre>"},{"location":"ru/docs/server/request/parameters/body/binary/#_7","title":"\u041e\u043f\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u043e\u0435 \u0442\u0435\u043b\u043e \u0437\u0430\u043f\u0440\u043e\u0441\u0430","text":"<pre><code>@post('/')\nasync def handler(\n    data: bytes | None = Body(content_type=ContentType.stream),\n    # or\n    data: Optional[bytes] = Body(content_type=ContentType.stream),\n    # or\n    data: Union[bytes, None] = Body(content_type=ContentType.stream),\n) -&gt; ...:\n</code></pre> \u0417\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e \u0434\u043b\u044f <code>StreamReader</code> \u0437\u0430\u0434\u0430\u0442\u044c \u043d\u0435\u043b\u044c\u0437\u044f. <p>\u0415\u0441\u043b\u0438 \u043f\u043e\u043f\u044b\u0442\u0430\u0442\u044c\u0441\u044f \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u044c <code>default</code> \u0438\u043b\u0438 <code>default_factory</code> \u0434\u043b\u044f <code>StreamReader</code>, \u0431\u0443\u0434\u0435\u0442 \u0432\u044b\u0437\u0432\u0430\u043d\u0430 \u043e\u0448\u0438\u0431\u043a\u0430 <code>ParameterCannotUseDefaultError</code>. <pre><code>from rapidy import StreamReader\nfrom rapidy.http import post, Body\n\n@post('/')\nasync def handler(\n    user_data: StreamReader = Body(default='SomeDefault'),\n) -&gt; ...:\n</code></pre> <pre><code>------------------------------\nHandler attribute with Type `Body` cannot have a default value.\n\nHandler path: `&lt;full_path&gt;/main.py`\nHandler name: `handler`\nAttribute name: `data`\n------------------------------\n</code></pre></p>"},{"location":"ru/docs/server/request/parameters/body/binary/#_8","title":"\u041a\u0430\u043a \u0438\u0437\u0432\u043b\u0435\u043a\u0430\u044e\u0442\u0441\u044f \u0441\u044b\u0440\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435","text":"<p><code>Rapidy</code> \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442 \u0432\u0441\u0442\u0440\u043e\u0435\u043d\u043d\u044b\u0435 \u043c\u0435\u0445\u0430\u043d\u0438\u0437\u043c\u044b <code>aiohttp</code>.</p> <p>\u041f\u043e\u0434\u0440\u043e\u0431\u043d\u0435\u0435 \u043e <code>aiohttp.Request</code> \u0438 \u043c\u0435\u0442\u043e\u0434\u0430\u0445 \u0438\u0437\u0432\u043b\u0435\u0447\u0435\u043d\u0438\u044f \u0434\u0430\u043d\u043d\u044b\u0445 \u043c\u043e\u0436\u043d\u043e \u043f\u0440\u043e\u0447\u0438\u0442\u0430\u0442\u044c \u0437\u0434\u0435\u0441\u044c.</p>"},{"location":"ru/docs/server/request/parameters/body/binary/#bytes_1","title":"bytes","text":"<p><code>Rapidy</code> \u0432\u044b\u0437\u044b\u0432\u0430\u0435\u0442 \u043c\u0435\u0442\u043e\u0434 <code>read</code> \u043e\u0431\u044a\u0435\u043a\u0442\u0430 <code>Request</code>, \u0430 \u0437\u0430\u0442\u0435\u043c \u043f\u0435\u0440\u0435\u0434\u0430\u0435\u0442 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 \u0432 <code>pydantic</code> \u0434\u043b\u044f \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u0438.</p> <p>\u041a\u0430\u043a \u0440\u0430\u0431\u043e\u0442\u0430\u0435\u0442 \u0438\u0437\u0432\u043b\u0435\u0447\u0435\u043d\u0438\u0435 \u0432 <code>Rapidy</code></p> <pre><code>async def extract_body_bytes(request: Request) -&gt; Optional[bytes]:\n    if not request.body_exists:\n        return None\n\n    return await request.read()\n</code></pre>"},{"location":"ru/docs/server/request/parameters/body/binary/#streamreader_1","title":"StreamReader","text":"<p><code>Rapidy</code> \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442 \u0430\u0442\u0440\u0438\u0431\u0443\u0442 <code>content</code> \u043e\u0431\u044a\u0435\u043a\u0442\u0430 <code>Request</code> \u0438 \u043f\u0435\u0440\u0435\u0434\u0430\u0435\u0442 \u0435\u0433\u043e \u043d\u0430\u043f\u0440\u044f\u043c\u0443\u044e \u0432 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a \u0437\u0430\u043f\u0440\u043e\u0441\u0430, \u043c\u0438\u043d\u0443\u044f \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u044e <code>pydantic</code>.</p> <p>\u041a\u0430\u043a \u0440\u0430\u0431\u043e\u0442\u0430\u0435\u0442 \u0438\u0437\u0432\u043b\u0435\u0447\u0435\u043d\u0438\u0435 \u0432 <code>Rapidy</code></p> <pre><code>async def extract_body_stream(request: Request) -&gt; Optional[StreamReader]:\n    if not request.body_exists:\n        return None\n\n    return request.content\n</code></pre>"},{"location":"ru/docs/server/request/parameters/body/json/","title":"JSON","text":"<p>\u0427\u0442\u0435\u043d\u0438\u0435 \u0442\u0435\u043b\u0430 \u0437\u0430\u043f\u0440\u043e\u0441\u0430 \u043a\u0430\u043a <code>JSON</code>.</p>"},{"location":"ru/docs/server/request/parameters/body/json/#_1","title":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435","text":"<p>JSON (JavaScript Object Notation) (MIME-type: <code>application/json</code>) \u2014 \u0442\u0435\u043a\u0441\u0442\u043e\u0432\u044b\u0439 \u0444\u043e\u0440\u043c\u0430\u0442 \u043e\u0431\u043c\u0435\u043d\u0430 \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u043c\u0438 \u0434\u0430\u043d\u043d\u044b\u043c\u0438, \u043e\u0441\u043d\u043e\u0432\u0430\u043d\u043d\u044b\u0439 \u043d\u0430 JavaScript. \u0421\u0435\u0433\u043e\u0434\u043d\u044f JSON \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u044f\u0437\u044b\u043a\u043e\u043d\u0435\u0437\u0430\u0432\u0438\u0441\u0438\u043c\u044b\u043c \u0438 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u0432 \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0445 \u044f\u0437\u044b\u043a\u0430\u0445 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f.</p> <p>\u042d\u0442\u043e\u0442 \u0440\u0430\u0437\u0434\u0435\u043b \u043f\u043e\u043a\u0430\u0436\u0435\u0442, \u043a\u0430\u043a \u0438\u0437\u0432\u043b\u0435\u043a\u0430\u0442\u044c <code>JSON</code> \u0438\u0437 \u0442\u0435\u043b\u0430 \u0437\u0430\u043f\u0440\u043e\u0441\u0430 \u0438 \u0432\u0430\u043b\u0438\u0434\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0435\u0433\u043e \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e <code>Rapidy</code>.</p>"},{"location":"ru/docs/server/request/parameters/body/json/#json_1","title":"\u0422\u0438\u043f\u044b \u0434\u0430\u043d\u043d\u044b\u0445 \u0432 JSON","text":""},{"location":"ru/docs/server/request/parameters/body/json/#_2","title":"\u041e\u0431\u044a\u0435\u043a\u0442","text":"<p>\u041d\u0435\u0443\u043f\u043e\u0440\u044f\u0434\u043e\u0447\u0435\u043d\u043d\u043e\u0435 \u043c\u043d\u043e\u0436\u0435\u0441\u0442\u0432\u043e \u043f\u0430\u0440 \u00ab\u043a\u043b\u044e\u0447:\u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435\u00bb. <pre><code>{\n    \"username\": \"User\",\n    \"password\": \"myAwesomePass\"\n}\n</code></pre> <pre><code>from pydantic import BaseModel\nfrom rapidy.http import post, Body, ContentType\n\nclass UserData(BaseModel):\n    username: str\n    password: str\n\n@post('/')\nasync def handler(\n    user_data: UserData = Body(),\n    # or\n    user_data: UserData = Body(content_type=ContentType.json),\n    # or\n    user_data: UserData = Body(content_type='application/json'),\n) -&gt; ...:\n</code></pre></p> \u041e\u0442\u043f\u0440\u0430\u0432\u043a\u0430 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e <code>curl</code> <pre><code>curl -X POST \\\n-H \"Content-Type: application/json\" \\\n-d '{\"username\": \"User\", \"password\": \"myAwesomePass\"}' \\\nhttp://127.0.0.1:8080\n</code></pre>"},{"location":"ru/docs/server/request/parameters/body/json/#_3","title":"\u041c\u0430\u0441\u0441\u0438\u0432","text":"<p><pre><code>[\n    {\"username\": \"User1\", \"password\": \"myAwesomePass1\"},\n    {\"username\": \"User2\", \"password\": \"myAwesomePass2\"}\n]\n</code></pre> <pre><code>from pydantic import BaseModel\nfrom rapidy.http import post, Body\n\nclass UserData(BaseModel):\n    username: str\n    password: str\n\n@post('/')\nasync def handler(\n    users: list[UserData] = Body(),\n) -&gt; ...:\n</code></pre></p> \u041e\u0442\u043f\u0440\u0430\u0432\u043a\u0430 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e <code>curl</code> <pre><code>curl -X POST \\\n-H \"Content-Type: application/json\" \\\n-d '[{\"username\": \"user1\", \"password\": \"password1\"}, {\"username\": \"user2\", \"password\": \"password2\"}]' \\\nhttp://127.0.0.1:8080\n</code></pre>"},{"location":"ru/docs/server/request/parameters/body/json/#_4","title":"\u0427\u0438\u0441\u043b\u043e","text":"<p>\u0426\u0435\u043b\u043e\u0435 \u0438\u043b\u0438 \u0432\u0435\u0449\u0435\u0441\u0442\u0432\u0435\u043d\u043d\u043e\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435. <pre><code>111\n</code></pre> <pre><code>from rapidy.http import post, Body\n\n@post('/')\nasync def handler(\n    int_data: int = Body(),\n) -&gt; ...:\n</code></pre></p> \u041e\u0442\u043f\u0440\u0430\u0432\u043a\u0430 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e <code>curl</code> <pre><code>curl -X POST \\\n-H \"Content-Type: application/json\" \\\n-d '\"111\"' \\\nhttp://127.0.0.1:8080\n</code></pre> <p>\u041f\u0440\u0438 \u043e\u0442\u043f\u0440\u0430\u0432\u043a\u0435 \u0441\u0442\u0440\u043e\u043a\u0438 \u0432 \u0444\u043e\u0440\u043c\u0430\u0442\u0435 JSON \u0442\u0440\u0435\u0431\u0443\u0435\u0442\u0441\u044f \u0434\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0435 \u044d\u043a\u0440\u0430\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0441\u0438\u043c\u0432\u043e\u043b\u043e\u0432: <code>\"111\"</code></p>"},{"location":"ru/docs/server/request/parameters/body/json/#_5","title":"\u041b\u0438\u0442\u0435\u0440\u0430\u043b\u044b","text":"<p><code>true</code> (\u043b\u043e\u0433\u0438\u0447\u0435\u0441\u043a\u043e\u0435 \u00ab\u0438\u0441\u0442\u0438\u043d\u0430\u00bb), <code>false</code> (\u043b\u043e\u0433\u0438\u0447\u0435\u0441\u043a\u043e\u0435 \u00ab\u043b\u043e\u0436\u044c\u00bb) \u0438 <code>null</code> (\u043e\u0442\u0441\u0443\u0442\u0441\u0442\u0432\u0438\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f). <pre><code>true\nfalse\nnull\n</code></pre> <pre><code>from rapidy.http import post, Body\n\n@post('/')\nasync def handler(\n    bool_data: bool = Body(),\n) -&gt; ...:\n</code></pre></p> \u041e\u0442\u043f\u0440\u0430\u0432\u043a\u0430 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e <code>curl</code> <p><pre><code>curl -X POST \\\n-H \"Content-Type: application/json\" \\\n-d 'true' \\\nhttp://127.0.0.1:8080\n</code></pre> <pre><code>curl -X POST \\\n-H \"Content-Type: application/json\" \\\n-d 'false' \\\nhttp://127.0.0.1:8080\n</code></pre> <pre><code>curl -X POST \\\n-H \"Content-Type: application/json\" \\\n-d 'null' \\\nhttp://127.0.0.1:8080\n</code></pre></p>"},{"location":"ru/docs/server/request/parameters/body/json/#_6","title":"\u0421\u0442\u0440\u043e\u043a\u0430","text":"<p><pre><code>\"SomeString\"\n</code></pre> <pre><code>from rapidy.http import post, Body\n\n@post('/')\nasync def handler(\n    string_data: str = Body(),\n) -&gt; ...:\n</code></pre></p> \u041e\u0442\u043f\u0440\u0430\u0432\u043a\u0430 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e <code>curl</code> <pre><code>curl -X POST \\\n-H \"Content-Type: application/json\" \\\n-d '\"SomeString\"' \\\nhttp://127.0.0.1:8080\n</code></pre> <p>\u041f\u0440\u0438 \u043e\u0442\u043f\u0440\u0430\u0432\u043a\u0435 \u0441\u0442\u0440\u043e\u043a\u0438 \u0432 \u0444\u043e\u0440\u043c\u0430\u0442\u0435 JSON \u0442\u0440\u0435\u0431\u0443\u0435\u0442\u0441\u044f \u044d\u043a\u0440\u0430\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0441\u0438\u043c\u0432\u043e\u043b\u043e\u0432: <code>\\\"SomeString\\\"</code></p>"},{"location":"ru/docs/server/request/parameters/body/json/#json-","title":"\u041a\u0430\u0441\u0442\u043e\u043c\u043d\u044b\u0439 JSON-\u0434\u0435\u043a\u043e\u0434\u0435\u0440","text":"<p>\u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e <code>Rapidy</code> \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442 <code>json.loads</code> \u0431\u0435\u0437 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u0432 \u0434\u043b\u044f \u0434\u0435\u043a\u043e\u0434\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u0432\u0445\u043e\u0434\u044f\u0449\u0435\u0433\u043e JSON.</p> <p>\u042d\u043a\u0432\u0438\u0432\u0430\u043b\u0435\u043d\u0442\u043d\u044b\u0435 \u043f\u0440\u0438\u043c\u0435\u0440\u044b:</p> <p><pre><code>from rapidy.http import post, Body\n\n@post('/')\nasync def handler(\n    data: str = Body(),\n) -&gt; ...:\n</code></pre> \u0438\u043b\u0438 <pre><code>import json\nfrom rapidy.http import post, Body\n\n@post('/')\nasync def handler(\n    data: str = Body(json_decoder=json.loads),\n) -&gt; ...:\n</code></pre></p> <p>\u0414\u043b\u044f \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f \u043a\u0430\u0441\u0442\u043e\u043c\u043d\u043e\u0433\u043e \u0434\u0435\u043a\u043e\u0434\u0435\u0440\u0430 \u043f\u0435\u0440\u0435\u0434\u0430\u0439\u0442\u0435 \u0432\u044b\u0437\u044b\u0432\u0430\u0435\u043c\u044b\u0439 \u043e\u0431\u044a\u0435\u043a\u0442, \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u044e\u0449\u0438\u0439 <code>str</code>, \u0432 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440 <code>json_decoder</code>.</p> <p>\u041e\u0436\u0438\u0434\u0430\u0435\u043c\u044b\u0439 \u0442\u0438\u043f: <code>Callable[[str], Any]</code></p> <p>\u041f\u0440\u0438\u043c\u0435\u0440 \u0441 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u043c \u0434\u0435\u043a\u043e\u0434\u0435\u0440\u043e\u043c:</p> <pre><code>from typing import Any\nfrom rapidy.http import post, Body\n\ndef custom_json_decoder(data: str) -&gt; ...:\n    ...\n\n@post('/')\nasync def handler(\n    data: Any = Body(json_decoder=custom_json_decoder),\n) -&gt; ...:\n</code></pre> <p>\u0415\u0441\u043b\u0438 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c <code>json.loads</code> \u0441 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0430\u043c\u0438, \u0432\u043e\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435\u0441\u044c <code>functools.partial</code>: <pre><code>import json\nfrom functools import partial\nfrom typing import Any, OrderedDict\nfrom rapidy.http import post, Body\n\ndecoder = partial(json.loads, object_pairs_hook=OrderedDict)\n\n@post('/')\nasync def handler(\n    data: Any = Body(json_decoder=decoder),\n) -&gt; ...:\n</code></pre></p>"},{"location":"ru/docs/server/request/parameters/body/json/#_7","title":"\u0418\u0437\u0432\u043b\u0435\u0447\u0435\u043d\u0438\u0435 \u0431\u0435\u0437 \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u0438","text":"<p>\u041e\u0442\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435 \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u0438 \u043d\u0435 \u0440\u0435\u043a\u043e\u043c\u0435\u043d\u0434\u0443\u0435\u0442\u0441\u044f.</p> <p>\u0415\u0441\u043b\u0438 \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u044f \u043e\u0442\u043a\u043b\u044e\u0447\u0435\u043d\u0430, \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440 \u0431\u0443\u0434\u0435\u0442 \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0442\u044c \u0434\u0430\u043d\u043d\u044b\u0435 \u0432 \u0442\u043e\u043c \u0432\u0438\u0434\u0435, \u0432 \u043a\u043e\u0442\u043e\u0440\u043e\u043c \u0438\u0445 \u0440\u0430\u0441\u043f\u0430\u043a\u043e\u0432\u0430\u043b JSON-\u0434\u0435\u043a\u043e\u0434\u0435\u0440.</p>"},{"location":"ru/docs/server/request/parameters/body/json/#_8","title":"\u0421\u043f\u043e\u0441\u043e\u0431\u044b \u043e\u0442\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u0438","text":""},{"location":"ru/docs/server/request/parameters/body/json/#_9","title":"\u042f\u0432\u043d\u043e\u0435 \u043e\u0442\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435","text":"<pre><code>from pydantic import BaseModel\nfrom rapidy.http import post, Body\n\nclass BodyData(BaseModel):\n    ...\n\n@post('/')\nasync def handler(\n    data: BodyData = Body(validate=False),\n) -&gt; ...:\n</code></pre>"},{"location":"ru/docs/server/request/parameters/body/json/#any","title":"\u0418\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 <code>Any</code>","text":"<pre><code>@post('/')\nasync def handler(\n    data: Any = Body(),\n) -&gt; ...:\n</code></pre>"},{"location":"ru/docs/server/request/parameters/body/json/#_10","title":"\u041e\u0442\u0441\u0443\u0442\u0441\u0442\u0432\u0438\u0435 \u0430\u043d\u043d\u043e\u0442\u0430\u0446\u0438\u0438 \u0442\u0438\u043f\u0430","text":"<pre><code>@post('/')\nasync def handler(\n    data=Body(),\n) -&gt; ...:\n</code></pre>"},{"location":"ru/docs/server/request/parameters/body/json/#_11","title":"\u0417\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e","text":"<p>\u0415\u0441\u043b\u0438 HTTP-\u0437\u0430\u043f\u0440\u043e\u0441 \u043d\u0435 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u0442\u0435\u043b\u0430, \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440 \u043f\u043e\u043b\u0443\u0447\u0438\u0442 \u0443\u043a\u0430\u0437\u0430\u043d\u043d\u043e\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e (\u0435\u0441\u043b\u0438 \u043e\u043d\u043e \u0437\u0430\u0434\u0430\u043d\u043e).</p>"},{"location":"ru/docs/server/request/parameters/body/json/#_12","title":"\u041f\u0440\u0438\u043c\u0435\u0440\u044b \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f","text":""},{"location":"ru/docs/server/request/parameters/body/json/#_13","title":"\u0423\u043a\u0430\u0437\u0430\u043d\u043e \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e","text":"<pre><code>from pydantic import BaseModel\nfrom rapidy.http import post, Body\n\nclass BodyData(BaseModel):\n    ...\n\n@post('/')\nasync def handler(\n    data: BodyData = Body('some_data'),\n    # or\n    data: BodyData = Body(default_factory=lambda: 'some_data'),\n) -&gt; ...:\n</code></pre>"},{"location":"ru/docs/server/request/parameters/body/json/#_14","title":"\u041e\u043f\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u043e\u0435 \u0442\u0435\u043b\u043e \u0437\u0430\u043f\u0440\u043e\u0441\u0430","text":"<pre><code>from pydantic import BaseModel\nfrom rapidy.http import post, Body\n\nclass BodyData(BaseModel):\n    ...\n\n@post('/')\nasync def handler(\n    data: BodyData | None = Body(),\n    # or\n    data: Optional[BodyData] = Body(),\n    # or\n    data: Union[BodyData, None] = Body(),\n) -&gt; ...:\n</code></pre>"},{"location":"ru/docs/server/request/parameters/body/json/#_15","title":"\u0418\u0437\u0432\u043b\u0435\u0447\u0435\u043d\u0438\u0435 \u0441\u044b\u0440\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445","text":"<p><code>Rapidy</code> \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442 \u043c\u0435\u0442\u043e\u0434 <code>json</code> \u043e\u0431\u044a\u0435\u043a\u0442\u0430 <code>Request</code> \u0434\u043b\u044f \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u044f \u0434\u0430\u043d\u043d\u044b\u0445 \u0438 \u043f\u0435\u0440\u0435\u0434\u0430\u0435\u0442 \u0438\u0445 \u0432 <code>Pydantic</code> \u0434\u043b\u044f \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u0438.</p> <p>\u0415\u0441\u043b\u0438 \u0434\u0430\u043d\u043d\u044b\u0435 \u043d\u0435 \u0443\u0434\u0430\u0441\u0442\u0441\u044f \u0438\u0437\u0432\u043b\u0435\u0447\u044c \u043a\u0430\u043a JSON, \u0431\u0443\u0434\u0435\u0442 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0435\u043d\u0430 \u043e\u0448\u0438\u0431\u043a\u0430 <code>ExtractError</code>: <pre><code>{\n    \"errors\": [\n        {\n            \"type\": \"ExtractError\",\n            \"loc\": [\n                \"body\"\n            ],\n            \"msg\": \"Failed to extract body data as Json: &lt;error_description&gt;\"\n        }\n    ]\n}\n</code></pre></p> \u041a\u0430\u043a \u043f\u0440\u043e\u0438\u0441\u0445\u043e\u0434\u0438\u0442 \u0438\u0437\u0432\u043b\u0435\u0447\u0435\u043d\u0438\u0435 \u0432\u043d\u0443\u0442\u0440\u0438 <code>Rapidy</code> <pre><code>async def extract_body_json(request: Request, body_field_info: Body) -&gt; Optional[DictStrAny]:\n    if not request.body_exists:\n        return None\n\n    return await request.json(loads=body_field_info.json_decoder)\n</code></pre> <p><code>Rapidy</code> \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442 \u0432\u0441\u0442\u0440\u043e\u0435\u043d\u043d\u044b\u0435 \u043c\u0435\u0445\u0430\u043d\u0438\u0437\u043c\u044b <code>aiohttp</code></p> <p>\u041f\u043e\u0434\u0440\u043e\u0431\u043d\u0435\u0435 \u043e\u0431 \u043e\u0431\u044a\u0435\u043a\u0442\u0435 <code>aiohttp.Request</code> \u0438 \u043c\u0435\u0442\u043e\u0434\u0430\u0445 \u0438\u0437\u0432\u043b\u0435\u0447\u0435\u043d\u0438\u044f \u0434\u0430\u043d\u043d\u044b\u0445 \u043c\u043e\u0436\u043d\u043e \u0443\u0437\u043d\u0430\u0442\u044c \u0437\u0434\u0435\u0441\u044c.</p> <p>\u041e\u0434\u043d\u0430\u043a\u043e \u0435\u0441\u043b\u0438 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440 \u0430\u043d\u043d\u043e\u0442\u0438\u0440\u043e\u0432\u0430\u043d \u043a\u0430\u043a <code>bytes</code> \u0438\u043b\u0438 <code>StreamReader</code>, \u0434\u0430\u043d\u043d\u044b\u0435 \u0438\u0437\u0432\u043b\u0435\u043a\u0430\u044e\u0442\u0441\u044f \u0438\u043d\u0430\u0447\u0435.</p> <p>\u041f\u043e\u0434\u0440\u043e\u0431\u043d\u0435\u0435 \u043e\u0431 \u043e\u0431\u044a\u0435\u043a\u0442\u0435 <code>StreamReader</code> \u043c\u043e\u0436\u043d\u043e \u0443\u0437\u043d\u0430\u0442\u044c \u0437\u0434\u0435\u0441\u044c.</p>"},{"location":"ru/docs/server/request/parameters/body/json/#bytes","title":"<code>bytes</code>","text":"<pre><code>from rapidy.http import post, Body\n\n@post('/')\nasync def handler(\n    user_data: bytes = Body(),\n    # also you can use pydantic validation\n    user_data: bytes = Body(min_length=1),\n) -&gt; ...:\n</code></pre> \u0412\u043d\u0443\u0442\u0440\u0435\u043d\u043d\u0438\u0439 \u043a\u043e\u0434 <code>Rapidy</code> <pre><code>async def extract_body_bytes(request: Request) -&gt; Optional[bytes]:\n    if not request.body_exists:\n        return None\n\n    return await request.read()\n</code></pre>"},{"location":"ru/docs/server/request/parameters/body/json/#streamreader","title":"<code>StreamReader</code>","text":"<pre><code>from rapidy import StreamReader\nfrom rapidy.http import post, Body\n\n@post('/')\nasync def handler(\n    user_data: StreamReader = Body(),\n) -&gt; ...:\n</code></pre> \u0412\u043d\u0443\u0442\u0440\u0435\u043d\u043d\u0438\u0439 \u043a\u043e\u0434 <code>Rapidy</code> <pre><code>async def extract_body_stream(request: Request) -&gt; Optional[StreamReader]:\n    if not request.body_exists:\n        return None\n\n    return request.content\n</code></pre> <p>\u0412\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u044f <code>Pydantic</code> \u0434\u043b\u044f <code>StreamReader</code> \u043d\u0435 \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u0435\u0442\u0441\u044f.</p> \u041d\u0435\u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e \u0437\u0430\u0434\u0430\u0442\u044c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e \u0434\u043b\u044f <code>StreamReader</code>. <p>\u041f\u0440\u0438 \u043f\u043e\u043f\u044b\u0442\u043a\u0435 \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u044c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e \u0434\u043b\u044f <code>Body</code> \u0441 \u0430\u043d\u043d\u043e\u0442\u0430\u0446\u0438\u0435\u0439 <code>StreamReader</code> \u0447\u0435\u0440\u0435\u0437 <code>default</code> \u0438\u043b\u0438 <code>default_factory</code> \u0431\u0443\u0434\u0435\u0442 \u043f\u043e\u0434\u043d\u044f\u0442\u0430 \u043e\u0448\u0438\u0431\u043a\u0430 <code>ParameterCannotUseDefaultError</code>. <pre><code>from rapidy import StreamReader\nfrom rapidy.http import post, Body\n\n@post('/')\nasync def handler(\n    user_data: StreamReader = Body(default='SomeDefault'),\n) -&gt; ...:\n</code></pre> <pre><code>------------------------------\nHandler attribute with Type `Body` cannot have a default value.\n\nHandler path: `&lt;full_path&gt;/main.py`\nHandler name: `handler`\nAttribute name: `data`\n------------------------------\n</code></pre></p>"},{"location":"ru/docs/server/request/parameters/body/multipart/","title":"Multipart Form Data","text":"<p>\u0427\u0442\u0435\u043d\u0438\u0435 \u0442\u0435\u043b\u0430 \u0437\u0430\u043f\u0440\u043e\u0441\u0430 \u043a\u0430\u043a <code>multipart/form-data</code>.</p>"},{"location":"ru/docs/server/request/parameters/body/multipart/#_1","title":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435","text":"<p>Form Data (MIME-type: <code>multipart/form-data</code>) \u2014 \u043e\u0434\u0438\u043d \u0438\u0437 \u043d\u0430\u0438\u0431\u043e\u043b\u0435\u0435 \u0447\u0430\u0441\u0442\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c\u044b\u0445 \u0442\u0438\u043f\u043e\u0432 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u043c\u043e\u0433\u043e \u0434\u043b\u044f \u043f\u0435\u0440\u0435\u0434\u0430\u0447\u0438 \u0434\u0432\u043e\u0438\u0447\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445 \u043d\u0430 \u0441\u0435\u0440\u0432\u0435\u0440.</p> <p>\u0424\u043e\u0440\u043c\u0430\u0442 multipart \u043e\u0437\u043d\u0430\u0447\u0430\u0435\u0442, \u0447\u0442\u043e \u0434\u0430\u043d\u043d\u044b\u0435 \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u044e\u0442\u0441\u044f \u043d\u0430 \u0441\u0435\u0440\u0432\u0435\u0440 \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u044b\u043c\u0438 \u0447\u0430\u0441\u0442\u044f\u043c\u0438. \u041a\u0430\u0436\u0434\u0430\u044f \u0447\u0430\u0441\u0442\u044c \u043c\u043e\u0436\u0435\u0442 \u0438\u043c\u0435\u0442\u044c \u0441\u0432\u043e\u0439 \u0442\u0438\u043f \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u043c\u043e\u0433\u043e, \u0438\u043c\u044f \u0444\u0430\u0439\u043b\u0430 \u0438 \u0441\u0430\u043c\u0438 \u0434\u0430\u043d\u043d\u044b\u0435. \u0420\u0430\u0437\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u0434\u0430\u043d\u043d\u044b\u0445 \u043f\u0440\u043e\u0438\u0441\u0445\u043e\u0434\u0438\u0442 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u0433\u0440\u0430\u043d\u0438\u0447\u043d\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0438.</p> <pre><code>from pydantic import BaseModel, ConfigDict\nfrom rapidy.http import post, Body, ContentType, FileField\n\nclass UserData(BaseModel):\n    model_config = ConfigDict(arbitrary_types_allowed=True)\n\n    username: str\n    password: str\n    image: FileField\n\n@post('/')\nasync def handler(\n    user_data: UserData = Body(content_type=ContentType.m_part_form_data),\n    # or\n    user_data: UserData = Body(content_type='multipart/form-data'),\n) -&gt; ...:\n</code></pre> <p>\u041f\u0440\u0438\u043c\u0435\u0440 \u0434\u0430\u043d\u043d\u044b\u0445</p> <pre><code>POST /  HTTP/1.1\nHost: localhost:8080\nContent-Type: multipart/form-data; boundary=---WD9146A\nContent-Length: ...\n\n---WD9146A\nContent-Disposition: form-data; name=\"username\"\n\nUser\n---WD9146A\nContent-Disposition: form-data; name=\"password\"\n\nmyAwesomePass\n---WD9146A\nContent-Disposition: form-data; name=\"image\"; filename=\"image.png\";\nContent-Type: image/png\n\n&lt;... binary data ...&gt;\n---WD9146A\n</code></pre> \u041e\u0442\u043f\u0440\u0430\u0432\u043a\u0430 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e <code>curl</code> <pre><code>curl -X POST \\\n-H \"Content-Type: multipart/form-data\" \\\n-F username=User \\\n-F password=myAwesomePass \\\nhttp://127.0.0.1:8080\n</code></pre>"},{"location":"ru/docs/server/request/parameters/body/multipart/#_2","title":"\u0418\u0437\u0432\u043b\u0435\u0447\u0435\u043d\u0438\u0435 \u0431\u0435\u0437 \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u0438","text":"<p>\u041e\u0442\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435 \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u0438 \u043d\u0435 \u0440\u0435\u043a\u043e\u043c\u0435\u043d\u0434\u0443\u0435\u0442\u0441\u044f.</p> <p>\u0415\u0441\u043b\u0438 \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u044f \u043e\u0442\u043a\u043b\u044e\u0447\u0435\u043d\u0430, \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440 \u0431\u0443\u0434\u0435\u0442 \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0442\u044c \u0431\u0430\u0437\u043e\u0432\u0443\u044e \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0443 <code>aiohttp</code>:</p> <ul> <li><code>Body(content_type=ContentType.m_part_form_data) \u2192 MultiDictProxy[Union[str, bytes, FileField]]</code></li> </ul>"},{"location":"ru/docs/server/request/parameters/body/multipart/#_3","title":"\u0421\u043f\u043e\u0441\u043e\u0431\u044b \u043e\u0442\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u0438","text":""},{"location":"ru/docs/server/request/parameters/body/multipart/#_4","title":"\u042f\u0432\u043d\u043e\u0435 \u043e\u0442\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435","text":"<pre><code>from pydantic import BaseModel\nfrom rapidy.http import post, Body, ContentType\n\nclass BodyData(BaseModel):\n    ...\n\n@post('/')\nasync def handler(\n    data: BodyData = Body(validate=False, content_type=ContentType.m_part_form_data),\n) -&gt; ...:\n</code></pre>"},{"location":"ru/docs/server/request/parameters/body/multipart/#any","title":"\u0418\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 <code>Any</code>","text":"<pre><code>@post('/')\nasync def handler(\n    data: Any = Body(content_type=ContentType.m_part_form_data),\n) -&gt; ...:\n</code></pre>"},{"location":"ru/docs/server/request/parameters/body/multipart/#_5","title":"\u041e\u0442\u0441\u0443\u0442\u0441\u0442\u0432\u0438\u0435 \u0430\u043d\u043d\u043e\u0442\u0430\u0446\u0438\u0438 \u0442\u0438\u043f\u0430","text":"<p>\u0415\u0441\u043b\u0438 \u043d\u0435 \u0443\u043a\u0430\u0437\u044b\u0432\u0430\u0442\u044c \u0442\u0438\u043f, \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e \u0431\u0443\u0434\u0435\u0442 \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u043b\u0435\u043d <code>Any</code>. <pre><code>@post('/')\nasync def handler(\n    data=Body(content_type=ContentType.m_part_form_data),\n) -&gt; ...:\n</code></pre></p>"},{"location":"ru/docs/server/request/parameters/body/multipart/#_6","title":"\u0417\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e","text":"<p>\u0415\u0441\u043b\u0438 HTTP-\u0437\u0430\u043f\u0440\u043e\u0441 \u043d\u0435 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u0442\u0435\u043b\u0430, \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440 \u043f\u043e\u043b\u0443\u0447\u0438\u0442 \u0443\u043a\u0430\u0437\u0430\u043d\u043d\u043e\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e (\u0435\u0441\u043b\u0438 \u043e\u043d\u043e \u0437\u0430\u0434\u0430\u043d\u043e).</p>"},{"location":"ru/docs/server/request/parameters/body/multipart/#_7","title":"\u041f\u0440\u0438\u043c\u0435\u0440\u044b \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f","text":""},{"location":"ru/docs/server/request/parameters/body/multipart/#_8","title":"\u0423\u043a\u0430\u0437\u0430\u043d\u043e \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e","text":"<pre><code>from pydantic import BaseModel\nfrom rapidy.http import post, Body, ContentType\n\nclass BodyData(BaseModel):\n    ...\n\n@post('/')\nasync def handler(\n    data: BodyData = Body('some_data', content_type=ContentType.m_part_form_data),\n    # or\n    data: BodyData = Body(default_factory=lambda: 'some_data', content_type=ContentType.m_part_form_data),\n) -&gt; ...:\n</code></pre>"},{"location":"ru/docs/server/request/parameters/body/multipart/#_9","title":"\u041e\u043f\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u043e\u0435 \u0442\u0435\u043b\u043e \u0437\u0430\u043f\u0440\u043e\u0441\u0430","text":"<pre><code>from pydantic import BaseModel\nfrom rapidy.http import post, Body, ContentType\n\nclass BodyData(BaseModel):\n    ...\n\n@post('/')\nasync def handler(\n    data: BodyData | None = Body(content_type=ContentType.m_part_form_data),\n    # or\n    data: Optional[BodyData] = Body(content_type=ContentType.m_part_form_data),\n    # or\n    data: Union[BodyData, None] = Body(content_type=ContentType.m_part_form_data),\n) -&gt; ...:\n</code></pre>"},{"location":"ru/docs/server/request/parameters/body/multipart/#_10","title":"\u0418\u0437\u0432\u043b\u0435\u0447\u0435\u043d\u0438\u0435 \u0441\u044b\u0440\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445","text":"<p><code>Rapidy</code> \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442 \u043c\u0435\u0442\u043e\u0434 <code>post</code> \u043e\u0431\u044a\u0435\u043a\u0442\u0430 <code>Request</code> \u0434\u043b\u044f \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u044f \u0434\u0430\u043d\u043d\u044b\u0445 \u0438 \u043f\u0435\u0440\u0435\u0434\u0430\u0435\u0442 \u0438\u0445 \u0432 <code>Pydantic</code> \u0434\u043b\u044f \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u0438.</p> \u041a\u0430\u043a \u043f\u0440\u043e\u0438\u0441\u0445\u043e\u0434\u0438\u0442 \u0438\u0437\u0432\u043b\u0435\u0447\u0435\u043d\u0438\u0435 \u0432\u043d\u0443\u0442\u0440\u0438 <code>Rapidy</code> <pre><code>async def extract_post_data(request: Request) -&gt; Optional[MultiDictProxy[Union[str, bytes, FileField]]]:\n    if not request.body_exists:\n        return None\n\n    return await request.post()\n</code></pre> <p><code>Rapidy</code> \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442 \u0432\u0441\u0442\u0440\u043e\u0435\u043d\u043d\u044b\u0435 \u043c\u0435\u0445\u0430\u043d\u0438\u0437\u043c\u044b <code>aiohttp</code></p> <p>\u041f\u043e\u0434\u0440\u043e\u0431\u043d\u0435\u0435 \u043e\u0431 \u043e\u0431\u044a\u0435\u043a\u0442\u0435 <code>aiohttp.Request</code> \u0438 \u043c\u0435\u0442\u043e\u0434\u0430\u0445 \u0438\u0437\u0432\u043b\u0435\u0447\u0435\u043d\u0438\u044f \u0434\u0430\u043d\u043d\u044b\u0445 \u043c\u043e\u0436\u043d\u043e \u0443\u0437\u043d\u0430\u0442\u044c \u0437\u0434\u0435\u0441\u044c.</p> <p><code>x-www-form-urlencoded</code> \u0438 <code>multipart/form-data</code> \u043e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u044e\u0442\u0441\u044f \u043e\u0434\u0438\u043d\u0430\u043a\u043e\u0432\u043e.</p> <p>\u041e\u0431\u0430 \u044d\u0442\u0438\u0445 \u0442\u0438\u043f\u0430 \u0434\u0430\u043d\u043d\u044b\u0445 \u0438\u0437\u0432\u043b\u0435\u043a\u0430\u044e\u0442\u0441\u044f \u0447\u0435\u0440\u0435\u0437 \u043c\u0435\u0442\u043e\u0434 <code>post</code> \u043e\u0431\u044a\u0435\u043a\u0442\u0430 <code>Request</code>. \u042d\u0442\u043e \u043e\u0441\u043e\u0431\u0435\u043d\u043d\u043e\u0441\u0442\u044c \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 <code>aiohttp</code>.</p> <p>\u041e\u0434\u043d\u0430\u043a\u043e \u0435\u0441\u043b\u0438 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440 \u0430\u043d\u043d\u043e\u0442\u0438\u0440\u043e\u0432\u0430\u043d \u043a\u0430\u043a <code>bytes</code> \u0438\u043b\u0438 <code>StreamReader</code>, \u0434\u0430\u043d\u043d\u044b\u0435 \u0438\u0437\u0432\u043b\u0435\u043a\u0430\u044e\u0442\u0441\u044f \u0438\u043d\u0430\u0447\u0435.</p> <p>\u041f\u043e\u0434\u0440\u043e\u0431\u043d\u0435\u0435 \u043e\u0431 \u043e\u0431\u044a\u0435\u043a\u0442\u0435 <code>StreamReader</code> \u043c\u043e\u0436\u043d\u043e \u0443\u0437\u043d\u0430\u0442\u044c \u0437\u0434\u0435\u0441\u044c.</p>"},{"location":"ru/docs/server/request/parameters/body/multipart/#bytes","title":"<code>bytes</code>","text":"<pre><code>from rapidy.http import post, Body, ContentType\n\n@post('/')\nasync def handler(\n    user_data: bytes = Body(content_type=ContentType.m_part_form_data),\n    # also you can use pydantic validation\n    user_data: bytes = Body(content_type=ContentType.m_part_form_data, min_length=1),\n) -&gt; ...:\n</code></pre> \u0412\u043d\u0443\u0442\u0440\u0435\u043d\u043d\u0438\u0439 \u043a\u043e\u0434 <code>Rapidy</code> <pre><code>async def extract_body_bytes(request: Request) -&gt; Optional[bytes]:\n    if not request.body_exists:\n        return None\n\n    return await request.read()\n</code></pre>"},{"location":"ru/docs/server/request/parameters/body/multipart/#streamreader","title":"<code>StreamReader</code>","text":"<pre><code>from rapidy import StreamReader\nfrom rapidy.http import post, Body, ContentType\n\n@post('/')\nasync def handler(\n    user_data: StreamReader = Body(content_type=ContentType.m_part_form_data),\n) -&gt; ...:\n</code></pre> \u0412\u043d\u0443\u0442\u0440\u0435\u043d\u043d\u0438\u0439 \u043a\u043e\u0434 <code>Rapidy</code> <pre><code>async def extract_body_stream(request: Request) -&gt; Optional[StreamReader]:\n    if not request.body_exists:\n        return None\n\n    return request.content\n</code></pre> <p>\u0412\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u044f <code>Pydantic</code> \u0434\u043b\u044f <code>StreamReader</code> \u043d\u0435 \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u0435\u0442\u0441\u044f.</p> \u0417\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e \u0434\u043b\u044f <code>StreamReader</code> \u0437\u0430\u0434\u0430\u0442\u044c \u043d\u0435\u043b\u044c\u0437\u044f. <p>\u0415\u0441\u043b\u0438 \u043f\u043e\u043f\u044b\u0442\u0430\u0442\u044c\u0441\u044f \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u044c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e \u0434\u043b\u044f <code>Body</code> \u0441 \u0430\u043d\u043d\u043e\u0442\u0430\u0446\u0438\u0435\u0439 <code>StreamReader</code> \u0447\u0435\u0440\u0435\u0437 <code>default</code> \u0438\u043b\u0438 <code>default_factory</code>, \u0431\u0443\u0434\u0435\u0442 \u0432\u044b\u0437\u0432\u0430\u043d\u0430 \u043e\u0448\u0438\u0431\u043a\u0430 <code>ParameterCannotUseDefaultError</code>.</p> <p><pre><code>from rapidy import StreamReader\nfrom rapidy.http import post, Body, ContentType\n\n@post('/')\nasync def handler(\n    user_data: StreamReader = Body(default='SomeDefault', content_type=ContentType.m_part_form_data),\n) -&gt; ...:\n</code></pre> <pre><code>------------------------------\nHandler attribute with Type `Body` cannot have a default value.\n\nHandler path: `&lt;full_path&gt;/main.py`\nHandler name: `handler`\nAttribute name: `data`\n------------------------------\n</code></pre></p>"},{"location":"ru/docs/server/request/parameters/body/text/","title":"Text","text":"<p>\u0427\u0442\u0435\u043d\u0438\u0435 \u0442\u0435\u043b\u0430 \u0437\u0430\u043f\u0440\u043e\u0441\u0430 \u0432 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u0441\u0442\u0440\u043e\u043a\u0438.</p>"},{"location":"ru/docs/server/request/parameters/body/text/#_1","title":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435","text":"<p>Text (MIME-type: <code>text/*</code>) \u2014 \u044d\u0442\u043e \u0442\u0438\u043f \u0434\u0430\u043d\u043d\u044b\u0445, \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u044f\u044e\u0449\u0438\u0439 \u0441\u043e\u0431\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0443.</p> <p><code>Rapidy</code> \u0440\u0430\u0431\u043e\u0442\u0430\u0435\u0442 \u0441 \u043b\u044e\u0431\u044b\u043c \u0442\u0435\u043a\u0441\u0442\u043e\u043c, \u043d\u0435\u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e \u043e\u0442 \u0435\u0433\u043e <code>subtype</code>.</p> <p>\u041d\u0430\u043f\u0440\u0438\u043c\u0435\u0440: <code>text/plain</code>, <code>text/html</code>, <code>text/css</code>, <code>text/xml</code>, <code>...</code>, <code>text/*</code>.</p> <p>\u041e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u043a\u043e\u0434\u0438\u0440\u043e\u0432\u043a\u0438</p> <p>\u0414\u043b\u044f \u0434\u0435\u043a\u043e\u0434\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u0442\u0435\u043a\u0441\u0442\u0430 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440 <code>charset</code> \u0437\u0430\u0433\u043e\u043b\u043e\u0432\u043a\u0430 <code>Content-Type</code>. \u0415\u0441\u043b\u0438 <code>charset</code> \u043d\u0435 \u0443\u043a\u0430\u0437\u0430\u043d \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u043c, \u0442\u0435\u043a\u0441\u0442 \u0431\u0443\u0434\u0435\u0442 \u0434\u0435\u043a\u043e\u0434\u0438\u0440\u043e\u0432\u0430\u043d \u0432 \u043a\u043e\u0434\u0438\u0440\u043e\u0432\u043a\u0435 <code>utf-8</code>.</p> <pre><code>from rapidy.http import post, Body, ContentType\n\n@post('/')\nasync def handler(\n    text_data: str = Body(content_type=ContentType.text_plain),\n    # or\n    text_data: str = Body(content_type=ContentType.text_html),\n    # or any mime-type with type `text`\n    text_data: str = Body(content_type=ContentType.text_any),\n) -&gt; ...:\n</code></pre> \u041e\u0442\u043f\u0440\u0430\u0432\u043a\u0430 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e <code>curl</code> <pre><code>curl -X POST \\\n-H \"Content-Type: text/plain\" \\\n-d 'SomeString' \\\nhttp://127.0.0.1:8080\n</code></pre>"},{"location":"ru/docs/server/request/parameters/body/text/#_2","title":"\u0418\u0437\u0432\u043b\u0435\u0447\u0435\u043d\u0438\u0435 \u0431\u0435\u0437 \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u0438","text":"<p>\u041e\u0442\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435 \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u0438 \u043d\u0435 \u0440\u0435\u043a\u043e\u043c\u0435\u043d\u0434\u0443\u0435\u0442\u0441\u044f.</p> <p>\u0415\u0441\u043b\u0438 \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u044f \u043e\u0442\u043a\u043b\u044e\u0447\u0435\u043d\u0430, \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440 \u0431\u0443\u0434\u0435\u0442 \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0442\u044c \u0431\u0430\u0437\u043e\u0432\u0443\u044e \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0443 <code>aiohttp</code>:</p> <ul> <li><code>Body(content_type=ContentType.text_plain)</code> \u2192 <code>str</code></li> </ul>"},{"location":"ru/docs/server/request/parameters/body/text/#_3","title":"\u0421\u043f\u043e\u0441\u043e\u0431\u044b \u043e\u0442\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u0438","text":""},{"location":"ru/docs/server/request/parameters/body/text/#_4","title":"\u042f\u0432\u043d\u043e\u0435 \u043e\u0442\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435","text":"<pre><code>from enum import Enum\nfrom rapidy.http import post, Body, ContentType\n\nclass DataEnum(Enum):\n    test = 'test'\n\n@post('/')\nasync def handler(\n    data: DataEnum = Body(validate=False, content_type=ContentType.text_plain),\n) -&gt; ...:\n</code></pre>"},{"location":"ru/docs/server/request/parameters/body/text/#any","title":"\u0418\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 <code>Any</code>","text":"<pre><code>@post('/')\nasync def handler(\n    data: Any = Body(content_type=ContentType.text_plain),\n) -&gt; ...:\n</code></pre>"},{"location":"ru/docs/server/request/parameters/body/text/#_5","title":"\u041e\u0442\u0441\u0443\u0442\u0441\u0442\u0432\u0438\u0435 \u0430\u043d\u043d\u043e\u0442\u0430\u0446\u0438\u0438 \u0442\u0438\u043f\u0430","text":"<pre><code>@post('/')\nasync def handler(\n    data = Body(content_type=ContentType.text_plain),\n) -&gt; ...:\n</code></pre>"},{"location":"ru/docs/server/request/parameters/body/text/#_6","title":"\u0417\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e","text":"<p>\u0415\u0441\u043b\u0438 HTTP-\u0437\u0430\u043f\u0440\u043e\u0441 \u043d\u0435 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u0442\u0435\u043b\u0430, \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440 \u043f\u043e\u043b\u0443\u0447\u0438\u0442 \u0443\u043a\u0430\u0437\u0430\u043d\u043d\u043e\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e (\u0435\u0441\u043b\u0438 \u043e\u043d\u043e \u0437\u0430\u0434\u0430\u043d\u043e).</p>"},{"location":"ru/docs/server/request/parameters/body/text/#_7","title":"\u041f\u0440\u0438\u043c\u0435\u0440\u044b \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f","text":""},{"location":"ru/docs/server/request/parameters/body/text/#_8","title":"\u0423\u043a\u0430\u0437\u0430\u043d\u043e \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e","text":"<pre><code>from enum import Enum\nfrom rapidy.http import post, Body, ContentType\n\nclass DataEnum(Enum):\n    test = 'test'\n\n@post('/')\nasync def handler(\n    data: DataEnum = Body('some_data', content_type=ContentType.text_plain),\n    # or\n    data: DataEnum = Body(default_factory=lambda: 'some_data', content_type=ContentType.text_plain),\n) -&gt; ...:\n</code></pre>"},{"location":"ru/docs/server/request/parameters/body/text/#_9","title":"\u041e\u043f\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u043e\u0435 \u0442\u0435\u043b\u043e \u0437\u0430\u043f\u0440\u043e\u0441\u0430","text":"<pre><code>from enum import Enum\nfrom rapidy.http import post, Body, ContentType\n\nclass DataEnum(Enum):\n    test = 'test'\n\n@post('/')\nasync def handler(\n    data: DataEnum | None = Body(content_type=ContentType.text_plain),\n    # or\n    data: Optional[DataEnum] = Body(content_type=ContentType.text_plain),\n    # or\n    data: Union[DataEnum, None] = Body(content_type=ContentType.text_plain),\n) -&gt; ...:\n</code></pre>"},{"location":"ru/docs/server/request/parameters/body/text/#_10","title":"\u0418\u0437\u0432\u043b\u0435\u0447\u0435\u043d\u0438\u0435 \u0441\u044b\u0440\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445","text":"<p><code>Rapidy</code> \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442 \u043c\u0435\u0442\u043e\u0434 <code>text</code> \u043e\u0431\u044a\u0435\u043a\u0442\u0430 <code>Request</code> \u0434\u043b\u044f \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u044f \u0434\u0430\u043d\u043d\u044b\u0445 \u0438 \u043f\u0435\u0440\u0435\u0434\u0430\u0435\u0442 \u0438\u0445 \u0432 <code>Pydantic</code> \u0434\u043b\u044f \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u0438.</p> \u041a\u0430\u043a \u043f\u0440\u043e\u0438\u0441\u0445\u043e\u0434\u0438\u0442 \u0438\u0437\u0432\u043b\u0435\u0447\u0435\u043d\u0438\u0435 \u0432\u043d\u0443\u0442\u0440\u0438 <code>Rapidy</code> <pre><code>async def extract_body_text(request: Request) -&gt; Optional[str]:\n    if not request.body_exists:\n        return None\n\n    return await request.text()\n</code></pre> <p><code>Rapidy</code> \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442 \u0432\u0441\u0442\u0440\u043e\u0435\u043d\u043d\u044b\u0435 \u043c\u0435\u0445\u0430\u043d\u0438\u0437\u043c\u044b <code>aiohttp</code></p> <p>\u041f\u043e\u0434\u0440\u043e\u0431\u043d\u0435\u0435 \u043e\u0431 \u043e\u0431\u044a\u0435\u043a\u0442\u0435 <code>aiohttp.Request</code> \u0438 \u043c\u0435\u0442\u043e\u0434\u0430\u0445 \u0438\u0437\u0432\u043b\u0435\u0447\u0435\u043d\u0438\u044f \u0434\u0430\u043d\u043d\u044b\u0445 \u043c\u043e\u0436\u043d\u043e \u0443\u0437\u043d\u0430\u0442\u044c \u0437\u0434\u0435\u0441\u044c.</p> <p>\u041e\u0434\u043d\u0430\u043a\u043e \u0435\u0441\u043b\u0438 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440 \u0430\u043d\u043d\u043e\u0442\u0438\u0440\u043e\u0432\u0430\u043d \u043a\u0430\u043a <code>bytes</code> \u0438\u043b\u0438 <code>StreamReader</code>, \u0434\u0430\u043d\u043d\u044b\u0435 \u0438\u0437\u0432\u043b\u0435\u043a\u0430\u044e\u0442\u0441\u044f \u0438\u043d\u0430\u0447\u0435.</p> <p>\u041f\u043e\u0434\u0440\u043e\u0431\u043d\u0435\u0435 \u043e\u0431 \u043e\u0431\u044a\u0435\u043a\u0442\u0435 <code>StreamReader</code> \u043c\u043e\u0436\u043d\u043e \u0443\u0437\u043d\u0430\u0442\u044c \u0437\u0434\u0435\u0441\u044c.</p>"},{"location":"ru/docs/server/request/parameters/body/text/#bytes","title":"<code>bytes</code>","text":"<pre><code>@post('/')\nasync def handler(\n    user_data: bytes = Body(content_type=ContentType.text_plain),\n    # also you can use pydantic validation\n    user_data: bytes = Body(content_type=ContentType.text_plain, min_length=1),\n) -&gt; ...:\n</code></pre> \u0412\u043d\u0443\u0442\u0440\u0435\u043d\u043d\u0438\u0439 \u043a\u043e\u0434 <code>Rapidy</code> <pre><code>async def extract_body_bytes(request: Request) -&gt; Optional[bytes]:\n    if not request.body_exists:\n        return None\n\n    return await request.read()\n</code></pre>"},{"location":"ru/docs/server/request/parameters/body/text/#streamreader","title":"<code>StreamReader</code>","text":"<pre><code>from rapidy import StreamReader\n\n@post('/')\nasync def handler(\n    user_data: StreamReader = Body(content_type=ContentType.text_plain),\n) -&gt; ...:\n</code></pre> \u0412\u043d\u0443\u0442\u0440\u0435\u043d\u043d\u0438\u0439 \u043a\u043e\u0434 <code>Rapidy</code> <pre><code>async def extract_body_stream(request: Request) -&gt; Optional[StreamReader]:\n    if not request.body_exists:\n        return None\n\n    return request.content\n</code></pre> <p>\u0412\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u044f <code>Pydantic</code> \u0434\u043b\u044f <code>StreamReader</code> \u043d\u0435 \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u0435\u0442\u0441\u044f.</p> \u0417\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e \u0434\u043b\u044f <code>StreamReader</code> \u0437\u0430\u0434\u0430\u0442\u044c \u043d\u0435\u043b\u044c\u0437\u044f. <p>\u0415\u0441\u043b\u0438 \u043f\u043e\u043f\u044b\u0442\u0430\u0442\u044c\u0441\u044f \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u044c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e \u0434\u043b\u044f <code>Body</code> \u0441 \u0430\u043d\u043d\u043e\u0442\u0430\u0446\u0438\u0435\u0439 <code>StreamReader</code> \u0447\u0435\u0440\u0435\u0437 <code>default</code> \u0438\u043b\u0438 <code>default_factory</code>, \u0431\u0443\u0434\u0435\u0442 \u0432\u044b\u0437\u0432\u0430\u043d\u0430 \u043e\u0448\u0438\u0431\u043a\u0430 <code>ParameterCannotUseDefaultError</code>. <pre><code>from rapidy import StreamReader\n\n@post('/')\nasync def handler(\n    user_data: StreamReader = Body(default='SomeDefault', content_type=ContentType.text_plain),\n) -&gt; ...:\n</code></pre> <pre><code>------------------------------\nHandler attribute with Type `Body` cannot have a default value.\n\nHandler path: `&lt;full_path&gt;/main.py`\nHandler name: `handler`\nAttribute name: `data`\n------------------------------\n</code></pre></p>"},{"location":"ru/docs/server/request/parameters/body/x_www_form_urlencoded/","title":"X-WWW-Form-Urlencoded","text":"<p>\u0427\u0442\u0435\u043d\u0438\u0435 \u0442\u0435\u043b\u0430 \u0437\u0430\u043f\u0440\u043e\u0441\u0430 \u043a\u0430\u043a <code>application/x-www-form-urlencoded</code>.</p>"},{"location":"ru/docs/server/request/parameters/body/x_www_form_urlencoded/#_1","title":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435","text":"<p>X-WWW-Form-Urlencoded (MIME-type: <code>application/x-www-form-urlencoded</code>) \u2014 \u044d\u0442\u043e \u0440\u0430\u0441\u043f\u0440\u043e\u0441\u0442\u0440\u0430\u043d\u0451\u043d\u043d\u044b\u0439 \u0442\u0438\u043f \u043a\u043e\u043d\u0442\u0435\u043d\u0442\u0430, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c\u044b\u0439 \u0434\u043b\u044f \u043f\u0435\u0440\u0435\u0434\u0430\u0447\u0438 \u0434\u0430\u043d\u043d\u044b\u0445 \u0447\u0435\u0440\u0435\u0437 HTML-\u0444\u043e\u0440\u043c\u044b \u0432 \u0418\u043d\u0442\u0435\u0440\u043d\u0435\u0442\u0435.</p> <p>\u0424\u043e\u0440\u043c\u0430\u0442 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442 \u0441\u043e\u0431\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0443 \u0441 \u043f\u0430\u0440\u0430\u043c\u0438 \u043a\u043b\u044e\u0447-\u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u0432 \u0432\u0438\u0434\u0435: <code>key1=value1&amp;key2=value2</code>.</p> <pre><code>from pydantic import BaseModel\nfrom rapidy.http import post, Body, ContentType\n\nclass UserData(BaseModel):\n    username: str\n    password: str\n\n@post('/')\nasync def handler(\n    user_data: UserData = Body(content_type=ContentType.x_www_form),\n    # or\n    user_data: UserData = Body(content_type='application/x-www-form-urlencoded'),\n) -&gt; ...:\n</code></pre> \u041e\u0442\u043f\u0440\u0430\u0432\u043a\u0430 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e <code>curl</code> <pre><code>curl -X POST \\\n-H \"Content-Type: application/x-www-form-urlencoded\" \\\n-d \"username=User&amp;password=myAwesomePass\" \\\nhttp://127.0.0.1:8080\n</code></pre>"},{"location":"ru/docs/server/request/parameters/body/x_www_form_urlencoded/#_2","title":"\u0418\u0437\u0432\u043b\u0435\u0447\u0435\u043d\u0438\u0435 \u0431\u0435\u0437 \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u0438","text":"<p>\u041e\u0442\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435 \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u0438 \u043d\u0435 \u0440\u0435\u043a\u043e\u043c\u0435\u043d\u0434\u0443\u0435\u0442\u0441\u044f.</p> <p>\u0415\u0441\u043b\u0438 \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u044f \u043e\u0442\u043a\u043b\u044e\u0447\u0435\u043d\u0430, \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440 \u0431\u0443\u0434\u0435\u0442 \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0442\u044c \u0431\u0430\u0437\u043e\u0432\u0443\u044e \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0443 <code>aiohttp</code>:</p> <ul> <li><code>Body(content_type=ContentType.x_www_form)</code> \u2192 <code>MultiDictProxy[str]</code></li> </ul>"},{"location":"ru/docs/server/request/parameters/body/x_www_form_urlencoded/#_3","title":"\u0421\u043f\u043e\u0441\u043e\u0431\u044b \u043e\u0442\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u0438","text":""},{"location":"ru/docs/server/request/parameters/body/x_www_form_urlencoded/#_4","title":"\u042f\u0432\u043d\u043e\u0435 \u043e\u0442\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435","text":"<pre><code>from pydantic import BaseModel\nfrom rapidy.http import post, Body, ContentType\n\nclass BodyData(BaseModel):\n    ...\n\n@post('/')\nasync def handler(\n    data: BodyData = Body(validate=False, content_type=ContentType.x_www_form),\n) -&gt; ...:\n</code></pre>"},{"location":"ru/docs/server/request/parameters/body/x_www_form_urlencoded/#any","title":"\u0418\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 <code>Any</code>","text":"<pre><code>@post('/')\nasync def handler(\n    data: Any = Body(content_type=ContentType.x_www_form),\n) -&gt; ...:\n</code></pre>"},{"location":"ru/docs/server/request/parameters/body/x_www_form_urlencoded/#_5","title":"\u041e\u0442\u0441\u0443\u0442\u0441\u0442\u0432\u0438\u0435 \u0430\u043d\u043d\u043e\u0442\u0430\u0446\u0438\u0438 \u0442\u0438\u043f\u0430","text":"<pre><code>@post('/')\nasync def handler(\n    data = Body(content_type=ContentType.x_www_form),\n) -&gt; ...:\n</code></pre>"},{"location":"ru/docs/server/request/parameters/body/x_www_form_urlencoded/#_6","title":"\u0417\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e","text":"<p>\u0415\u0441\u043b\u0438 HTTP-\u0437\u0430\u043f\u0440\u043e\u0441 \u043d\u0435 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u0442\u0435\u043b\u0430, \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440 \u043f\u043e\u043b\u0443\u0447\u0438\u0442 \u0443\u043a\u0430\u0437\u0430\u043d\u043d\u043e\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e (\u0435\u0441\u043b\u0438 \u043e\u043d\u043e \u0437\u0430\u0434\u0430\u043d\u043e).</p>"},{"location":"ru/docs/server/request/parameters/body/x_www_form_urlencoded/#_7","title":"\u041f\u0440\u0438\u043c\u0435\u0440\u044b \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f","text":""},{"location":"ru/docs/server/request/parameters/body/x_www_form_urlencoded/#_8","title":"\u0423\u043a\u0430\u0437\u0430\u043d\u043e \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e","text":"<pre><code>from pydantic import BaseModel\nfrom rapidy.http import post, Body, ContentType\n\nclass BodyData(BaseModel):\n    ...\n\n@post('/')\nasync def handler(\n    data: BodyData = Body('some_data', content_type=ContentType.x_www_form),\n    # or\n    data: BodyData = Body(default_factory=lambda: 'some_data', content_type=ContentType.x_www_form),\n) -&gt; ...:\n</code></pre>"},{"location":"ru/docs/server/request/parameters/body/x_www_form_urlencoded/#_9","title":"\u041e\u043f\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u043e\u0435 \u0442\u0435\u043b\u043e \u0437\u0430\u043f\u0440\u043e\u0441\u0430","text":"<pre><code>from pydantic import BaseModel\n\nfrom rapidy.http import post, Body, ContentType\n\nclass BodyData(BaseModel):\n    ...\n\n@post('/')\nasync def handler(\n    data: BodyData | None = Body(content_type=ContentType.x_www_form),\n    # or\n    data: Optional[BodyData] = Body(content_type=ContentType.x_www_form),\n    # or\n    data: Union[BodyData, None] = Body(content_type=ContentType.x_www_form),\n) -&gt; ...:\n</code></pre>"},{"location":"ru/docs/server/request/parameters/body/x_www_form_urlencoded/#_10","title":"\u0418\u0437\u0432\u043b\u0435\u0447\u0435\u043d\u0438\u0435 \u0441\u044b\u0440\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445","text":"<p><code>Rapidy</code> \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442 \u043c\u0435\u0442\u043e\u0434 <code>post</code> \u043e\u0431\u044a\u0435\u043a\u0442\u0430 <code>Request</code> \u0434\u043b\u044f \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u044f \u0434\u0430\u043d\u043d\u044b\u0445 \u0438 \u043f\u0435\u0440\u0435\u0434\u0430\u0451\u0442 \u0438\u0445 \u0432 <code>Pydantic</code> \u0434\u043b\u044f \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u0438.</p> \u041a\u0430\u043a \u043f\u0440\u043e\u0438\u0441\u0445\u043e\u0434\u0438\u0442 \u0438\u0437\u0432\u043b\u0435\u0447\u0435\u043d\u0438\u0435 \u0432\u043d\u0443\u0442\u0440\u0438 <code>Rapidy</code> <pre><code>async def extract_post_data(request: Request) -&gt; Optional[MultiDictProxy[Union[str, bytes, FileField]]]:\n    if not request.body_exists:\n        return None\n\n    return await request.post()\n</code></pre> <p><code>Rapidy</code> \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442 \u0432\u0441\u0442\u0440\u043e\u0435\u043d\u043d\u044b\u0435 \u043c\u0435\u0445\u0430\u043d\u0438\u0437\u043c\u044b <code>aiohttp</code>.</p> <p>\u041f\u043e\u0434\u0440\u043e\u0431\u043d\u0435\u0435 \u043e\u0431 \u043e\u0431\u044a\u0435\u043a\u0442\u0435 <code>aiohttp.Request</code> \u0438 \u043c\u0435\u0442\u043e\u0434\u0430\u0445 \u0438\u0437\u0432\u043b\u0435\u0447\u0435\u043d\u0438\u044f \u0434\u0430\u043d\u043d\u044b\u0445 \u043c\u043e\u0436\u043d\u043e \u0443\u0437\u043d\u0430\u0442\u044c \u0437\u0434\u0435\u0441\u044c.</p> <p><code>x-www-form-urlencoded</code> \u0438 <code>multipart/form-data</code> \u043e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u044e\u0442\u0441\u044f \u043e\u0434\u0438\u043d\u0430\u043a\u043e\u0432\u043e.</p> <p>\u041e\u0431\u0430 \u044d\u0442\u0438\u0445 \u0442\u0438\u043f\u0430 \u0434\u0430\u043d\u043d\u044b\u0445 \u0438\u0437\u0432\u043b\u0435\u043a\u0430\u044e\u0442\u0441\u044f \u0447\u0435\u0440\u0435\u0437 \u043c\u0435\u0442\u043e\u0434 <code>post</code> \u043e\u0431\u044a\u0435\u043a\u0442\u0430 <code>Request</code>, \u0447\u0442\u043e \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u043e\u0441\u043e\u0431\u0435\u043d\u043d\u043e\u0441\u0442\u044c\u044e \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 <code>aiohttp</code>.</p> <p>\u041e\u0434\u043d\u0430\u043a\u043e, \u0435\u0441\u043b\u0438 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440 \u0430\u043d\u043d\u043e\u0442\u0438\u0440\u043e\u0432\u0430\u043d \u043a\u0430\u043a <code>bytes</code> \u0438\u043b\u0438 <code>StreamReader</code>, \u0434\u0430\u043d\u043d\u044b\u0435 \u0438\u0437\u0432\u043b\u0435\u043a\u0430\u044e\u0442\u0441\u044f \u0438\u043d\u0430\u0447\u0435.</p> <p>\u041f\u043e\u0434\u0440\u043e\u0431\u043d\u0435\u0435 \u043e\u0431 \u043e\u0431\u044a\u0435\u043a\u0442\u0435 <code>StreamReader</code> \u043c\u043e\u0436\u043d\u043e \u0443\u0437\u043d\u0430\u0442\u044c \u0437\u0434\u0435\u0441\u044c.</p>"},{"location":"ru/docs/server/request/parameters/body/x_www_form_urlencoded/#bytes","title":"<code>bytes</code>","text":"<pre><code>@post('/')\nasync def handler(\n    user_data: bytes = Body(content_type=ContentType.x_www_form),\n    # also you can use pydantic validation\n    user_data: bytes = Body(content_type=ContentType.x_www_form, min_length=1),\n) -&gt; ...:\n</code></pre> \u0412\u043d\u0443\u0442\u0440\u0435\u043d\u043d\u0438\u0439 \u043a\u043e\u0434 <code>Rapidy</code> <pre><code>async def extract_body_bytes(request: Request) -&gt; Optional[bytes]:\n    if not request.body_exists:\n        return None\n\n    return await request.read()\n</code></pre>"},{"location":"ru/docs/server/request/parameters/body/x_www_form_urlencoded/#streamreader","title":"<code>StreamReader</code>","text":"<pre><code>from rapidy import StreamReader\n\n@post('/')\nasync def handler(\n    user_data: StreamReader = Body(content_type=ContentType.x_www_form),\n) -&gt; ...:\n</code></pre> \u0412\u043d\u0443\u0442\u0440\u0435\u043d\u043d\u0438\u0439 \u043a\u043e\u0434 <code>Rapidy</code> <pre><code>async def extract_body_stream(request: Request) -&gt; Optional[StreamReader]:\n    if not request.body_exists:\n        return None\n\n    return request.content\n</code></pre> <p>\u0412\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u044f <code>Pydantic</code> \u0434\u043b\u044f <code>StreamReader</code> \u043d\u0435 \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u0435\u0442\u0441\u044f.</p> \u0417\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e \u0434\u043b\u044f <code>StreamReader</code> \u0437\u0430\u0434\u0430\u0442\u044c \u043d\u0435\u043b\u044c\u0437\u044f. <p>\u0415\u0441\u043b\u0438 \u043f\u043e\u043f\u044b\u0442\u0430\u0442\u044c\u0441\u044f \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u044c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e \u0434\u043b\u044f <code>Body</code> \u0441 \u0430\u043d\u043d\u043e\u0442\u0430\u0446\u0438\u0435\u0439 <code>StreamReader</code> \u0447\u0435\u0440\u0435\u0437 <code>default</code> \u0438\u043b\u0438 <code>default_factory</code>, \u0431\u0443\u0434\u0435\u0442 \u0432\u044b\u0437\u0432\u0430\u043d\u0430 \u043e\u0448\u0438\u0431\u043a\u0430 <code>ParameterCannotUseDefaultError</code>.</p> <p><pre><code>from rapidy import StreamReader\n\n@post('/')\nasync def handler(\n    user_data: StreamReader = Body(content_type=ContentType.x_www_form),\n) -&gt; ...:\n</code></pre> <pre><code>------------------------------\nHandler attribute with Type `Body` cannot have a default value.\n\nHandler path: `&lt;full_path&gt;/main.py`\nHandler name: `handler`\nAttribute name: `data`\n------------------------------\n</code></pre></p>"},{"location":"ru/docs/server/response/","title":"HTTP-\u043e\u0442\u0432\u0435\u0442","text":"<p>\u0420\u0430\u0437\u0434\u0435\u043b \u043e\u043f\u0438\u0441\u044b\u0432\u0430\u0435\u0442 \u043a\u0430\u043a \u043c\u043e\u0436\u043d\u043e \u0441\u0444\u043e\u0440\u043c\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0438 \u043e\u0442\u043f\u0440\u0430\u0432\u0438\u0442\u044c HTTP-\u043e\u0442\u0432\u0435\u0442 \u0432 <code>Rapidy</code>.</p>"},{"location":"ru/docs/server/response/#_1","title":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435","text":"<p>HTTP-\u043e\u0442\u0432\u0435\u0442 \u2014 \u044d\u0442\u043e \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435, \u043a\u043e\u0442\u043e\u0440\u043e\u0435 \u0441\u0435\u0440\u0432\u0435\u0440 \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0443 \u0432 \u043e\u0442\u0432\u0435\u0442 \u043d\u0430 \u0435\u0433\u043e \u0437\u0430\u043f\u0440\u043e\u0441.</p> \u041f\u0440\u0438\u043c\u0435\u0440 \u0442\u0435\u043a\u0441\u0442\u043e\u0432\u043e\u0433\u043e HTTP-\u043e\u0442\u0432\u0435\u0442\u0430 (\u043f\u0440\u043e\u0442\u043e\u043a\u043e\u043b HTTP/1.1) <pre><code>HTTP/1.1 200 OK\nServer: Nginx\nContent-Type: text/html; charset=utf-8\nDate: Wed, 10 Aug 2024 11:00:00 GMT\nKeep-Alive: timeout=5, max=1000\nConnection: Keep-Alive\nAge: 3464\nDate: Wed, 10 Aug 2024 11:10:00 GMT\nX-Cache-Info: caching\nContent-Length: 220\n\n&lt;!DOCTYPE HTML PUBLIC \"-//IETF//DTD HTML 2.0//EN&gt;\"&gt;\n(... more body data ...)\n</code></pre>"},{"location":"ru/docs/server/response/#http-_1","title":"\u0421\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0430 HTTP-\u043e\u0442\u0432\u0435\u0442\u0430","text":"<p>HTTP-\u043e\u0442\u0432\u0435\u0442 \u0441\u043e\u0441\u0442\u043e\u0438\u0442 \u0438\u0437 \u0441\u0442\u0430\u0440\u0442\u043e\u0432\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0438, \u0437\u0430\u0433\u043e\u043b\u043e\u0432\u043a\u043e\u0432 \u0438 \u0442\u0435\u043b\u0430.</p>"},{"location":"ru/docs/server/response/#_2","title":"\u0421\u0442\u0430\u0440\u0442\u043e\u0432\u0430\u044f \u0441\u0442\u0440\u043e\u043a\u0430","text":"<p><code>HTTP/1.1 200 OK</code></p> <p>\u0421\u0442\u0430\u0440\u0442\u043e\u0432\u0430\u044f \u0441\u0442\u0440\u043e\u043a\u0430 (\u0438\u043b\u0438 \u0441\u0442\u0440\u043e\u043a\u0430 \u0441\u0442\u0430\u0442\u0443\u0441\u0430) \u0432\u043a\u043b\u044e\u0447\u0430\u0435\u0442:</p> <ul> <li>\u0412\u0435\u0440\u0441\u0438\u044e \u043f\u0440\u043e\u0442\u043e\u043a\u043e\u043b\u0430 (HTTP-\u043f\u0440\u043e\u0442\u043e\u043a\u043e\u043b) \u2014 HTTP/1.1</li> <li>\u041a\u043e\u0434 \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u044f (\u0447\u0438\u0441\u043b\u043e\u0432\u043e\u0439 \u043a\u043e\u0434, \u043e\u0431\u043e\u0437\u043d\u0430\u0447\u0430\u044e\u0449\u0438\u0439 \u0441\u0442\u0430\u0442\u0443\u0441 \u0437\u0430\u043f\u0440\u043e\u0441\u0430) \u2014 200</li> <li>\u041f\u043e\u044f\u0441\u043d\u0435\u043d\u0438\u0435 (\u043a\u0440\u0430\u0442\u043a\u043e\u0435 \u0442\u0435\u043a\u0441\u0442\u043e\u0432\u043e\u0435 \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u043a\u043e\u0434\u0430 \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u044f) \u2014 OK</li> </ul> \u0412\u0435\u0440\u0441\u0438\u0438 HTTP-\u043f\u0440\u043e\u0442\u043e\u043a\u043e\u043b\u0430 <p>HTTP-\u0441\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u044b \u0440\u0430\u0437\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u044e\u0442\u0441\u044f Internet Engineering Task Force (IETF) \u0438 World Wide Web Consortium (W3C), \u0447\u0442\u043e \u043f\u0440\u0438\u0432\u043e\u0434\u0438\u0442 \u043a \u043f\u0443\u0431\u043b\u0438\u043a\u0430\u0446\u0438\u0438 \u0441\u0435\u0440\u0438\u0438 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u043e\u0432 Requests for Comments (RFC).</p> \u0412\u0435\u0440\u0441\u0438\u044f \u043f\u0440\u043e\u0442\u043e\u043a\u043e\u043b\u0430 \u0422\u0438\u043f HTTP-\u043f\u0440\u043e\u0442\u043e\u043a\u043e\u043b\u0430 \u0422\u0440\u0430\u043d\u0441\u043f\u043e\u0440\u0442\u043d\u044b\u0439 \u0443\u0440\u043e\u0432\u0435\u043d\u044c \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 HTTP/1.1 \u0422\u0435\u043a\u0441\u0442\u043e\u0432\u044b\u0439 TCP \u0422\u0440\u0435\u0431\u0443\u0435\u0442 \u0434\u043e\u0436\u0438\u0434\u0430\u0442\u044c\u0441\u044f \u043e\u0442\u0432\u0435\u0442\u0430 \u043f\u0435\u0440\u0435\u0434 \u043e\u0442\u043f\u0440\u0430\u0432\u043a\u043e\u0439 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0435\u0433\u043e \u0437\u0430\u043f\u0440\u043e\u0441\u0430 \u0432 \u0440\u0430\u043c\u043a\u0430\u0445 \u043e\u0434\u043d\u043e\u0433\u043e \u0441\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u044f. HTTP/2 \u0411\u0438\u043d\u0430\u0440\u043d\u044b\u0439 TCP \u041f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0442\u044c \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432 \u043e\u0434\u043d\u043e\u0432\u0440\u0435\u043c\u0435\u043d\u043d\u043e \u0431\u0435\u0437 \u043e\u0436\u0438\u0434\u0430\u043d\u0438\u044f \u0437\u0430\u0432\u0435\u0440\u0448\u0435\u043d\u0438\u044f \u043f\u0440\u0435\u0434\u044b\u0434\u0443\u0449\u0438\u0445. HTTP/3/QUIC \u0411\u0438\u043d\u0430\u0440\u043d\u044b\u0439 UDP \u0420\u0430\u0431\u043e\u0442\u0430\u0435\u0442 \u043f\u043e\u0432\u0435\u0440\u0445 UDP (\u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442 \u0442\u0435\u0445\u043d\u043e\u043b\u043e\u0433\u0438\u044e QUIC). \u041a\u043e\u0434\u044b \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u044f HTTP <p>HTTP-\u043a\u043e\u0434\u044b \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u044f \u0441\u043e\u043e\u0431\u0449\u0430\u044e\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0443 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u0435\u0433\u043e \u0437\u0430\u043f\u0440\u043e\u0441\u0430. \u041e\u043d\u0438 \u0434\u0435\u043b\u044f\u0442\u0441\u044f \u043d\u0430 \u043f\u044f\u0442\u044c \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0439:</p> \u041a\u043e\u0434 \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 1xx \u0418\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u043e\u043d\u043d\u044b\u0435 \u043a\u043e\u0434\u044b, \u043d\u0435 \u0432\u043b\u0438\u044f\u044e\u0449\u0438\u0435 \u043d\u0430 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0443 \u0437\u0430\u043f\u0440\u043e\u0441\u0430. 2xx \u0423\u0441\u043f\u0435\u0448\u043d\u0430\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0437\u0430\u043f\u0440\u043e\u0441\u0430. 3xx \u041f\u0435\u0440\u0435\u043d\u0430\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u043a\u043b\u0438\u0435\u043d\u0442\u0430 \u043d\u0430 \u0434\u0440\u0443\u0433\u043e\u0439 \u0440\u0435\u0441\u0443\u0440\u0441. 4xx \u041e\u0448\u0438\u0431\u043a\u0438 \u043d\u0430 \u0441\u0442\u043e\u0440\u043e\u043d\u0435 \u043a\u043b\u0438\u0435\u043d\u0442\u0430 (\u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u043d\u0435\u0432\u0435\u0440\u043d\u044b\u0439 \u0437\u0430\u043f\u0440\u043e\u0441 \u0438\u043b\u0438 \u043d\u0435\u0434\u043e\u0441\u0442\u0430\u0442\u043e\u043a \u043f\u0440\u0430\u0432 \u0434\u043e\u0441\u0442\u0443\u043f\u0430). 5xx \u041e\u0448\u0438\u0431\u043a\u0438 \u043d\u0430 \u0441\u0442\u043e\u0440\u043e\u043d\u0435 \u0441\u0435\u0440\u0432\u0435\u0440\u0430."},{"location":"ru/docs/server/response/#_3","title":"\u0417\u0430\u0433\u043e\u043b\u043e\u0432\u043a\u0438 \u043e\u0442\u0432\u0435\u0442\u0430","text":"<p>\u0417\u0430\u0433\u043e\u043b\u043e\u0432\u043a\u0438 \u043e\u0442\u0432\u0435\u0442\u0430 (Response Headers) \u0443\u0442\u043e\u0447\u043d\u044f\u044e\u0442 \u0434\u0435\u0442\u0430\u043b\u0438 \u043e\u0442\u0432\u0435\u0442\u0430, \u0438 \u043d\u0438\u043a\u0430\u043a \u043d\u0435 \u0432\u043b\u0438\u044f\u044e\u0442 \u043d\u0430 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u043c\u043e\u0435 \u0442\u0435\u043b\u0430.</p> \u041f\u0440\u0438\u043c\u0435\u0440\u044b \u0437\u0430\u0433\u043e\u043b\u043e\u0432\u043a\u043e\u0432 \u041a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u044f \u041f\u0440\u0438\u043c\u0435\u0440 \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 Server Server: nginx \u0418\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043e \u0441\u0435\u0440\u0432\u0435\u0440\u0435, \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0430\u0432\u0448\u0435\u043c \u0437\u0430\u043f\u0440\u043e\u0441. Set-Cookie Set-Cookie:UserData=SomeData123 Cookie \u0441 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0435\u0439 \u043e \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435, \u0441\u043e\u0445\u0440\u0430\u043d\u044f\u0435\u043c\u043e\u0439 \u0431\u0440\u0430\u0443\u0437\u0435\u0440\u043e\u043c."},{"location":"ru/docs/server/response/#_4","title":"\u0422\u0435\u043b\u043e \u043e\u0442\u0432\u0435\u0442\u0430","text":"<p>\u041e\u043f\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u0430\u044f \u0447\u0430\u0441\u0442\u044c \u043e\u0442\u0432\u0435\u0442\u0430, \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0449\u0430\u044f \u0434\u0430\u043d\u043d\u044b\u0435.</p> <p>\u0421\u0435\u0440\u0432\u0435\u0440 \u0443\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442 \u0442\u0438\u043f \u043f\u0435\u0440\u0435\u0434\u0430\u0432\u0430\u0435\u043c\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u0437\u0430\u0433\u043e\u043b\u043e\u0432\u043a\u0430 <code>Content-Type</code>.</p> <p>\u0422\u0435\u043b\u043e \u043e\u0442\u0432\u0435\u0442\u0430 \u043c\u043e\u0436\u0435\u0442 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u044f\u0442\u044c \u0441\u043e\u0431\u043e\u0439 JSON, \u043c\u0435\u0434\u0438\u0430\u0444\u0430\u0439\u043b, \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442, \u0442\u0435\u043a\u0441\u0442 \u0438\u043b\u0438 \u0434\u0430\u0436\u0435 \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u043b\u044c\u043d\u044b\u0439 \u043d\u0430\u0431\u043e\u0440 \u0431\u0430\u0439\u0442\u043e\u0432.</p>"},{"location":"ru/docs/server/response/#http-_2","title":"\u0424\u043e\u0440\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 HTTP-\u043e\u0442\u0432\u0435\u0442\u0430","text":"<p>\u041f\u0440\u043e\u0441\u0442\u043e\u0439 \u043e\u0442\u0432\u0435\u0442 http-\u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u0430 \u043c\u043e\u0436\u0435\u0442 \u0432\u044b\u0433\u043b\u044f\u0434\u0435\u0442\u044c \u0442\u0430\u043a: <pre><code>from rapidy.http import get\n\n@get('/')\nasync def handler() -&gt; dict[str, str]:\n    return {'hello': 'rapidy'}\n</code></pre></p>"},{"location":"ru/docs/server/response/#_5","title":"\u0412\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u044f \u0438 \u0441\u0435\u0440\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u043e\u0442\u0432\u0435\u0442\u0430","text":"<p>\u0414\u043b\u044f \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u0438 \u0438 \u0441\u0435\u0440\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 \u043e\u0442\u0432\u0435\u0442\u043e\u0432 <code>Rapidy</code> \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442 <code>pydantic</code>.</p> <p>\u041f\u0440\u0438 \u0437\u0430\u043f\u0443\u0441\u043a\u0435 \u0441\u0435\u0440\u0432\u0435\u0440\u0430 <code>Rapidy</code> \u0441\u043e\u0437\u0434\u0430\u0435\u0442 <code>pydantic</code>-\u043c\u043e\u0434\u0435\u043b\u044c \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u0430 \u043d\u0430 \u043e\u0441\u043d\u043e\u0432\u0435 \u0430\u043d\u043d\u043e\u0442\u0430\u0446\u0438\u0438 \u0432\u043e\u0437\u0432\u0440\u0430\u0442\u0430 \u0438 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442 \u0435\u0451 \u0434\u043b\u044f \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u0438 \u0434\u0430\u043d\u043d\u044b\u0445 \u0432 \u043e\u0442\u0432\u0435\u0442\u0435.</p> <p>\u041c\u043e\u0436\u043d\u043e \u043f\u0435\u0440\u0435\u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0438\u0442\u044c \u0442\u0438\u043f \u0434\u043b\u044f \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u0438 \u0438\u043b\u0438 \u043e\u0442\u043c\u0435\u043d\u0438\u0442\u044c \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435 <code>pydantic</code>-\u043c\u043e\u0434\u0435\u043b\u0438 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u0430\u0442\u0440\u0438\u0431\u0443\u0442\u043e\u0432 <code>response_validate</code> \u0438 <code>response_type</code>.</p> <pre><code>from rapidy.http import get\n\n@get(\n    '/',\n    response_validate=False,\n)\nasync def handler() -&gt; str:  # &lt;-- `str` will be ignored\n    return {'hello': 'rapidy'}\n</code></pre> <p>\u041f\u043e\u0434\u0440\u043e\u0431\u043d\u0435\u0435 \u043e\u0431 \u0430\u0442\u0442\u0440\u0438\u0431\u0443\u0442\u0430\u0445 \u043e\u0442\u0432\u0435\u0442\u0430 \u0434\u043b\u044f http-\u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u0430 \u043c\u043e\u0436\u043d\u043e \u043f\u0440\u043e\u0447\u0438\u0442\u0430\u0442\u044c \u0437\u0434\u0435\u0441\u044c.</p> \u041f\u0440\u0438\u043c\u0435\u0440\u044b \u0443\u0441\u043f\u0435\u0448\u043d\u044b\u0445 \u043e\u0442\u0432\u0435\u0442\u043e\u0432 <p><pre><code>@post('/')\nasync def handler() -&gt; int:  # &lt;-- `int` will be used to validate\n    return '123'  # success response --&gt; `123`\n</code></pre> <pre><code>from pydantic import BaseModel, Field\n\nclass Result(BaseModel):\n    data: str = Field(max_length=10)\n\n@post('/')\nasync def handler() -&gt; Result:\n    return Result(data='some_data')  # success response --&gt; `{\"data\": \"some_data\"}`\n</code></pre> <pre><code>from pydantic import BaseModel, Field\n\nclass Result(BaseModel):\n    data: str = Field(max_length=10)\n\n@post('/')\nasync def handler() -&gt; Result:\n    return {'data': 'some_data'}  # # success response --&gt; `{\"data\": \"some_data\"}`\n</code></pre></p> \u041f\u0440\u0438\u043c\u0435\u0440\u044b \u043d\u0435\u0443\u0441\u043f\u0435\u0448\u043d\u044b\u0445 \u043e\u0442\u0432\u0435\u0442\u043e\u0432 <p><pre><code>from rapidy.http import get\n\n@get('/')\nasync def handler() -&gt; int:  # &lt;-- `int` will be used to validate\n    return 'some_data'  # &lt;-- will raise err\n</code></pre> <pre><code>------------------------------\nValidation errors:\n [{'loc': ('body',),\n  'msg': 'Input should be a valid integer, unable to parse string as an '\n         'integer',\n  'type': 'int_parsing'}]\n\nHandler path: `main.py`\nHandler name: `handler`\n------------------------------\n</code></pre></p> <p><pre><code>from pydantic import BaseModel, Field\n\nclass Result(BaseModel):\n    data: str = Field(max_length=10)\n\n@post('/')\nasync def handler() -&gt; Result:\n    return {'data': 'another_data'}  # &lt;-- will raise err\n</code></pre> <pre><code>------------------------------\nValidation errors:\n [{'ctx': {'max_length': 10},\n  'loc': ('body', 'data'),\n  'msg': 'String should have at most 10 characters',\n  'type': 'string_too_long'}]\n\nHandler path: `main.py`\nHandler name: `handler`\n------------------------------\n</code></pre></p>"},{"location":"ru/docs/server/response/#http-_3","title":"\u041f\u0440\u043e\u0434\u0432\u0438\u043d\u0443\u0442\u044b\u0439 \u0443\u0440\u043e\u0432\u0435\u043d\u044c \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u044f HTTP-\u043e\u0442\u0432\u0435\u0442\u043e\u043c","text":"<p>\u0414\u043b\u044f \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u044f HTTP-\u043e\u0442\u0432\u0435\u0442\u0430\u043c\u0438 <code>Rapidy</code> \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442 \u043e\u0431\u044a\u0435\u043a\u0442 <code>Response</code>. <pre><code>from rapidy.http import Response\n</code></pre></p> <p>\u041e\u0431\u044a\u0435\u043a\u0442 <code>Response</code> \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u0441\u043e\u0437\u0434\u0430\u043d \u043a\u0430\u043a \u0441\u0430\u043c\u0438\u043c <code>Rapidy</code> \u0432\u043d\u0443\u0442\u0440\u0438 \u0441\u0435\u0431\u044f \u0434\u043b\u044f \u0444\u043e\u0440\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u043e\u0442\u0432\u0435\u0442\u0430, \u0442\u0430\u043a \u0438 \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u043e\u043c \u0434\u043b\u044f \u044f\u0432\u043d\u043e\u0433\u043e \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u0438\u043c.</p> <p>\u041f\u043e\u0434\u0440\u043e\u0431\u043d\u0435\u0435 \u043e\u0431 \u043e\u0431\u044a\u0435\u043a\u0442\u0435 <code>Response</code> \u043c\u043e\u0436\u043d\u043e \u043f\u0440\u043e\u0447\u0438\u0442\u0430\u0442\u044c \u0437\u0434\u0435\u0441\u044c.</p>"},{"location":"ru/docs/server/response/#response-","title":"\u0410\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0435 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435 Response-\u043e\u0431\u044a\u0435\u043a\u0442\u0430","text":"<p><code>Rapidy</code> \u0430\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438 \u0441\u043e\u0437\u0434\u0430\u0435\u0442 <code>Response</code> \u0432 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0445 \u0441\u043b\u0443\u0447\u0430\u044f\u0445:</p> <p>\u0412 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u0435 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d \u0430\u0442\u0440\u0438\u0431\u0443\u0442 \u0441 \u043b\u044e\u0431\u044b\u043c \u0438\u043c\u0435\u043d\u0435\u043c \u0438 \u0442\u0438\u043f\u043e\u043c <code>Response</code> <pre><code>from rapidy.http import get, Response\n\n@get('/')\nasync def handler(response: Response) -&gt; ...:\n    ...\n</code></pre></p> <p>\u042d\u0442\u043e \u0434\u0430\u0451\u0442 \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u0443 \u0431\u043e\u043b\u044c\u0448\u0435 \u0433\u0438\u0431\u043a\u043e\u0441\u0442\u0438 \u0432 \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0438 <code>HTTP</code>-\u043e\u0442\u0432\u0435\u0442\u0430\u043c\u0438, \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u044f, \u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u0443\u0441\u0442\u0430\u043d\u0430\u0432\u043b\u0438\u0432\u0430\u0442\u044c \u0441\u0442\u0430\u0442\u0443\u0441-\u043a\u043e\u0434, cookies \u0438 \u0434\u0440\u0443\u0433\u0438\u0435 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b. \u041f\u043e\u0434\u0440\u043e\u0431\u043d\u0435\u0435 \u043e \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0430\u0445 \u043e\u0431\u044a\u0435\u043a\u0442\u0430 <code>Response</code> \u043c\u043e\u0436\u043d\u043e \u0443\u0437\u043d\u0430\u0442\u044c \u0437\u0434\u0435\u0441\u044c.</p> <pre><code>from rapidy.http import get, Response\n\n@get('/')\nasync def handler(\n    response: Response,  # &lt;-- current response\n) -&gt; str:\n    some_answer: bool = ...\n    if some_answer:\n        response.set_status(200)\n        return 'ok'\n\n    response.set_status(500)\n    return 'not ok'\n</code></pre> <p>\u0422\u0430\u043a\u0436\u0435 \u043c\u043e\u0436\u043d\u043e \u0432\u0435\u0440\u043d\u0443\u0442\u044c \u044d\u0442\u043e\u0442 \u0436\u0435 <code>Response</code> \u043e\u0431\u044a\u0435\u043a\u0442. <pre><code>from rapidy.http import get, Response\n\n@get('/')\nasync def handler(response: Response) -&gt; Response:\n    return response\n</code></pre></p> <p>\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 <code>python</code> \u043e\u0431\u044a\u0435\u043a\u0442 <pre><code>from rapidy.http import get\n\n@get('/')\nasync def handler() -&gt; dict[str, str]:\n    return {'hello': 'rapidy'}\n</code></pre></p> <p>\u0415\u0441\u043b\u0438 \u0432 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u0435 \u0443\u0436\u0435 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0451\u043d \u0430\u0442\u0440\u0438\u0431\u0443\u0442 \u0441 \u0442\u0438\u043f\u043e\u043c <code>Response</code>, \u0430 \u0441\u0430\u043c \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 <code>python</code>-\u043e\u0431\u044a\u0435\u043a\u0442, \u0442\u043e \u043d\u043e\u0432\u044b\u0439 \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440 <code>Response</code> \u0441\u043e\u0437\u0434\u0430\u0432\u0430\u0442\u044c\u0441\u044f \u043d\u0435 \u0431\u0443\u0434\u0435\u0442.</p> <pre><code>from rapidy.http import get, Response\n\n@get('/')\nasync def handler(\n    response: Response,  # &lt;-- this response will be returned\n) -&gt; str:\n    return 'ok'\n</code></pre>"},{"location":"ru/docs/server/response/#response-_1","title":"\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 Response-\u043e\u0431\u044a\u0435\u043a\u0442","text":"<p><code>Rapidy</code> \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u0443 \u0441\u0430\u043c\u043e\u0441\u0442\u043e\u044f\u0442\u0435\u043b\u044c\u043d\u043e \u0443\u043f\u0440\u0430\u0432\u043b\u044f\u0442\u044c \u0438 \u0444\u043e\u0440\u043c\u0438\u0440\u043e\u0432\u0430\u0442\u044c <code>Response</code> \u043e\u0431\u044a\u0435\u043a\u0442.</p> <pre><code>from rapidy.http import get, Response\n\n@get('/')\nasync def handler() -&gt; Response:\n    return Response(status=201)\n</code></pre> <p>\u041f\u0440\u0438 \u043f\u0440\u044f\u043c\u043e\u043c \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0438 \u043e\u0442\u0432\u0435\u0442\u043e\u043c \u0430\u0442\u0440\u0438\u0431\u0443\u0442\u044b \u0432\u0435\u0431-\u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u0430 \u0438\u0433\u043d\u043e\u0440\u0438\u0440\u0443\u044e\u0442\u0441\u044f</p> <pre><code>from rapidy.http import get, ContentType, Response\n\n@get(\n    '/',\n    response_content_type=ContentType.json,  # &lt;-- will be ignored\n)\nasync def handler() -&gt; Response:\n    return Response(...)\n</code></pre> <p>\u0415\u0441\u043b\u0438 <code>Response</code> \u043e\u0431\u044a\u0435\u043a\u0442 \u0431\u044b\u043b \u043f\u0440\u043e\u0431\u0440\u043e\u0448\u0435\u043b \u0432 \u0430\u0442\u0442\u0440\u0438\u0431\u0443\u0442, \u0430 \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a \u043e\u0442\u0434\u0430\u0435\u0442 \u043d\u043e\u0432\u044b\u0439 <code>Response</code> \u0442\u043e \u043f\u0440\u043e\u0431\u0440\u043e\u0448\u0435\u043d\u043d\u044b\u0439 <code>Response</code> \u0438\u0433\u043d\u043e\u0440\u0438\u0440\u0443\u0435\u0442\u0441\u044f.</p> <pre><code>from rapidy.http import get, Response\n\n@get('/')\nasync def handler(\n    response: Response,  # &lt;-- this response will be ignored\n) -&gt; Response:\n    response.set_status(200)  # &lt;-- `200` status will be ignored\n\n    return Response(status=500)  # &lt;-- new Response obj returned status `500`\n</code></pre> <p>\u041f\u0440\u0438 \u043f\u0440\u044f\u043c\u043e\u043c \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0438 \u043e\u0442\u0432\u0435\u0442\u043e\u043c \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u044f <code>pydantic</code> \u043d\u0435 \u0431\u0443\u0434\u0435\u0442 \u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c.</p> <pre><code>from rapidy.http import get, Response\n\n@get('/')\nasync def handler(\n) -&gt; int:  # &lt;-- `int` type to validate will be ignored\n    return Response()\n</code></pre>"},{"location":"ru/docs/server/response/#none","title":"\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 None","text":"<p>\u0415\u0441\u043b\u0438 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a <code>Rapidy</code> \u043d\u0438\u0447\u0435\u0433\u043e \u043d\u0435 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442, \u0442\u043e \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e <code>Rapidy</code> \u0432\u0435\u0440\u043d\u0435\u0442 \u0442\u0435\u043a\u0443\u0449\u0438\u0439 <code>Response</code> \u043e\u0431\u044a\u0435\u043a\u0442.</p> <p>\u0415\u0441\u043b\u0438 \u0432\u044b \u0438\u0437\u043c\u0435\u043d\u0438\u043b\u0438 \u0437\u0430\u043f\u0440\u043e\u0441 \u0438 \u043d\u0438\u0447\u0435\u0433\u043e \u043d\u0435 \u0432\u0435\u0440\u043d\u0443\u043b\u0438 \u0438\u0437 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u0430, \u0442\u043e \u0431\u0443\u0434\u0435\u0442 \u043e\u0442\u0434\u0430\u043d \u0438\u043c\u0435\u043d\u043d\u043e \u044d\u0442\u043e\u0442 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u043d\u044b\u0439 \u0437\u0430\u043f\u0440\u043e\u0441!</p> <pre><code>from rapidy.http import get, Response\n\n@get('/')\nasync def handler(response: Response) -&gt; None:\n    response.text = 'hello rapidy!'\n\n# success response --&gt; `hello rapidy!`\n</code></pre>"},{"location":"ru/docs/server/response/#http-_4","title":"\u0410\u0442\u0440\u0438\u0431\u0443\u0442\u044b http-\u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u043e\u0432","text":"<p>\u0410\u0442\u0440\u0438\u0431\u0443\u0442\u044b \u043e\u0442\u0432\u0435\u0442\u0430 \u0432\u0435\u0431-\u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u0430 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044e\u0442\u0441\u044f \u0434\u043b\u044f \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u0444\u043e\u0440\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435\u043c \u043e\u0442\u0432\u0435\u0442\u0430 \u043f\u0440\u0438 \u0432\u043e\u0437\u0432\u0440\u0430\u0442\u0435 \u043b\u044e\u0431\u043e\u0433\u043e <code>python</code>-\u043e\u0431\u044a\u0435\u043a\u0442\u0430 \u0438\u0437 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u0430.</p>"},{"location":"ru/docs/server/response/#_6","title":"\u041a\u043e\u0434 \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u044f \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e","text":"<p>\u0414\u043b\u044f \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u043a\u043e\u0434\u043e\u043c \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u044f \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e \u0432\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0438\u0442\u044c \u0430\u0442\u0440\u0438\u0431\u0443\u0442 <code>status_code</code>.</p> <pre><code>from http import HTTPStatus\nfrom rapidy.http import get\n\n@get(\n    '/',\n    status_code=201,\n)\nasync def handler() -&gt; ...:\n    ...\n\n@get(\n    '/',\n    status_code=HTTPStatus.CREATED,\n)\nasync def handler() -&gt; ...:\n    ...\n</code></pre> <p>\u041e\u0431 \u043e\u0441\u0442\u0430\u043b\u044c\u043d\u044b\u0445 \u0430\u0442\u0442\u0440\u0438\u0431\u0443\u0442\u0430\u0445 \u043c\u043e\u0436\u043d\u043e \u043f\u0440\u043e\u0447\u0438\u0442\u0430\u0442\u044c \u0437\u0434\u0435\u0441\u044c.</p> <p>Rapidy \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u0443\u043f\u0440\u0430\u0432\u043b\u044f\u0442\u044c \u0430\u0442\u0440\u0438\u0431\u0443\u0442\u0430\u043c\u0438 \u0432\u043e \u0432\u0441\u0435\u0445 \u0442\u0438\u043f\u0430\u0445 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u043e\u0432, \u0432\u043a\u043b\u044e\u0447\u0430\u044f \u0442\u0435, \u0447\u0442\u043e \u043e\u0444\u043e\u0440\u043c\u043b\u0435\u043d\u044b \u0432 \u0441\u0442\u0438\u043b\u0435 aiohttp.</p> <pre><code># aiohttp style\nfrom rapidy import web\n\nasync def handler() -&gt; dict[str, str]:\n    return {'hello': 'rapidy'}\n\napp = web.Application()\napp.add_routes([\n    web.post(\n        '/',\n        handler,\n        status_code=200,\n        response_content_type='application/json',\n    ),\n])\n</code></pre>"},{"location":"ru/docs/server/response/handler_response/","title":"\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 HTTP-\u043e\u0442\u0432\u0435\u0442\u043e\u0432","text":"<p>\u0420\u0430\u0437\u0434\u0435\u043b \u043e\u0431\u044a\u044f\u0441\u043d\u044f\u0435\u0442, \u043a\u0430\u043a \u0432 <code>Rapidy</code> \u0443\u043f\u0440\u0430\u0432\u043b\u044f\u0442\u044c HTTP-\u043e\u0442\u0432\u0435\u0442\u043e\u043c \u043f\u0440\u0438 \u0432\u043e\u0437\u0432\u0440\u0430\u0442\u0435 <code>Python</code>-\u043e\u0431\u044a\u0435\u043a\u0442\u0430 \u0438\u0437 HTTP-\u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u0430.</p>"},{"location":"ru/docs/server/response/handler_response/#_1","title":"\u0410\u0442\u0440\u0438\u0431\u0443\u0442\u044b","text":"<p>\u0410\u0442\u0440\u0438\u0431\u0443\u0442\u044b \u043e\u0442\u0432\u0435\u0442\u0430 \u0432\u0435\u0431-\u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u0430 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044e\u0442\u0441\u044f \u0434\u043b\u044f \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u0444\u043e\u0440\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435\u043c \u043e\u0442\u0432\u0435\u0442\u0430 \u043f\u0440\u0438 \u0432\u043e\u0437\u0432\u0440\u0430\u0442\u0435 \u043b\u044e\u0431\u043e\u0433\u043e <code>python</code>-\u043e\u0431\u044a\u0435\u043a\u0442\u0430 \u0438\u0437 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u0430.</p> <p>Rapidy \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u0443\u043f\u0440\u0430\u0432\u043b\u044f\u0442\u044c \u0430\u0442\u0440\u0438\u0431\u0443\u0442\u0430\u043c\u0438 \u0432\u043e \u0432\u0441\u0435\u0445 \u0442\u0438\u043f\u0430\u0445 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u043e\u0432, \u0432\u043a\u043b\u044e\u0447\u0430\u044f \u0442\u0435, \u0447\u0442\u043e \u043e\u0444\u043e\u0440\u043c\u043b\u0435\u043d\u044b \u0432 \u0441\u0442\u0438\u043b\u0435 aiohttp.</p> <pre><code># aiohttp style\nfrom rapidy import web\n\nasync def handler() -&gt; dict[str, str]:\n    return {'hello': 'rapidy'}\n\napp = web.Application()\napp.add_routes([\n    web.post(\n        '/',\n        handler,\n        status_code=200,\n        response_content_type='application/json',\n    ),\n])\n</code></pre>"},{"location":"ru/docs/server/response/handler_response/#path","title":"path","text":"<p>path: <code>str | None = None</code> \u2014 \u043f\u0443\u0442\u044c \u043a \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u0443 \u043d\u0430 \u0432\u0435\u0431-\u0441\u0435\u0440\u0432\u0435\u0440\u0435.</p> <pre><code>from rapidy.http import get\n\n@get(\n    '/',\n)\nasync def handler() -&gt; ...:\n    ...\n</code></pre>"},{"location":"ru/docs/server/response/handler_response/#allow_head","title":"allow_head","text":"<p>allow_head: <code>bool = True</code> \u2014 \u0444\u043b\u0430\u0433, \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u044e\u0449\u0438\u0439, \u043d\u0443\u0436\u043d\u043e \u043b\u0438 \u0434\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u043c\u0435\u0442\u043e\u0434 <code>head</code> \u043a \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u044e\u0449\u0435\u043c\u0443 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u0443 <code>get</code>.</p> <pre><code>from rapidy.http import get\n\n@get(\n    '/',\n    allow_head=True,\n)\nasync def handler() -&gt; ...:\n    ...\n</code></pre>"},{"location":"ru/docs/server/response/handler_response/#status_code","title":"status_code","text":"<p>status_code: <code>int | HTTPStatus = 200</code> \u2014 \u043a\u043e\u0434 \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u044f \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0431\u0443\u0434\u0435\u0442 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c\u0441\u044f \u0434\u043b\u044f \u043e\u0442\u0432\u0435\u0442\u0430.</p> <pre><code>from http import HTTPStatus\nfrom rapidy.http import get\n\n@get(\n    '/',\n    status_code=201,\n)\nasync def handler() -&gt; ...:\n    ...\n\n@get(\n    '/',\n    status_code=HTTPStatus.CREATED,\n)\nasync def handler() -&gt; ...:\n    ...\n</code></pre>"},{"location":"ru/docs/server/response/handler_response/#response_validate","title":"response_validate","text":"<p>response_validate: <code>bool = True</code> \u2014 \u0444\u043b\u0430\u0433, \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u044e\u0449\u0438\u0439, \u0434\u043e\u043b\u0436\u043d\u0430 \u043b\u0438 \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0442\u044c\u0441\u044f \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u044f \u043e\u0442\u0432\u0435\u0442\u0430 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u0430.</p> <pre><code>from rapidy.http import get\n\n@get(\n    '/',\n    response_validate=False,\n)\nasync def handler() -&gt; str:  # &lt;-- `str` will be ignored\n    return {'hello': 'rapidy'}\n</code></pre>"},{"location":"ru/docs/server/response/handler_response/#response_type","title":"response_type","text":"<p>response_type: <code>Type[Any] | None = ...</code> \u2014 \u0437\u0430\u0434\u0430\u0451\u0442 \u0442\u0438\u043f \u043e\u0442\u0432\u0435\u0442\u0430 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u0430. (\u0415\u0441\u043b\u0438 \u0443\u043a\u0430\u0437\u0430\u043d, \u043e\u043d \u0431\u0443\u0434\u0435\u0442 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c\u0441\u044f \u0434\u043b\u044f \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f <code>Pydantic</code>-\u043c\u043e\u0434\u0435\u043b\u0438 \u043e\u0442\u0432\u0435\u0442\u0430 \u0432\u043c\u0435\u0441\u0442\u043e \u0430\u043d\u043d\u043e\u0442\u0430\u0446\u0438\u0438 \u0432\u043e\u0437\u0432\u0440\u0430\u0442\u0430 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u0430.)</p> <pre><code>from rapidy.http import get\n\n@get(\n    '/',\n    # `dict[str, str]` will be used for validate and serialize body response data\n    response_type=dict[str, str],\n)\nasync def handler() -&gt; str:  # &lt;-- `str` will be ignored\n    return {'hello': 'rapidy'}\n</code></pre> <p>\u042d\u0442\u043e\u0442 \u0444\u043b\u0430\u0433 \u0434\u043e\u0431\u0430\u0432\u043b\u044f\u0435\u0442 \u0433\u0438\u0431\u043a\u043e\u0441\u0442\u044c \u0432 \u0441\u0435\u0440\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044e \u0438 \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u044e \u0442\u0435\u043b\u0430 \u043e\u0442\u0432\u0435\u0442\u0430, \u043d\u043e \u0432 \u0431\u043e\u043b\u044c\u0448\u0438\u043d\u0441\u0442\u0432\u0435 \u0441\u043b\u0443\u0447\u0430\u0435\u0432 \u0432\u0430\u043c \u043d\u0435 \u043f\u043e\u0442\u0440\u0435\u0431\u0443\u0435\u0442\u0441\u044f \u0435\u0433\u043e \u043c\u0435\u043d\u044f\u0442\u044c.</p>"},{"location":"ru/docs/server/response/handler_response/#response_content_type","title":"response_content_type","text":"<p>response_content_type: <code>str = 'application/json'</code> \u2014 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u0435\u0442 \u0437\u0430\u0433\u043e\u043b\u043e\u0432\u043e\u043a <code>Content-Type</code> \u0438 \u0443\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 \u043f\u043e\u0441\u0442\u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u043e\u0439 \u043e\u0442\u0432\u0435\u0442\u0430.</p> <p>response_content_type=\"application/json\"</p> <p>\u041f\u0440\u0438 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0438 <code>\"application/json\"</code> \u0434\u0430\u043d\u043d\u044b\u0435 \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u0443\u044e\u0442\u0441\u044f \u0432 JSON \u0441 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\u043c jsonify(dumps=True) \u0438 \u043a\u043e\u0434\u0438\u0440\u0443\u044e\u0442\u0441\u044f \u0432 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0438\u0438 \u0441 charset.</p> <pre><code>from rapidy.http import get, ContentType\n\n@get(\n    '/',\n    response_content_type=ContentType.json,\n)\nasync def handler() -&gt; dict[str, str]:\n    return {'hello': 'rapidy!'}  # {\"hello\": \"rapidy!\"}\n</code></pre> <p>\u0415\u0441\u043b\u0438 \u043f\u0435\u0440\u0435\u0434\u0430\u043d\u043d\u044b\u0439 \u043e\u0431\u044a\u0435\u043a\u0442 \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u0441\u0442\u0440\u043e\u043a\u043e\u0439 (<code>Response(body=\"string\")</code>), \u0442\u043e, \u0441\u043e\u0433\u043b\u0430\u0441\u043d\u043e \u0441\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u0443 JSON, \u0441\u0442\u0440\u043e\u043a\u0430 \u0431\u0443\u0434\u0435\u0442 \u044d\u043a\u0440\u0430\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0430 \u0434\u0432\u0430\u0436\u0434\u044b:</p> <pre><code>from rapidy.http import get, ContentType\n\n@get(\n    '/',\n    response_content_type=ContentType.json,\n)\nasync def handler() -&gt; str:\n    return 'hello rapidy!'  # \"'hello rapidy!'\"\n</code></pre> <p>content_type=\"text/*\"</p> <p>\u041f\u0440\u0438 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0438 <code>\"text/*\"</code> (\u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, <code>text/plain</code>, <code>text/html</code> \u0438 \u0442. \u0434.):</p> <ul> <li>\u0415\u0441\u043b\u0438 \u0434\u0430\u043d\u043d\u044b\u0435 \u0438\u043c\u0435\u044e\u0442 \u0442\u0438\u043f <code>str</code>, \u043e\u043d\u0438 \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u044e\u0442\u0441\u044f \u0431\u0435\u0437 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0439.</li> <li>\u0412 \u043f\u0440\u043e\u0442\u0438\u0432\u043d\u043e\u043c \u0441\u043b\u0443\u0447\u0430\u0435 \u043e\u043d\u0438 \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u0443\u044e\u0442\u0441\u044f \u0432 \u0441\u0442\u0440\u043e\u043a\u0443 \u0447\u0435\u0440\u0435\u0437 jsonify(dumps=False).</li> </ul> <pre><code>from rapidy.http import get, ContentType\n\n@get(\n    '/',\n    response_content_type=ContentType.text_any,\n)\nasync def handler() -&gt; str:\n    return 'hello rapidy!'  # \"hello rapidy!\"\n</code></pre> <p>\u0415\u0441\u043b\u0438 \u043f\u043e\u0441\u043b\u0435 <code>jsonify(dumps=False)</code> \u043e\u0431\u044a\u0435\u043a\u0442 \u043d\u0435 \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u0441\u0442\u0440\u043e\u043a\u043e\u0439, \u043e\u043d \u0434\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u043e \u043a\u043e\u0434\u0438\u0440\u0443\u0435\u0442\u0441\u044f \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e json_encoder \u0432\u043e \u0438\u0437\u0431\u0435\u0436\u0430\u043d\u0438\u0435 \u0434\u0432\u043e\u0439\u043d\u043e\u0433\u043e \u044d\u043a\u0440\u0430\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f.</p> <p>content_type=\"*\"</p> <p>\u0414\u043b\u044f \u043b\u044e\u0431\u044b\u0445 \u0434\u0440\u0443\u0433\u0438\u0445 \u0442\u0438\u043f\u043e\u0432 (<code>*</code>):</p> <ul> <li>\u0415\u0441\u043b\u0438 \u0434\u0430\u043d\u043d\u044b\u0435 \u0438\u043c\u0435\u044e\u0442 \u0442\u0438\u043f <code>bytes</code>, \u043e\u043d\u0438 \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u044e\u0442\u0441\u044f \u0431\u0435\u0437 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0439.</li> <li>\u0412 \u043f\u0440\u043e\u0442\u0438\u0432\u043d\u043e\u043c \u0441\u043b\u0443\u0447\u0430\u0435 \u043e\u043d\u0438 \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u0443\u044e\u0442\u0441\u044f \u0432 \u0441\u0442\u0440\u043e\u043a\u0443 \u0447\u0435\u0440\u0435\u0437 jsonify(dumps=True) \u0438 \u043a\u043e\u0434\u0438\u0440\u0443\u044e\u0442\u0441\u044f \u0432 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0438\u0438 \u0441 charset.</li> </ul> <p>\u0415\u0441\u043b\u0438 <code>content_type</code> \u043d\u0435 \u0443\u043a\u0430\u0437\u0430\u043d, \u043e\u043d \u0443\u0441\u0442\u0430\u043d\u0430\u0432\u043b\u0438\u0432\u0430\u0435\u0442\u0441\u044f \u0430\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438 \u043d\u0430 \u043e\u0441\u043d\u043e\u0432\u0435 \u0442\u0438\u043f\u0430 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u043c\u043e\u0433\u043e \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f:</p> <ul> <li><code>body: dict | BaseModel | dataclass</code> \u2192 <code>content_type=\"application/json\"</code></li> <li><code>body: str | Enum | int | float | Decimal | bool</code> \u2192 <code>content_type=\"text/plain\"</code></li> <li><code>body: Any</code> \u2192 <code>content_type=\"application/octet-stream\"</code></li> </ul>"},{"location":"ru/docs/server/response/handler_response/#response_charset","title":"response_charset","text":"<p>response_charset: <code>str = 'utf-8'</code> \u2014 \u043a\u043e\u0434\u0438\u0440\u043e\u0432\u043a\u0430, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c\u0430\u044f \u0434\u043b\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u0434\u0430\u043d\u043d\u044b\u0445.</p> <pre><code>from rapidy.http import get, Charset\n\n@get(\n    '/',\n    response_charset=Charset.utf32,\n)\nasync def handler() -&gt; ...:\n    ...\n</code></pre>"},{"location":"ru/docs/server/response/handler_response/#response_zlib_executor","title":"response_zlib_executor","text":"<p>response_zlib_executor: <code>Callable | None = None</code> \u2014 \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u0434\u043b\u044f \u0441\u0436\u0430\u0442\u0438\u044f \u043e\u0442\u0432\u0435\u0442\u0430 \u0441 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\u043c <code>zlib</code>.</p> \u041f\u043e\u0434\u0440\u043e\u0431\u043d\u0435\u0435 \u043e <code>zlib_executor</code> <p><code>zlib_executor</code> \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u0447\u0430\u0441\u0442\u044c\u044e <code>aiohttp</code>. \u041f\u043e\u0434\u0440\u043e\u0431\u043d\u0435\u0435 \u043c\u043e\u0436\u043d\u043e \u0443\u0437\u043d\u0430\u0442\u044c \u0437\u0434\u0435\u0441\u044c.</p>"},{"location":"ru/docs/server/response/handler_response/#response_zlib_executor_size","title":"response_zlib_executor_size","text":"<p>response_zlib_executor_size: <code>int | None = None</code> \u2014 \u0440\u0430\u0437\u043c\u0435\u0440 \u0442\u0435\u043b\u0430 \u043e\u0442\u0432\u0435\u0442\u0430 \u0432 \u0431\u0430\u0439\u0442\u0430\u0445, \u043f\u0440\u0438 \u043a\u043e\u0442\u043e\u0440\u043e\u043c \u0431\u0443\u0434\u0435\u0442 \u043f\u0440\u0438\u043c\u0435\u043d\u044f\u0442\u044c\u0441\u044f <code>zlib</code>-\u0441\u0436\u0430\u0442\u0438\u0435.</p>"},{"location":"ru/docs/server/response/handler_response/#response_include_fields","title":"response_include_fields","text":"<p>response_include_fields: <code>set[str] | dict[str, Any] | None = None</code> \u2014 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440 <code>include</code> \u0434\u043b\u044f Pydantic-\u043c\u043e\u0434\u0435\u043b\u0435\u0439, \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u044e\u0449\u0438\u0439, \u043a\u0430\u043a\u0438\u0435 \u043f\u043e\u043b\u044f \u0432\u043a\u043b\u044e\u0447\u0430\u0442\u044c \u0432 \u043e\u0442\u0432\u0435\u0442.</p> <pre><code>from pydantic import BaseModel, Field\nfrom rapidy.http import get\n\nclass Result(BaseModel):\n    value: str = Field('data', alias='someValue')\n    another_value: str = Field('another_data', alias='someAnotherValue')\n\n@get(\n    '/',\n    response_include_fields={'value'},\n)\nasync def handler() -&gt; Result:\n    return Result()  # {'someValue': 'data'}\n</code></pre>"},{"location":"ru/docs/server/response/handler_response/#response_exclude_fields","title":"response_exclude_fields","text":"<p>response_exclude_fields: <code>set[str] | dict[str, Any] | None = None</code> \u2014 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440 <code>exclude</code> \u0434\u043b\u044f Pydantic-\u043c\u043e\u0434\u0435\u043b\u0435\u0439, \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u044e\u0449\u0438\u0439, \u043a\u0430\u043a\u0438\u0435 \u043f\u043e\u043b\u044f \u0438\u0441\u043a\u043b\u044e\u0447\u0430\u0442\u044c \u0438\u0437 \u043e\u0442\u0432\u0435\u0442\u0430.</p> <pre><code>from pydantic import BaseModel, Field\nfrom rapidy.http import get\n\nclass Result(BaseModel):\n    value: str = Field('data', alias='someValue')\n    another_value: str = Field('another_data', alias='someAnotherValue')\n\n@get(\n    '/',\n    response_exclude_fields={'value'},\n)\nasync def handler() -&gt; Result:\n    return Result()  # {'someAnotherValue': 'another_data'}\n</code></pre>"},{"location":"ru/docs/server/response/handler_response/#response_by_alias","title":"response_by_alias","text":"<p>response_by_alias: <code>bool = True</code> \u2014 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440 Pydantic <code>by_alias</code>, \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u044e\u0449\u0438\u0439, \u0441\u043b\u0435\u0434\u0443\u0435\u0442 \u043b\u0438 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u043f\u0441\u0435\u0432\u0434\u043e\u043d\u0438\u043c\u044b \u043f\u043e\u043b\u0435\u0439 \u0432\u043c\u0435\u0441\u0442\u043e \u0438\u0445 \u043e\u0440\u0438\u0433\u0438\u043d\u0430\u043b\u044c\u043d\u044b\u0445 \u0438\u043c\u0435\u043d.</p> <p><pre><code>from pydantic import BaseModel, Field\nfrom rapidy.http import get\n\nclass Result(BaseModel):\n    value: str = Field('data', alias='someValue')\n\n@get(\n    '/',\n    response_by_alias=True,  # &lt;-- default\n)\nasync def handler() -&gt; Result:\n    return Result()  # {\"someValue\": \"data\"}\n</code></pre> <pre><code>...\n@get(\n    '/',\n    response_by_alias=False,\n)\nasync def handler() -&gt; Result:\n    return Result()  # {\"value\": \"data\"}\n</code></pre></p>"},{"location":"ru/docs/server/response/handler_response/#response_exclude_unset","title":"response_exclude_unset","text":"<p>response_exclude_unset: <code>bool = False</code> \u2014 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440 Pydantic <code>exclude_unset</code>, \u0438\u0441\u043a\u043b\u044e\u0447\u0430\u044e\u0449\u0438\u0439 \u0438\u0437 \u043e\u0442\u0432\u0435\u0442\u0430 \u043f\u043e\u043b\u044f, \u043d\u0435 \u0437\u0430\u0434\u0430\u043d\u043d\u044b\u0435 \u044f\u0432\u043d\u043e (\u043e\u0441\u0442\u0430\u0432\u0448\u0438\u0435\u0441\u044f \u0441\u043e \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f\u043c\u0438 \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e).</p> <p><pre><code>from pydantic import BaseModel, Field\nfrom rapidy.http import get\n\nclass Result(BaseModel):\n    value: str = Field('data', alias='someValue')\n    another_value: str = Field('another_data', alias='someAnotherValue')\n\n@get(\n    '/',\n    response_exclude_unset=False,  # &lt;-- default\n)\nasync def handler() -&gt; Result:\n    return Result(someAnotherValue='new_data')  # {\"someValue\": \"data\", \"someAnotherValue\": \"new_data\"}\n</code></pre> <pre><code>...\n@get(\n    '/',\n    response_exclude_unset=True,\n)\nasync def handler() -&gt; Result:\n    return Result(someAnotherValue='new_data')  # {\"someAnotherValue\": \"new_data\"}\n</code></pre></p>"},{"location":"ru/docs/server/response/handler_response/#response_exclude_defaults","title":"response_exclude_defaults","text":"<p>response_exclude_defaults: <code>bool = False</code> \u2014 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440 Pydantic <code>exclude_defaults</code>, \u0438\u0441\u043a\u043b\u044e\u0447\u0430\u044e\u0449\u0438\u0439 \u0438\u0437 \u043e\u0442\u0432\u0435\u0442\u0430 \u043f\u043e\u043b\u044f, \u0447\u044c\u0438 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0441\u043e\u0432\u043f\u0430\u0434\u0430\u044e\u0442 \u0441 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f\u043c\u0438 \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e, \u0434\u0430\u0436\u0435 \u0435\u0441\u043b\u0438 \u043e\u043d\u0438 \u0431\u044b\u043b\u0438 \u044f\u0432\u043d\u043e \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u043b\u0435\u043d\u044b.</p> <p><pre><code>from pydantic import BaseModel, Field\nfrom rapidy.http import get\n\nclass Result(BaseModel):\n    value: str = Field('data', alias='someValue')\n\n@get(\n    '/',\n    response_exclude_defaults=False,  # &lt;-- default\n)\nasync def handler() -&gt; Result:\n    return Result()  # {\"value\": \"data\"}\n</code></pre> <pre><code>...\n@get(\n    '/',\n    response_exclude_defaults=True,\n)\nasync def handler() -&gt; Result:\n    return Result()  # {}\n</code></pre></p>"},{"location":"ru/docs/server/response/handler_response/#response_exclude_none","title":"response_exclude_none","text":"<p>response_exclude_none: <code>bool = False</code> \u2014 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440 Pydantic <code>exclude_none</code>, \u0438\u0441\u043a\u043b\u044e\u0447\u0430\u044e\u0449\u0438\u0439 \u0438\u0437 \u043e\u0442\u0432\u0435\u0442\u0430 \u043f\u043e\u043b\u044f \u0441\u043e \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435\u043c <code>None</code>.</p> <p><pre><code>from pydantic import BaseModel, Field\nfrom rapidy.http import get\n\nclass Result(BaseModel):\n    value: str = Field('data', alias='someValue')\n    none_value: None = None\n\n@get(\n    '/',\n    response_exclude_none=False,  # &lt;-- default\n)\nasync def handler() -&gt; Result:\n    return Result()  # {\"someValue\": \"data\", \"none_value\": null}\n</code></pre> <pre><code>...\n@get(\n    '/',\n    response_exclude_none=True,\n)\nasync def handler() -&gt; Result:\n    return Result()  # {\"someValue\": \"data\"}\n</code></pre></p>"},{"location":"ru/docs/server/response/handler_response/#response_custom_encoder","title":"response_custom_encoder","text":"<p>response_custom_encoder: <code>Callable | None = None</code> \u2014 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440 Pydantic <code>custom_encoder</code>, \u0437\u0430\u0434\u0430\u044e\u0449\u0438\u0439 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0439 \u043a\u043e\u0434\u0438\u0440\u043e\u0432\u0449\u0438\u043a \u0434\u0430\u043d\u043d\u044b\u0445.</p>"},{"location":"ru/docs/server/response/handler_response/#response_json_encoder","title":"response_json_encoder","text":"<p>response_json_encoder: <code>Callable = json.dumps</code> \u2014 \u0432\u044b\u0437\u044b\u0432\u0430\u0435\u043c\u044b\u0439 \u043e\u0431\u044a\u0435\u043a\u0442, \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u044e\u0449\u0438\u0439 \u0434\u0430\u043d\u043d\u044b\u0435 \u0438 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u044e\u0449\u0438\u0439 \u0438\u0445 \u0441\u0442\u0440\u043e\u043a\u043e\u0432\u043e\u0435 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0432 \u0444\u043e\u0440\u043c\u0430\u0442\u0435 JSON. \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u043f\u0440\u0438 <code>json_response(dumps=True, ...)</code>.</p> <pre><code>from typing import Any\nfrom rapidy.http import get\n\ndef custom_encoder(obj: Any) -&gt; str:\n    ...\n\n@get(\n    '/',\n    response_json_encoder=custom_encoder,\n)\nasync def handler() -&gt; dict[str, str]:\n    return {'hello': 'rapidy!'}  # will be converted to a string by Rapidy's internal tools\n</code></pre>"},{"location":"ru/docs/server/response/response_object/","title":"\u041e\u0431\u044a\u0435\u043a\u0442 \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u044f HTTP-\u043e\u0442\u0432\u0435\u0442\u043e\u043c","text":"<p>\u0414\u043b\u044f \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u044f HTTP-\u043e\u0442\u0432\u0435\u0442\u0430\u043c\u0438 <code>Rapidy</code> \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442 \u043e\u0431\u044a\u0435\u043a\u0442 <code>Response</code>.</p> <pre><code>from rapidy.http import Response\n</code></pre> <p>\u0414\u043b\u044f \u043f\u0440\u043e\u0441\u0442\u044b\u0445 \u0441\u0446\u0435\u043d\u0430\u0440\u0438\u0435\u0432 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u044f \u0438\u043b\u0438 \u0441\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u044f \u0434\u0430\u043d\u043d\u044b\u0445 <code>rapidy.http.Response</code> \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u043d\u0435 \u043d\u0443\u0436\u0435\u043d, \u043d\u043e \u0435\u0441\u043b\u0438 \u0432\u044b \u0445\u043e\u0442\u0438\u0442\u0435 \u0433\u0438\u0431\u043a\u043e \u0443\u043f\u0440\u0430\u0432\u043b\u044f\u0442\u044c \u043e\u0442\u0432\u0435\u0442\u043e\u043c \u0432\u0430\u0448\u0435\u0433\u043e HTTP-\u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u0430, \u0442\u043e \u0434\u0430\u043d\u043d\u044b\u0439 \u0440\u0430\u0437\u0434\u0435\u043b \u0440\u0430\u0441\u0441\u043a\u0430\u0436\u0435\u0442 \u043e \u0442\u043e\u043c \u043a\u0430\u043a \u044d\u0442\u043e \u043c\u043e\u0436\u043d\u043e \u0434\u0435\u043b\u0430\u0442\u044c.</p> <p>\u041e\u0431\u044a\u0435\u043a\u0442 <code>Response</code> \u0432 <code>Rapidy</code> \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u043e\u0431\u0435\u0440\u0442\u043a\u043e\u0439 \u043d\u0430\u0434 <code>aiohttp.Response</code>.</p> <p><code>rapidy.http.Response</code> \u0432 \u043e\u0442\u043b\u0438\u0447\u0438\u0435 \u043e\u0442 <code>aiohttp.Response</code> \u0441\u0442\u0430\u043b \u0433\u043e\u0440\u0430\u0437\u0434\u043e \u0431\u043e\u043b\u0435\u0435 \u0432\u0435\u0440\u043d\u0435\u0443\u0440\u043e\u0432\u043d\u0435\u0432\u044b\u043c, \u0443 \u043d\u0435\u0433\u043e \u043f\u043e\u044f\u0432\u0438\u043b\u0430\u0441\u044c \u0443\u0434\u043e\u0431\u043d\u0430\u044f \u0441\u0435\u0440\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0434\u0430\u043d\u043d\u044b\u0445.</p> <p>\u041f\u043e\u0434\u0440\u043e\u0431\u043d\u0435\u0435 \u043e <code>aiohttp.Response</code> \u043c\u043e\u0436\u043d\u043e \u0443\u0437\u043d\u0430\u0442\u044c \u0437\u0434\u0435\u0441\u044c.</p>"},{"location":"ru/docs/server/response/response_object/#_1","title":"\u0410\u0442\u0442\u0440\u0438\u0431\u0443\u0442\u044b","text":""},{"location":"ru/docs/server/response/response_object/#body","title":"body","text":"<p>body: <code>Any | None = None</code> \u2014 \u0442\u0435\u043b\u043e \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f (\u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u043f\u0440\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u0438 \u043b\u044e\u0431\u044b\u043c \u043e\u0431\u044a\u0435\u043a\u0442\u043e\u043c).</p> <p>\u0427\u0442\u043e\u0431\u044b \u0437\u0430\u0434\u0430\u0442\u044c <code>body</code>, \u0441\u043e\u0437\u0434\u0430\u0439\u0442\u0435 \u043e\u0431\u044a\u0435\u043a\u0442 <code>Response(body=...)</code> \u0438\u043b\u0438 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435 \u0441\u0435\u0442\u0442\u0435\u0440 <code>body</code> \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u044e\u0449\u0435\u0433\u043e \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440\u0430. <pre><code>from rapidy.http import Response, get\n\n@get('/')\nasync def handler() -&gt; Response:\n    return Response(\n        body={'hello': 'rapidy'},\n    )\n\n@get('/')\nasync def handler() -&gt; ...:\n    response = Response()\n    response.body = {'hello': 'rapidy'}\n    ...\n\n@get('/')\nasync def handler(response: Response) -&gt; ...:\n    response.body = {'hello': 'rapidy'}\n    ...\n</code></pre></p> <p>\u0414\u043b\u044f \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u044f <code>body</code> \u0432\u043e\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435\u0441\u044c \u0433\u0435\u0442\u0442\u0435\u0440\u043e\u043c <code>body</code>, \u043e\u0431\u044a\u0435\u043a\u0442\u0430 <code>Response</code>. <pre><code>...\n@get('/')\nasync def handler() -&gt; ...:\n    response = Response(body={'hello': 'rapidy'})\n    body = response.body\n    ...\n</code></pre></p> <p>\u041b\u043e\u0433\u0438\u043a\u0430 \u043f\u043e\u0434\u0433\u043e\u0442\u043e\u0432\u043a\u0438 \u0438 \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u044f \u0434\u0430\u043d\u043d\u044b\u0445 \u0437\u0430\u0432\u044f\u0437\u0430\u043d\u0430 \u043d\u0430 \u0430\u0442\u0442\u0440\u0438\u0431\u0443\u0442\u0435 content_type.</p> <p>\u041e\u0431\u044a\u0435\u043a\u0442 \u0442\u0438\u043f\u0430 <code>bytes</code> \u0431\u0443\u0434\u0435\u0442 \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u0435\u043d \u043a\u0430\u043a \u0442\u0435\u043b\u043e \u0431\u0435\u0437 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0439.</p> <p>\u0415\u0441\u043b\u0438 \u0432\u044b \u0445\u043e\u0442\u0438\u0442\u0435, \u0447\u0442\u043e\u0431\u044b \u0440\u0430\u0431\u043e\u0442\u0430\u043b\u0438 \u0444\u043b\u0430\u0433\u0438 <code>pydantic</code>, \u0442\u0430\u043a\u0438\u0435 \u043a\u0430\u043a <code>exclude_none</code> \u0438 \u0434\u0440\u0443\u0433\u0438\u0435, \u043f\u0435\u0440\u0435\u0434\u0430\u043d\u043d\u044b\u0439 \u043e\u0431\u044a\u0435\u043a\u0442 \u0434\u043e\u043b\u0436\u0435\u043d \u0431\u044b\u0442\u044c \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440\u043e\u043c <code>pydantic.BaseModel</code>.</p>"},{"location":"ru/docs/server/response/response_object/#text","title":"text","text":"<p>text: <code>Any | None = None</code> \u2014 \u0442\u0435\u043a\u0441\u0442\u043e\u0432\u043e\u0435 \u0442\u0435\u043b\u043e \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f (\u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u043f\u0440\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u0438 \u043b\u044e\u0431\u044b\u043c \u043e\u0431\u044a\u0435\u043a\u0442\u043e\u043c).</p> <p>\u0427\u0442\u043e\u0431\u044b \u0437\u0430\u0434\u0430\u0442\u044c \u0442\u0435\u043b\u043e \u043e\u0442\u0432\u0435\u0442\u0430 \u043a\u0430\u043a <code>text</code>, \u0441\u043e\u0437\u0434\u0430\u0439\u0442\u0435 \u043e\u0431\u044a\u0435\u043a\u0442 <code>Response(text=...)</code> \u0438\u043b\u0438 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435 \u0441\u0435\u0442\u0442\u0435\u0440 <code>text</code> \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u044e\u0449\u0435\u0433\u043e \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440\u0430. <pre><code>from rapidy.http import Response, get\n\n@get('/')\nasync def handler() -&gt; Response:\n    return Response(\n        text = 'hello rapidy',\n    )\n\n@get('/')\nasync def handler() -&gt; ...:\n    response = Response()\n    response.text = 'hello rapidy'\n    ...\n\n@get('/')\nasync def handler(response: Response) -&gt; ...:\n    response.text = 'hello rapidy'\n    ...\n</code></pre></p> <p>\u0414\u043b\u044f \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u044f \u0442\u0435\u043b\u0430 \u043e\u0442\u0432\u0435\u0442\u0430 \u043a\u0430\u043a <code>text</code> \u0432\u043e\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435\u0441\u044c \u0433\u0435\u0442\u0442\u0435\u0440\u043e\u043c <code>text</code>, \u043e\u0431\u044a\u0435\u043a\u0442\u0430 <code>Response</code>. <pre><code>...\n@get('/')\nasync def handler() -&gt; ...:\n    response = Response(text='hello rapidy')\n    body = response.text\n    ...\n</code></pre></p> <p>\u041b\u043e\u0433\u0438\u043a\u0430 \u043f\u043e\u0434\u0433\u043e\u0442\u043e\u0432\u043a\u0438 \u0438 \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u044f \u0434\u0430\u043d\u043d\u044b\u0445 \u0437\u0430\u0432\u044f\u0437\u0430\u043d\u0430 \u043d\u0430 \u0430\u0442\u0442\u0440\u0438\u0431\u0443\u0442\u0435 content_type.</p> <p>\u041e\u0431\u044a\u0435\u043a\u0442 \u0442\u0438\u043f\u0430 <code>str</code> \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u043a\u0430\u043a \u0442\u0435\u043b\u043e \u0431\u0435\u0437 \u043f\u0440\u043e\u0432\u0435\u0440\u043e\u043a (<code>content_type=\"text/plain\"</code>).</p> <p>\u0415\u0441\u043b\u0438 \u0434\u0430\u043d\u043d\u044b\u0435 \u043d\u0435 <code>str</code>, \u043f\u0440\u0438\u043c\u0435\u043d\u044f\u0435\u0442\u0441\u044f \u0442\u0430 \u0436\u0435 \u043b\u043e\u0433\u0438\u043a\u0430 \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u044f \u0434\u0430\u043d\u043d\u044b\u0445, \u0447\u0442\u043e \u0438 \u0434\u043b\u044f body.</p>"},{"location":"ru/docs/server/response/response_object/#content_type","title":"content_type","text":"<p>content_type: <code>str | ContentType | None = None</code> \u2014 \u0430\u0442\u0442\u0440\u0438\u0431\u0443\u0442 \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u044e\u0449\u0438\u0439 \u0443\u043f\u0440\u0430\u0432\u043b\u044f\u0442\u044c \u0437\u0430\u0433\u043e\u043b\u043e\u0432\u043a\u043e\u043c <code>Content-Type</code>.</p> <p>\u0417\u0430\u0433\u043e\u043b\u043e\u0432\u043e\u043a <code>Content-Type</code> \u0441\u043e\u043e\u0431\u0449\u0430\u0435\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0443 (\u0431\u0440\u0430\u0443\u0437\u0435\u0440\u0443, API-\u043a\u043b\u0438\u0435\u043d\u0442\u0443, \u0434\u0440\u0443\u0433\u043e\u043c\u0443 \u0441\u0435\u0440\u0432\u0435\u0440\u0443), \u043a\u0430\u043a\u043e\u0439 \u0442\u0438\u043f \u0434\u0430\u043d\u043d\u044b\u0445 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442\u0441\u044f \u0432 \u0442\u0435\u043b\u0435 HTTP-\u043e\u0442\u0432\u0435\u0442\u0430.</p> <p>\u0427\u0442\u043e\u0431\u044b \u0437\u0430\u0434\u0430\u0442\u044c <code>content_type</code>, \u0441\u043e\u0437\u0434\u0430\u0439\u0442\u0435 \u043e\u0431\u044a\u0435\u043a\u0442 <code>Response(content_type=...)</code> \u0438\u043b\u0438 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435 \u0441\u0435\u0442\u0442\u0435\u0440 <code>content_type</code> \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u044e\u0449\u0435\u0433\u043e \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440\u0430. <pre><code>from rapidy.http import get, Response, ContentType\n\n@get('/')\nasync def handler() -&gt; Response:\n    return Response(\n        body={'hello': 'rapidy!'},\n        content_type=ContentType.json,\n        # or\n        content_type='application/json',\n    )\n\n@get('/')\nasync def handler() -&gt; dict[str, str]:\n    response = Response()\n\n    response.content_type = ContentType.json\n    # or\n    response.content_type = 'application/json'\n\n    return {'hello': 'rapidy!'}\n\n@get('/')\nasync def handler(response: Response) -&gt; dict[str, str]:\n    response.content_type = ContentType.json\n    # or\n    response.content_type = 'application/json'\n\n    return {'hello': 'rapidy!'}\n</code></pre></p> <p>\u0414\u043b\u044f \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u044f <code>content_type</code> \u0432\u043e\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435\u0441\u044c \u0433\u0435\u0442\u0442\u0435\u0440\u043e\u043c <code>content_type</code>, \u043e\u0431\u044a\u0435\u043a\u0442\u0430 <code>Response</code>. <pre><code>...\n@get('/')\nasync def handler() -&gt; ...:\n    response = Response()\n    content_type = response.content_type\n    ...\n</code></pre></p> <p>\u0415\u0441\u043b\u0438 \u0443\u043a\u0430\u0437\u0430\u043d <code>content_type</code>, \u043f\u0435\u0440\u0435\u0434\u0430\u043d\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 \u0431\u0443\u0434\u0443\u0442 \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u044b \u0432 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0438\u0438 \u0441 \u043d\u0438\u043c.</p> <p>\u0415\u0441\u043b\u0438 <code>content_type</code> \u043d\u0435 \u0443\u043a\u0430\u0437\u0430\u043d - <code>content_type</code> \u0431\u0443\u0434\u0435\u0442 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d \u0430\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438 \u0432 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0438 \u043e\u0442 \u0442\u0438\u043f\u0430 \u0434\u0430\u043d\u043d\u044b\u0445 \u043a\u043e\u0442\u043e\u0440\u043e\u0435 \u043e\u0442\u0434\u0430\u0435\u0442 \u0441\u0435\u0440\u0432\u0435\u0440.</p> content_type=\"application/json <p><code>content_type=\"application/json\"</code> \u2014 \u0434\u0430\u043d\u043d\u044b\u0435 \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u0443\u044e\u0442\u0441\u044f \u0432 <code>JSON</code> \u0441 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\u043c jsonify(dumps=True) \u0438 \u043a\u043e\u0434\u0438\u0440\u0443\u044e\u0442\u0441\u044f \u0432 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0438\u0438 \u0441 charset.</p> <pre><code>from rapidy.http import get, Response, ContentType\n\n@get('/')\nasync def handler() -&gt; Response:\n    return Response(\n        body={'hello': 'rapidy!'},\n        content_type=ContentType.json,\n    )  # {\"hello\": \"rapidy!\"}\n</code></pre> <p>\u0415\u0441\u043b\u0438 \u043f\u0435\u0440\u0435\u0434\u0430\u043d\u043d\u044b\u0439 \u043e\u0431\u044a\u0435\u043a\u0442 \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u0441\u0442\u0440\u043e\u043a\u043e\u0439 <code>Response(body=\"string\")</code>, \u0442\u043e \u0441\u0442\u0440\u043e\u043a\u0430, \u0441\u043e\u0433\u043b\u0430\u0441\u043d\u043e \u0441\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u0443 JSON, \u0431\u0443\u0434\u0435\u0442 \u044d\u043a\u0440\u0430\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0430 \u0434\u0432\u0430\u0436\u0434\u044b: <pre><code>from rapidy.http import get, Response, ContentType\n\n@get('/')\nasync def handler() -&gt; Response:\n    return Response(\n        body='hello rapidy!',\n        content_type=ContentType.json,\n    )  # \"'hello rapidy!'\"\n</code></pre></p> content_type=\"text/* <p><code>content_type=\"text/*\"</code> (\u043b\u044e\u0431\u043e\u0439 \u0442\u0435\u043a\u0441\u0442\u043e\u0432\u044b\u0439 \u0442\u0438\u043f: <code>text/plain</code>, <code>text/html</code> \u0438 \u0442. \u0434.) - \u0435\u0441\u043b\u0438 \u0434\u0430\u043d\u043d\u044b\u0435 \u0438\u043c\u0435\u044e\u0442 \u0442\u0438\u043f <code>str</code>, \u043e\u043d\u0438 \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u044e\u0442\u0441\u044f \u0431\u0435\u0437 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0439. \u0412 \u043f\u0440\u043e\u0442\u0438\u0432\u043d\u043e\u043c \u0441\u043b\u0443\u0447\u0430\u0435 \u043e\u043d\u0438 \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u0443\u044e\u0442\u0441\u044f \u0432 \u0441\u0442\u0440\u043e\u043a\u0443 \u0447\u0435\u0440\u0435\u0437 jsonify(dumps=False).</p> <pre><code>from rapidy.http import get, Response, ContentType\n\n@get('/')\nasync def handler() -&gt; Response:\n    return Response(\n        text='hello rapidy!',\n        content_type=ContentType.text_any,\n    )  # \"hello rapidy!\"\n</code></pre> <p>\u0415\u0441\u043b\u0438 \u043f\u043e\u0441\u043b\u0435 <code>jsonify(dumps=False)</code> \u043e\u0431\u044a\u0435\u043a\u0442 \u043d\u0435 \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u0441\u0442\u0440\u043e\u043a\u043e\u0439, \u043e\u043d \u0434\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u043e \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u0443\u0435\u0442\u0441\u044f \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e json_encoder, \u0447\u0442\u043e\u0431\u044b \u0438\u0437\u0431\u0435\u0436\u0430\u0442\u044c \u0434\u0432\u043e\u0439\u043d\u043e\u0433\u043e \u044d\u043a\u0440\u0430\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f.</p> content_type - \u043b\u044e\u0431\u043e\u0439 \u0434\u0440\u0443\u0433\u043e\u0439 MIME-type. <p>\u0415\u0441\u043b\u0438 \u0434\u0430\u043d\u043d\u044b\u0435 \u0438\u043c\u0435\u044e\u0442 \u0442\u0438\u043f <code>bytes</code>, \u043e\u043d\u0438 \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u044e\u0442\u0441\u044f \u0431\u0435\u0437 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0439. \u0412 \u043f\u0440\u043e\u0442\u0438\u0432\u043d\u043e\u043c \u0441\u043b\u0443\u0447\u0430\u0435 \u043e\u043d\u0438 \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u0443\u044e\u0442\u0441\u044f \u0432 \u0441\u0442\u0440\u043e\u043a\u0443 \u0441 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\u043c jsonify(dumps=True) \u0438 \u043a\u043e\u0434\u0438\u0440\u0443\u044e\u0442\u0441\u044f \u0432 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0438\u0438 \u0441 charset.</p> <p>\u0415\u0441\u043b\u0438 <code>content_type</code> \u043d\u0435 \u0443\u043a\u0430\u0437\u0430\u043d, \u043e\u043d \u0443\u0441\u0442\u0430\u043d\u0430\u0432\u043b\u0438\u0432\u0430\u0435\u0442\u0441\u044f \u0430\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438:</p> <ul> <li> <p><code>body: dict | BaseModel | dataclass</code> \u2192 <code>content_type=\"application/json\"</code> <pre><code>Response(body={\"hello\": \"rapidy\"})\nResponse(body=SomeModel(hello=\"rapidy\"))\n</code></pre></p> </li> <li> <p><code>body: str | Enum | int | float | Decimal | bool</code> \u2192 <code>content_type=\"text/plain\"</code> <pre><code>Response(body=\"string\")\nResponse(body=SomeEnum.string)\nResponse(body=1)\nResponse(body=1.0)\nResponse(body=Decimal(\"1.0\"))\nResponse(body=True)\n</code></pre></p> </li> <li> <p><code>body: Any</code> \u2192 <code>content_type=\"application/octet-stream\"</code> <pre><code>Response(body=b'bytes')\nResponse(body=AnotherType())\n</code></pre></p> </li> </ul>"},{"location":"ru/docs/server/response/response_object/#status","title":"status","text":"<p>status: <code>int = 200</code> \u2014 HTTP-\u043a\u043e\u0434 \u043e\u0442\u0432\u0435\u0442\u0430.</p> <pre><code>from rapidy.http import Response, get\n\n@get('/')\nasync def handler() -&gt; Response:\n    return Response(\n        status=201,\n    )\n</code></pre>"},{"location":"ru/docs/server/response/response_object/#set_status","title":"set_status","text":"<p>\u0414\u043b\u044f \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u044f <code>status</code> \u0432\u043e\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435\u0441\u044c \u043c\u0435\u0442\u043e\u0434\u043e\u043c <code>set_status</code>, \u043e\u0431\u044a\u0435\u043a\u0442\u0430 <code>Response</code>.</p> <pre><code>...\n@get('/')\nasync def handler() -&gt; ...:\n    response = Response()\n    response.set_status(200)\n    ...\n\n@get('/')\nasync def handler(response: Response) -&gt; ...:\n    response.set_status(200)\n    ...\n</code></pre>"},{"location":"ru/docs/server/response/response_object/#headers","title":"headers","text":"<p>headers: <code>Mapping[str, str] | None = None</code> \u2014 \u0434\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u0437\u0430\u0433\u043e\u043b\u043e\u0432\u043a\u0438 \u043e\u0442\u0432\u0435\u0442\u0430.</p> <pre><code>from rapidy.http import Response, get\n\n@get('/')\nasync def handler() -&gt; Response:\n    return Response(\n        headers={'Some-Header': '123'},\n    )\n</code></pre> <p>\u0414\u043b\u044f \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u044f <code>headers</code> \u0432\u043e\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435\u0441\u044c \u0433\u0435\u0442\u0442\u0435\u0440\u043e\u043c <code>headers</code>, \u043e\u0431\u044a\u0435\u043a\u0442\u0430 <code>Response</code>. <pre><code>...\n@get('/')\nasync def handler() -&gt; ...:\n    response = Response()\n    headers = response.headers\n    ...\n</code></pre></p>"},{"location":"ru/docs/server/response/response_object/#cookies","title":"cookies","text":"<p>cookies: <code>SimpleCookie | None = None</code> - \u0444\u0430\u0439\u043b\u044b cookie \u043e\u0442\u0432\u0435\u0442\u0430 \u0434\u043b\u044f \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0438 \u0438\u0445 \u0431\u0440\u0430\u0443\u0437\u0435\u0440\u043e\u043c.</p> <p>\u0414\u043b\u044f \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u044f <code>cookie</code> \u0432\u043e\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435\u0441\u044c \u0433\u0435\u0442\u0442\u0435\u0440\u043e\u043c <code>cookies</code>, \u043e\u0431\u044a\u0435\u043a\u0442\u0430 <code>Response</code>. <pre><code>...\n@get('/')\nasync def handler() -&gt; ...:\n    response = Response()\n    cookies = response.cookies\n    ...\n</code></pre></p>"},{"location":"ru/docs/server/response/response_object/#set_cookie","title":"set_cookie","text":"<p>\u0414\u043b\u044f \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u044f <code>cookies</code> \u0432\u043e\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435\u0441\u044c \u043c\u0435\u0442\u043e\u0434\u043e\u043c <code>set_cookie</code>, \u043e\u0431\u044a\u0435\u043a\u0442\u0430 <code>Response</code>. <pre><code>from rapidy.http import Response, get\n\n@get('/')\nasync def handler() -&gt; ...:\n    response = Response()\n    response.set_cookie('SomeCookie', 'SomeValue')\n    ...\n\n@get('/')\nasync def handler(response: Response) -&gt; ...:\n    response.set_cookie('SomeCookie', 'SomeValue')\n    ...\n</code></pre></p>"},{"location":"ru/docs/server/response/response_object/#del_cookie","title":"del_cookie","text":"<p>\u0414\u043b\u044f \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u044f <code>cookie</code> \u0432\u043e\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435\u0441\u044c \u043c\u0435\u0442\u043e\u0434\u043e\u043c <code>del_cookie</code>, \u043e\u0431\u044a\u0435\u043a\u0442\u0430 <code>Response</code>. <pre><code>...\n@get('/')\nasync def handler() -&gt; ...:\n    response = Response()\n    response.del_cookie('SomeCookie')\n    ...\n</code></pre></p>"},{"location":"ru/docs/server/response/response_object/#charset","title":"charset","text":"<p>charset: <code>str | Charset | None = 'utf-8'</code> \u2014 \u043a\u043e\u0434\u0438\u0440\u043e\u0432\u043a\u0430, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c\u0430\u044f \u0434\u043b\u044f \u043a\u043e\u0434\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u0438 \u0434\u0435\u043a\u043e\u0434\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u0434\u0430\u043d\u043d\u044b\u0445.</p> <p>\u0427\u0442\u043e\u0431\u044b \u0437\u0430\u0434\u0430\u0442\u044c <code>charset</code>, \u0441\u043e\u0437\u0434\u0430\u0439\u0442\u0435 \u043e\u0431\u044a\u0435\u043a\u0442 <code>Response(charset=...)</code> \u0438\u043b\u0438 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435 \u0441\u0435\u0442\u0442\u0435\u0440 <code>charset</code> \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u044e\u0449\u0435\u0433\u043e \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440\u0430. <pre><code>from rapidy.http import Response, get, Charset\n\n@get('/')\nasync def handler() -&gt; Response:\n    return Response(\n        charset=Charset.utf32,\n        # or\n        charset='utf32',\n    )\n\n@get('/')\nasync def handler(response: Response) -&gt; ...:\n    response.charset = Charset.utf32\n    # or\n    response.charset = 'utf32'\n</code></pre></p> <p>\u0414\u043b\u044f \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u044f <code>charset</code> \u0432\u043e\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435\u0441\u044c \u0433\u0435\u0442\u0442\u0435\u0440\u043e\u043c <code>charset</code>, \u043e\u0431\u044a\u0435\u043a\u0442\u0430 <code>Response</code>. <pre><code>...\n@get('/')\nasync def handler() -&gt; ...:\n    response = Response()\n    charset = response.charset\n    ...\n</code></pre></p>"},{"location":"ru/docs/server/response/response_object/#last_modified","title":"last_modified","text":"<p>last_modified: <code>int | float | datetime.datetime | str | None = None</code> \u2014 \u0430\u0442\u0442\u0440\u0438\u0431\u0443\u0442 \u043e\u0442\u0432\u0435\u0447\u0430\u0435\u0442 \u0437\u0430 \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0437\u0430\u0433\u043e\u043b\u043e\u0432\u043a\u043e\u043c <code>Last-Modified</code>.</p> <p>\u0414\u043b\u044f \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u044f <code>last_modified</code> \u0432\u043e\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435\u0441\u044c \u0441\u0435\u0442\u0442\u0435\u0440\u043e\u043c <code>last_modified</code>, \u043e\u0431\u044a\u0435\u043a\u0442\u0430 <code>Response</code>. <pre><code>import datetime\nfrom rapidy.http import get, Response\n\n@get('/')\nasync def handler() -&gt; ...:\n    response = Response()\n    # or\n    response.last_modified = datetime.datetime(2024, 2, 24, 12, 0, 0, tzinfo=datetime.timezone.utc)\n    # or\n    response.last_modified = 'Wed, 21 Oct 2024 07:28:00 GMT'\n    ...\n\n@get('/')\nasync def handler(response: Response) -&gt; ...:\n    # or\n    response.last_modified = datetime.datetime(2024, 2, 24, 12, 0, 0, tzinfo=datetime.timezone.utc)\n    # or\n    response.last_modified = 'Wed, 21 Oct 2024 07:28:00 GMT'\n    ...\n</code></pre></p> <p>\u0414\u043b\u044f \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u044f <code>last_modified</code> \u0432\u043e\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435\u0441\u044c \u0433\u0435\u0442\u0442\u0435\u0440\u043e\u043c <code>last_modified</code>, \u043e\u0431\u044a\u0435\u043a\u0442\u0430 <code>Response</code>. <pre><code>...\n@get('/')\nasync def handler() -&gt; ...:\n    response = Response()\n    last_modified = response.last_modified\n    ...\n</code></pre></p> \u041f\u043e\u043b\u043d\u043e\u0446\u0435\u043d\u043d\u044b\u0439 \u043f\u0440\u0438\u043c\u0435\u0440 \u043f\u043e\u0441\u0442\u0440\u043e\u0435\u043d\u0438\u044f HTTP-\u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u0430 \u0441 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\u043c last_modified <pre><code>from datetime import datetime, timezone\nfrom typing import Annotated\nfrom pydantic import BeforeValidator\nfrom rapidy.http import Header, HTTPNotModified, Response, get\n\ndef parse_http_date(value: str) -&gt; datetime:\n    return datetime.strptime(value, '%a, %d %b %Y %H:%M:%S GMT').replace(tzinfo=timezone.utc)\n\nIFModifiedSince = Annotated[\n    datetime | None,\n    BeforeValidator(parse_http_date),\n    Header(None, alias='If-Modified-Since'),\n]\n\n@get('/')\nasync def handler(\n    response: Response,\n    if_modified_since: IFModifiedSince,\n) -&gt; str:\n    last_mod_time = datetime(2024, 2, 24, 12, 0, 0, tzinfo=timezone.utc)\n\n    # Check if the client sent the `If-Modified-Since` header\n    if if_modified_since and if_modified_since &gt;= last_mod_time:\n        raise HTTPNotModified\n\n    response.last_modified = last_mod_time  # Set the last modified date\n    return 'success'\n</code></pre>"},{"location":"ru/docs/server/response/response_object/#etag","title":"etag","text":"<p>etag: <code>ETag | str</code> - \u0430\u0442\u0442\u0440\u0438\u0431\u0443\u0442 \u043e\u0442\u0432\u0435\u0447\u0430\u0435\u0442 \u0437\u0430 \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0437\u0430\u0433\u043e\u043b\u043e\u0432\u043a\u043e\u043c <code>Etag</code>.</p> <p>\u0414\u043b\u044f \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u044f <code>etag</code> \u0432\u043e\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435\u0441\u044c \u0441\u0435\u0442\u0442\u0435\u0440\u043e\u043c <code>etag</code>, \u043e\u0431\u044a\u0435\u043a\u0442\u0430 <code>Response</code>. <pre><code>from rapidy.http import get, Response\n\n@get('/')\nasync def handler() -&gt; ...:\n    response = Response()\n    response.etag = '33a64df551425fcc55e4d42a148795d9f25f89d4'\n    ...\n\n@get('/')\nasync def handler(response: Response) -&gt; ...:\n    response.etag = '33a64df551425fcc55e4d42a148795d9f25f89d4'\n    ...\n</code></pre></p> <p>\u0414\u043b\u044f \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u044f <code>etag</code> \u0432\u043e\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435\u0441\u044c \u0433\u0435\u0442\u0442\u0435\u0440\u043e\u043c <code>etag</code>, \u043e\u0431\u044a\u0435\u043a\u0442\u0430 <code>Response</code>. <pre><code>...\n@get('/')\nasync def handler() -&gt; ...:\n    response = Response()\n    etag = response.etag\n    ...\n</code></pre></p> \u041f\u043e\u043b\u043d\u043e\u0446\u0435\u043d\u043d\u044b\u0439 \u043f\u0440\u0438\u043c\u0435\u0440 \u043f\u043e\u0441\u0442\u0440\u043e\u0435\u043d\u0438\u044f HTTP-\u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u0430 \u0441 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\u043c etag. <pre><code>import hashlib\nfrom rapidy.http import Header, HTTPNotModified, Response, get\n\n@get('/')\nasync def handler(\n    response: Response,\n    if_none_match: str | None = Header(None, alias='If-None-Match'),\n) -&gt; str:\n    content = 'success'\n\n    # Generate ETag based on content\n    etag_value = hashlib.md5(content.encode()).hexdigest()\n\n    # Check If-None-Match\n    if if_none_match and if_none_match == etag_value:\n        raise HTTPNotModified\n\n    response.etag = etag_value\n\n    return content\n</code></pre>"},{"location":"ru/docs/server/response/response_object/#include","title":"include","text":"<p>include: <code>set[str] | dict[str, Any] | None = None</code> \u2014 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440 <code>include</code> \u0438\u0437 Pydantic, \u0443\u043a\u0430\u0437\u044b\u0432\u0430\u044e\u0449\u0438\u0439, \u043a\u0430\u043a\u0438\u0435 \u043f\u043e\u043b\u044f \u0432\u043a\u043b\u044e\u0447\u0430\u0442\u044c.</p> <pre><code>from pydantic import BaseModel, Field\nfrom rapidy.http import Response, get\n\nclass Result(BaseModel):\n    value: str = Field('data', alias='someValue')\n    another_value: str = Field('another_data', alias='someAnotherValue')\n\n@get('/')\nasync def handler() -&gt; Response:\n    return Response(\n        Result(),\n        include={'value'},\n    )  # {'someValue': 'data'}\n</code></pre>"},{"location":"ru/docs/server/response/response_object/#exclude","title":"exclude","text":"<p>exclude: <code>set[str] | dict[str, Any] | None = None</code> \u2014 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440 <code>exclude</code> \u0438\u0437 Pydantic, \u0443\u043a\u0430\u0437\u044b\u0432\u0430\u044e\u0449\u0438\u0439, \u043a\u0430\u043a\u0438\u0435 \u043f\u043e\u043b\u044f \u0438\u0441\u043a\u043b\u044e\u0447\u0430\u0442\u044c.</p> <pre><code>from pydantic import BaseModel, Field\nfrom rapidy.http import Response, get\n\nclass Result(BaseModel):\n    value: str = Field('data', alias='someValue')\n    another_value: str = Field('another_data', alias='someAnotherValue')\n\n@get('/')\nasync def handler() -&gt; Response:\n    return Response(\n        Result(),\n        exclude={'value'},\n    )  # {'someAnotherValue': 'another_data'}\n</code></pre>"},{"location":"ru/docs/server/response/response_object/#by_alias","title":"by_alias","text":"<p>by_alias: <code>bool = True</code> \u2014 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440 <code>by_alias</code> \u0438\u0437 Pydantic, \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u044e\u0449\u0438\u0439, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u043b\u0438 \u043f\u0441\u0435\u0432\u0434\u043e\u043d\u0438\u043c\u044b \u0430\u0442\u0440\u0438\u0431\u0443\u0442\u043e\u0432 \u043f\u0440\u0438 \u0441\u0435\u0440\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438.</p> <p><pre><code>from pydantic import BaseModel, Field\nfrom rapidy.http import get, Response\n\nclass Result(BaseModel):\n    value: str = Field('data', alias='someValue')\n\n@get('/',)\nasync def handler() -&gt; Response:\n    return Response(\n        Result(),\n        by_alias=True,  # &lt;-- default\n    )  # {\"someValue\": \"data\"}\n</code></pre> <pre><code>...\n@get('/')\nasync def handler() -&gt; Response:\n    return Response(\n        Result(),\n        by_alias=False,\n    )  # {\"value\": \"data\"}\n</code></pre></p>"},{"location":"ru/docs/server/response/response_object/#exclude_unset","title":"exclude_unset","text":"<p>exclude_unset: <code>bool = False</code> \u2014 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440 <code>exclude_unset</code> \u0438\u0437 Pydantic, \u0438\u0441\u043a\u043b\u044e\u0447\u0430\u044e\u0449\u0438\u0439 \u043f\u043e\u043b\u044f, \u043d\u0435\u044f\u0432\u043d\u043e \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u043b\u0435\u043d\u043d\u044b\u0435 \u0432 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e.</p> <p><pre><code>from pydantic import BaseModel, Field\nfrom rapidy.http import Response, get\n\nclass Result(BaseModel):\n    value: str = Field('data', alias='someValue')\n    another_value: str = Field('another_data', alias='someAnotherValue')\n\n@get('/')\nasync def handler() -&gt; Response:\n    return Response(\n        Result(someAnotherValue='new_data'),\n        exclude_unset=False,  # &lt;-- default\n    )  # {\"someValue\": \"data\", \"someAnotherValue\": \"new_data\"}\n</code></pre> <pre><code>...\n@get('/')\nasync def handler() -&gt; Response:\n    return Response(\n        Result(someAnotherValue='new_data'),\n        exclude_unset=True,\n    )  # {\"someAnotherValue\": \"new_data\"}\n</code></pre></p>"},{"location":"ru/docs/server/response/response_object/#exclude_defaults","title":"exclude_defaults","text":"<p>exclude_defaults: <code>bool = False</code> \u2014 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440 <code>exclude_defaults</code> \u0438\u0437 Pydantic, \u0438\u0441\u043a\u043b\u044e\u0447\u0430\u044e\u0449\u0438\u0439 \u043f\u043e\u043b\u044f, \u0438\u043c\u0435\u044e\u0449\u0438\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e, \u0434\u0430\u0436\u0435 \u0435\u0441\u043b\u0438 \u043e\u043d\u0438 \u0431\u044b\u043b\u0438 \u044f\u0432\u043d\u043e \u0437\u0430\u0434\u0430\u043d\u044b.</p> <p><pre><code>from pydantic import BaseModel, Field\nfrom rapidy.http import Response, get\n\nclass Result(BaseModel):\n    value: str = Field('data', alias='someValue')\n\n@get('/')\nasync def handler() -&gt; Response:\n    return Response(\n        Result(),\n        exclude_defaults=False,  # &lt;-- default\n    )  # {\"value\": \"data\"}\n</code></pre> <pre><code>...\n@get('/')\nasync def handler() -&gt; Response:\n    return Response(\n        Result(),\n        exclude_defaults=True,\n    )  # {}\n</code></pre></p>"},{"location":"ru/docs/server/response/response_object/#exclude_none","title":"exclude_none","text":"<p>exclude_none: <code>bool = False</code> \u2014 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440 <code>exclude_none</code> \u0438\u0437 Pydantic, \u0438\u0441\u043a\u043b\u044e\u0447\u0430\u044e\u0449\u0438\u0439 \u0438\u0437 \u0432\u044b\u0432\u043e\u0434\u0430 \u043f\u043e\u043b\u044f \u0441\u043e \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435\u043c <code>None</code>.</p> <p><pre><code>from pydantic import BaseModel, Field\nfrom rapidy.http import Response, get\n\nclass Result(BaseModel):\n    value: str = Field('data', alias='someValue')\n    none_value: None = None\n\n@get('/')\nasync def handler() -&gt; Response:\n    return Response(\n        Result(),\n        exclude_none=False,  # &lt;-- default\n    )  # {\"someValue\": \"data\", \"none_value\": null}\n</code></pre> <pre><code>...\n@get('/')\nasync def handler() -&gt; Response:\n    return Response(\n        Result(),\n        exclude_none=True,\n    )  # {\"someValue\": \"data\"}\n</code></pre></p>"},{"location":"ru/docs/server/response/response_object/#custom_encoder","title":"custom_encoder","text":"<p>custom_encoder: <code>Callable | None = None</code> \u2014 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440 <code>custom_encoder</code> \u0438\u0437 Pydantic, \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u044e\u0449\u0438\u0439 \u0437\u0430\u0434\u0430\u0442\u044c \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0439 \u043a\u043e\u0434\u0438\u0440\u043e\u0432\u0449\u0438\u043a.</p>"},{"location":"ru/docs/server/response/response_object/#json_encoder","title":"json_encoder","text":"<p>json_encoder: <code>Callable = json.dumps</code> \u2014 \u0444\u0443\u043d\u043a\u0446\u0438\u044f, \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u044e\u0449\u0430\u044f \u043e\u0431\u044a\u0435\u043a\u0442 \u0438 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u044e\u0449\u0430\u044f \u0435\u0433\u043e <code>JSON</code>-\u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u0435.</p> <pre><code>from typing import Any\nfrom rapidy.http import Response, get\n\ndef custom_encoder(obj: Any) -&gt; str:\n    ...\n\n@get('/')\nasync def handler() -&gt; Response:\n    return Response(\n        body={'hello': 'rapidy!'},  # will be converted to a string by Rapidy's internal tools\n        json_encoder=custom_encoder,  # Converts the obtained string above into a JSON object using the `custom_encoder` function\n    )\n</code></pre>"},{"location":"ru/docs/server/testing/#_1","title":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435","text":"<p><code>Rapidy</code> \u0442\u0435\u0441\u0442\u0438\u0440\u0443\u0435\u0442\u0441\u044f \u0442\u043e\u0447\u043d\u043e \u0442\u0430\u043a \u0436\u0435, \u043a\u0430\u043a \u0438 <code>aiohttp</code>.</p> <p>\u0414\u043b\u044f \u043d\u0430\u0447\u0430\u043b\u0430 \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u0435 \u043f\u043b\u0430\u0433\u0438\u043d \u0434\u043b\u044f \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f: <pre><code>pip install pytest-aiohttp\n</code></pre></p> <p>\u041f\u043e\u0434\u0440\u043e\u0431\u043d\u0435\u0435 \u043e \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0438 <code>aiohttp</code> \u043c\u043e\u0436\u043d\u043e \u043e\u0437\u043d\u0430\u043a\u043e\u043c\u0438\u0442\u044c\u0441\u044f \u0437\u0434\u0435\u0441\u044c.</p>"},{"location":"ru/docs/server/testing/#_2","title":"\u041f\u0440\u0438\u043c\u0435\u0440 \u0442\u0435\u0441\u0442\u0430 \u043f\u0440\u043e\u0441\u0442\u043e\u0433\u043e \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f","text":""},{"location":"ru/docs/server/testing/#_3","title":"\u0421\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0430 \u043f\u0440\u043e\u0435\u043a\u0442\u0430","text":"<pre><code>\u251c\u2500\u2500 app\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 __init__.py\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 main.py\n\u2514\u2500\u2500 tests\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 conftest.py\n    \u251c\u2500\u2500 pytest.ini\n    \u2514\u2500\u2500 test_hello.py\n</code></pre>"},{"location":"ru/docs/server/testing/#mainpy","title":"main.py","text":"<p>\u0421\u043e\u0434\u0435\u0440\u0436\u0438\u043c\u043e\u0435 \u0444\u0430\u0439\u043b\u0430 <code>app/main.py</code>: <pre><code>from rapidy import Rapidy, run_app\nfrom rapidy.http import get\n\n@get('/')\nasync def hello() -&gt; str:\n    return 'Hello, world'\n\ndef create_app() -&gt; Rapidy:\n    app = Rapidy(\n        http_route_handlers=[hello],\n    )\n\n    # add additional app creation logic ...\n\n    return app\n\nif __name__ == '__main__':\n    app = create_app()\n    run_app(app, host='0.0.0.0', port=8080)\n</code></pre></p>"},{"location":"ru/docs/server/testing/#conftestpy","title":"conftest.py","text":"<p>\u0421\u043e\u0434\u0435\u0440\u0436\u0438\u043c\u043e\u0435 \u0444\u0430\u0439\u043b\u0430 <code>tests/conftest.py</code>: <pre><code>import pytest\n\nfrom rapidy import Rapidy\nfrom typing import AsyncGenerator\nfrom aiohttp.test_utils import TestClient, TestServer, BaseTestServer\n\nfrom app.main import create_app\n\n@pytest.fixture(scope='session')\nasync def app() -&gt; Rapidy:\n    return create_app()\n\n@pytest.fixture\nasync def app_server(app: Rapidy) -&gt; AsyncGenerator[BaseTestServer, None]:\n    async with TestServer(app) as server:\n        yield server\n\n@pytest.fixture\nasync def app_client(app_server: BaseTestServer) -&gt; AsyncGenerator[TestClient, None]:\n    async with TestClient(app_server) as client:\n        yield client\n</code></pre></p>"},{"location":"ru/docs/server/testing/#test_hellopy","title":"test_hello.py","text":"<p>\u0421\u043e\u0434\u0435\u0440\u0436\u0438\u043c\u043e\u0435 \u0444\u0430\u0439\u043b\u0430 <code>tests/test_hello.py</code>: <pre><code>from aiohttp.test_utils import TestClient\n\nasync def test_hello(app_client: TestClient) -&gt; None:\n    response = await app_client.get('/')\n    text = await response.text()\n\n    assert response.status == 200\n    assert 'Hello, world' == text\n</code></pre></p>"},{"location":"ru/docs/server/testing/#pytestini","title":"pytest.ini","text":"<p>\u0421\u043e\u0434\u0435\u0440\u0436\u0438\u043c\u043e\u0435 \u0444\u0430\u0439\u043b\u0430 <code>tests/pytest.ini</code>: <pre><code>[pytest]\nasyncio_mode = auto\n</code></pre></p>"},{"location":"ru/docs/server/testing/#_4","title":"\u0417\u0430\u043f\u0443\u0441\u043a \u0442\u0435\u0441\u0442\u0430","text":""},{"location":"ru/docs/server/testing/#_5","title":"\u041f\u0440\u043e\u0441\u0442\u043e\u0439 \u0437\u0430\u043f\u0443\u0441\u043a \u0442\u0435\u0441\u0442\u0430","text":"<p>\u0427\u0442\u043e\u0431\u044b \u0437\u0430\u043f\u0443\u0441\u0442\u0438\u0442\u044c \u0432\u0430\u0448\u0438 \u0442\u0435\u0441\u0442\u044b \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e <code>pytest</code> \u0432\u044b\u043f\u043e\u043b\u043d\u0438\u0442\u0435 \u043a\u043e\u043c\u0430\u043d\u0434\u0443 \u043d\u0438\u0436\u0435: <pre><code>pytest ./tests\n</code></pre></p> <p>\u041f\u043e\u0434\u0440\u043e\u0431\u043d\u0435\u0435 \u043e <code>pytest</code> \u043c\u043e\u0436\u043d\u043e \u043f\u0440\u043e\u0447\u0438\u0442\u0430\u0442\u044c \u0437\u0434\u0435\u0441\u044c</p>"},{"location":"ru/docs/server/testing/#_6","title":"\u0417\u0430\u043f\u0443\u0441\u043a \u0442\u0435\u0441\u0442\u0430 \u0441 \u043f\u043e\u043a\u0440\u044b\u0442\u0438\u0435\u043c","text":"<p>\u0427\u0442\u043e\u0431\u044b \u0437\u0430\u043f\u0443\u0441\u0442\u0438\u0442\u044c \u0442\u0435\u0441\u0442\u044b \u0432 pytest \u0441 \u043f\u043e\u043a\u0440\u044b\u0442\u0438\u0435\u043c \u043a\u043e\u0434\u0430, \u0432\u043d\u0430\u0447\u0430\u043b\u0435 \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u0435 \u043f\u043b\u0430\u0433\u0438\u043d <code>pytest-cov</code>. <pre><code>pip install pytest-cov\n</code></pre></p> <p>\u0417\u0430\u043f\u0443\u0441\u043a \u0442\u0435\u0441\u0442\u0430 \u0441 \u0432\u044b\u0432\u043e\u0434\u043e\u043c \u043f\u043e\u043a\u0440\u044b\u0442\u0438\u044f \u0432 \u043a\u043e\u043d\u0441\u043e\u043b\u044c: <pre><code>pytest --cov=app --cov-report=term-missing\n</code></pre></p> <p>\u0417\u0430\u043f\u0443\u0441\u043a \u0442\u0435\u0441\u0442\u0430 \u0441 \u0444\u043e\u0440\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435\u043c HTML-\u043e\u0442\u0447\u0435\u0442\u0430: <pre><code>pytest --cov=app --cov-report=html\n</code></pre></p>"},{"location":"ru/examples/http_caching/","title":"\u041a\u0435\u0448\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 HTTP-\u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432","text":""},{"location":"ru/examples/http_caching/#_1","title":"\u0412\u0432\u0435\u0434\u0435\u043d\u0438\u0435","text":"<p><code>Rapidy</code> \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u044d\u0444\u0444\u0435\u043a\u0442\u0438\u0432\u043d\u043e \u0443\u043f\u0440\u0430\u0432\u043b\u044f\u0442\u044c HTTP-\u043a\u0435\u0448\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435\u043c \u0441 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\u043c \u0441\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u043d\u044b\u0445 \u0437\u0430\u0433\u043e\u043b\u043e\u0432\u043a\u043e\u0432 <code>ETag</code>, <code>Cache-Control</code>, <code>Last-Modified</code> \u0438 <code>Expires</code>. \u042d\u0442\u0438 \u0437\u0430\u0433\u043e\u043b\u043e\u0432\u043a\u0438 \u043f\u043e\u043c\u043e\u0433\u0430\u044e\u0442 \u0431\u0440\u0430\u0443\u0437\u0435\u0440\u0430\u043c \u0438 \u043a\u043b\u0438\u0435\u043d\u0442\u0430\u043c API \u043a\u0435\u0448\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u043a\u043e\u043d\u0442\u0435\u043d\u0442 \u0438 \u043c\u0438\u043d\u0438\u043c\u0438\u0437\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u043d\u0430\u0433\u0440\u0443\u0437\u043a\u0443 \u043d\u0430 \u0441\u0435\u0440\u0432\u0435\u0440.</p>"},{"location":"ru/examples/http_caching/#etag-if-none-match","title":"\u0418\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 <code>ETag</code> \u0438 <code>If-None-Match</code>","text":"<p>\u0417\u0430\u0433\u043e\u043b\u043e\u0432\u043e\u043a <code>ETag</code> \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u0441\u0435\u0440\u0432\u0435\u0440\u0443 \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u0446\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0443\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u0443\u044e \u0432\u0435\u0440\u0441\u0438\u044e \u0440\u0435\u0441\u0443\u0440\u0441\u0430. \u041a\u043b\u0438\u0435\u043d\u0442 \u043c\u043e\u0436\u0435\u0442 \u043e\u0442\u043f\u0440\u0430\u0432\u0438\u0442\u044c \u0437\u0430\u0433\u043e\u043b\u043e\u0432\u043e\u043a <code>If-None-Match</code>, \u0447\u0442\u043e\u0431\u044b \u0441\u0435\u0440\u0432\u0435\u0440 \u043f\u0440\u043e\u0432\u0435\u0440\u0438\u043b, \u0438\u0437\u043c\u0435\u043d\u0438\u043b\u0430\u0441\u044c \u043b\u0438 \u0432\u0435\u0440\u0441\u0438\u044f \u0440\u0435\u0441\u0443\u0440\u0441\u0430 \u0441 \u043c\u043e\u043c\u0435\u043d\u0442\u0430 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0435\u0433\u043e \u0437\u0430\u043f\u0440\u043e\u0441\u0430. <pre><code>import hashlib\n\nfrom rapidy import Rapidy\nfrom rapidy.http import Header, HeaderName, HTTPNotModified, Response, get\n\n@get('/')\nasync def handler(\n    response: Response,\n    if_none_match: str | None = Header(None, alias=HeaderName.if_none_match),\n) -&gt; str:\n    content = 'success'  # &lt;-- endpoint dynamic content\n\n    etag_value = hashlib.md5(content.encode()).hexdigest()\n\n    if if_none_match.strip('\"') == etag_value:\n        raise HTTPNotModified\n\n    response.etag = etag_value\n    response.headers[HeaderName.cache_control] = 'public, max-age=3600'\n\n    return content\n\nrapidy = Rapidy(http_route_handlers=[handler])\n</code></pre></p>"},{"location":"ru/examples/http_caching/#last-modified-if-modified-since","title":"\u0418\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 <code>Last-Modified</code> \u0438 <code>If-Modified-Since</code>","text":"<p>\u0417\u0430\u0433\u043e\u043b\u043e\u0432\u043e\u043a <code>Last-Modified</code> \u0443\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442 \u0434\u0430\u0442\u0443 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0435\u0433\u043e \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f \u0440\u0435\u0441\u0443\u0440\u0441\u0430. \u041a\u043b\u0438\u0435\u043d\u0442 \u043c\u043e\u0436\u0435\u0442 \u043e\u0442\u043f\u0440\u0430\u0432\u0438\u0442\u044c \u0437\u0430\u0433\u043e\u043b\u043e\u0432\u043e\u043a <code>If-Modified-Since</code>, \u0447\u0442\u043e\u0431\u044b \u043f\u0440\u043e\u0432\u0435\u0440\u0438\u0442\u044c, \u043e\u0431\u043d\u043e\u0432\u043b\u044f\u043b\u0441\u044f \u043b\u0438 \u0440\u0435\u0441\u0443\u0440\u0441 \u0441 \u043c\u043e\u043c\u0435\u043d\u0442\u0430 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0435\u0433\u043e \u0437\u0430\u043f\u0440\u043e\u0441\u0430. <pre><code>from datetime import datetime, timezone\nfrom typing import Annotated\n\nfrom pydantic import BeforeValidator\nfrom rapidy import Rapidy\nfrom rapidy.http import Header, HeaderName, HTTPNotModified, Response, get\n\ndef parse_http_date(value: str) -&gt; datetime:\n    return datetime.strptime(value, '%a, %d %b %Y %H:%M:%S GMT').replace(tzinfo=timezone.utc)\n\nIFModifiedSince = Annotated[\n    datetime | None,\n    BeforeValidator(parse_http_date),\n    Header(None, alias=HeaderName.if_modified_since),\n]\n\n@get('/')\nasync def handler(\n    response: Response,\n    if_modified_since: IFModifiedSince,\n) -&gt; str:\n    content = 'success'  # &lt;-- endpoint dynamic content\n\n    last_mod_time = datetime(2024, 2, 24, 12, 0, 0, tzinfo=timezone.utc)\n\n    if if_modified_since and if_modified_since &gt;= last_mod_time:\n        raise HTTPNotModified\n\n    response.last_modified = last_mod_time\n    response.headers[HeaderName.cache_control] = 'public, max-age=3600'\n\n    return content\n\nrapidy = Rapidy(http_route_handlers=[handler])\n</code></pre></p>"},{"location":"ru/examples/http_caching/#cache-control","title":"\u0418\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 <code>Cache-Control</code>","text":"<p>\u0417\u0430\u0433\u043e\u043b\u043e\u0432\u043e\u043a <code>Cache-Control</code> \u0443\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 \u043f\u043e\u043b\u0438\u0442\u0438\u043a\u0430\u043c\u0438 \u043a\u0435\u0448\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u0438 \u0443\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442, \u043a\u0430\u043a \u0434\u043e\u043b\u0433\u043e \u0440\u0435\u0441\u0443\u0440\u0441 \u043c\u043e\u0436\u043d\u043e \u0445\u0440\u0430\u043d\u0438\u0442\u044c \u0432 \u043a\u0435\u0448\u0435. <pre><code>from rapidy.http import Response, get, HeaderName\n\n@get('/')\nasync def handler(response: Response) -&gt; str:\n    content = 'success'  # &lt;-- endpoint dynamic content\n\n    response.headers[HeaderName.cache_control] = \"public, max-age=600, must-revalidate\"\n\n    return content\n</code></pre></p>"},{"location":"ru/examples/http_caching/#expires","title":"\u0418\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 <code>Expires</code>","text":"<p>\u0417\u0430\u0433\u043e\u043b\u043e\u0432\u043e\u043a <code>Expires</code> \u0437\u0430\u0434\u0430\u0435\u0442 \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u043e\u0435 \u0432\u0440\u0435\u043c\u044f \u0438\u0441\u0442\u0435\u0447\u0435\u043d\u0438\u044f \u043a\u0435\u0448\u0430. <pre><code>from datetime import datetime, timezone\nfrom rapidy import Rapidy\nfrom rapidy.http import Response, get, HeaderName\n\n@get('/')\nasync def handler(response: Response) -&gt; str:\n    content = 'success'  # &lt;-- endpoint dynamic content\n\n    expire_time = datetime(2024, 3, 1, 0, 0, 0, tzinfo=timezone.utc)\n    response.headers[HeaderName.expires] = expire_time.strftime(\"%a, %d %b %Y %H:%M:%S GMT\")\n\n    return content\n\nrapidy = Rapidy(http_route_handlers=[handler])\n</code></pre></p>"},{"location":"ru/examples/http_caching/#_2","title":"\u041a\u043e\u043c\u0431\u0438\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0439 \u043f\u0440\u0438\u043c\u0435\u0440","text":"<p>\u0412 \u044d\u0442\u043e\u043c \u043f\u0440\u0438\u043c\u0435\u0440\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044e\u0442\u0441\u044f \u0432\u0441\u0435 \u043e\u0441\u043d\u043e\u0432\u043d\u044b\u0435 \u0437\u0430\u0433\u043e\u043b\u043e\u0432\u043a\u0438 \u043a\u0435\u0448\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f: <pre><code>import hashlib\nfrom datetime import datetime, timezone\nfrom typing import Annotated\n\nfrom pydantic import BeforeValidator\nfrom rapidy import Rapidy\nfrom rapidy.http import Header, HeaderName, HTTPNotModified, Response, get\n\ndef parse_http_date(value: str) -&gt; datetime:\n    return datetime.strptime(value, '%a, %d %b %Y %H:%M:%S GMT').replace(tzinfo=timezone.utc)\n\nIFModifiedSince = Annotated[\n    datetime | None,\n    BeforeValidator(parse_http_date),\n    Header(None, alias='If-Modified-Since'),\n]\nIFNoneMatch = Annotated[\n    str | None,\n    BeforeValidator(lambda x: x.strip('\"')),\n    Header(None, alias='If-None-Match'),\n]\n\n@get('/')\nasync def handler(\n        response: Response,\n        if_modified_since: IFModifiedSince,\n        if_none_match: IFNoneMatch,\n) -&gt; str:\n    content = 'success'  # &lt;-- endpoint dynamic content\n\n    last_mod_time = datetime(2024, 2, 24, 12, 0, 0, tzinfo=timezone.utc)\n    etag_value = hashlib.md5(content.encode()).hexdigest()\n    expire_time = datetime(2024, 3, 1, 0, 0, 0, tzinfo=timezone.utc)\n\n    if if_none_match == etag_value:\n        raise HTTPNotModified\n\n    if if_modified_since and if_modified_since &gt;= last_mod_time:\n        raise HTTPNotModified\n\n    response.etag = etag_value\n    response.last_modified = last_mod_time\n    response.headers[HeaderName.cache_control] = \"public, max-age=3600, must-revalidate\"\n    response.headers[HeaderName.expires] = expire_time.strftime(\"%a, %d %b %Y %H:%M:%S GMT\")\n\n    return content\n\nrapidy = Rapidy(http_route_handlers=[handler])\n</code></pre></p>"},{"location":"ru/examples/http_caching/#_3","title":"\u0417\u0430\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435","text":"<p>\u0418\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 HTTP-\u043a\u0435\u0448\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u0432 <code>Rapidy</code> \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u0437\u043d\u0430\u0447\u0438\u0442\u0435\u043b\u044c\u043d\u043e \u0441\u043d\u0438\u0437\u0438\u0442\u044c \u043d\u0430\u0433\u0440\u0443\u0437\u043a\u0443 \u043d\u0430 \u0441\u0435\u0440\u0432\u0435\u0440, \u0443\u0441\u043a\u043e\u0440\u0438\u0442\u044c \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0443 \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432 \u0438 \u0443\u043c\u0435\u043d\u044c\u0448\u0438\u0442\u044c \u043e\u0431\u044a\u0435\u043c \u043f\u0435\u0440\u0435\u0434\u0430\u0432\u0430\u0435\u043c\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445. \u041a\u043e\u043c\u0431\u0438\u043d\u0438\u0440\u0443\u044f \u0437\u0430\u0433\u043e\u043b\u043e\u0432\u043a\u0438 <code>ETag</code>, <code>Cache-Control</code>, <code>Last-Modified</code> \u0438 <code>Expires</code>, \u043c\u043e\u0436\u043d\u043e \u0433\u0438\u0431\u043a\u043e \u0443\u043f\u0440\u0430\u0432\u043b\u044f\u0442\u044c \u043a\u0435\u0448\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435\u043c \u043a\u043e\u043d\u0442\u0435\u043d\u0442\u0430 \u0432 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0438 \u043e\u0442 \u0442\u0440\u0435\u0431\u043e\u0432\u0430\u043d\u0438\u0439 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f.</p>"},{"location":"ru/quickstart/","title":"\u0411\u044b\u0441\u0442\u0440\u044b\u0439 \u0441\u0442\u0430\u0440\u0442","text":""},{"location":"ru/quickstart/#_2","title":"\u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043f\u0440\u043e\u0441\u0442\u044b\u0445 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u043e\u0432","text":"<p>rAPIdy \u0431\u0430\u0437\u0438\u0440\u0443\u0435\u0442\u0441\u044f \u043d\u0430 aiohttp \u0438 \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u0435\u0442 \u0432\u0441\u0435 \u0432\u0430\u0440\u0438\u0430\u043d\u0442\u044b \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u043e\u0432. \u041d\u0438\u0436\u0435 \u0431\u0443\u0434\u0443\u0442 \u043f\u043e\u043a\u0430\u0437\u0430\u043d\u044b \u043b\u0438\u0448\u044c \u043e\u0441\u043d\u043e\u0432\u043d\u044b\u0435.</p> <p>\u0412\u0441\u0435 \u0441\u043f\u043e\u0441\u043e\u0431\u044b \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u044f \u043c\u043e\u0436\u043d\u043e \u043f\u043e\u0441\u043c\u043e\u0442\u0440\u0435\u0442\u044c \u0437\u0434\u0435\u0441\u044c</p>"},{"location":"ru/quickstart/#_3","title":"\u0424\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u044b\u0435 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u0438","text":"<pre><code>from rapidy import Rapidy\nfrom rapidy.http import post\n\n@post('/')\nasync def handler() -&gt; dict[str, str]:\n    return {'hello': 'rapidy'}\n\nrapidy = Rapidy(http_route_handlers=[handler])\n</code></pre> \u0420\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u0431\u0435\u0437 \u0434\u0435\u043a\u043e\u0440\u0430\u0442\u043e\u0440\u0430 <pre><code>from rapidy import Rapidy\nfrom rapidy.http import post\n\nasync def handler() -&gt; dict[str, str]:\n    return {'hello': 'rapidy'}\n\nrapidy = Rapidy(\n    http_route_handlers=[\n        post.reg('/', handler),\n    ]\n)\n</code></pre>"},{"location":"ru/quickstart/#_4","title":"\u041a\u043b\u0430\u0441\u0441\u043e\u0432\u044b\u0435 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u0438","text":"<pre><code>from rapidy import Rapidy\nfrom rapidy.http import PathParam, controller, get, post, put, patch, delete\n\n@controller('/')\nclass UserController:\n    @get('/{user_id}')\n    async def get_by_id(self, user_id: str = PathParam()) -&gt; dict[str, str]:\n        return {'user_id': user_id}\n\n    @get()\n    async def get_all_users(self) -&gt; list[dict[str, str]]:\n        return [{'name': 'John'}, {'name': 'Felix'}]\n\n    @post()\n    async def create_user(self) -&gt; str:\n        return 'ok'\n\n    @put()\n    async def update_user(self) -&gt; str:\n        return 'ok'\n\n    @patch()\n    async def patch_user(self) -&gt; str:\n        return 'ok'\n\n    @delete()\n    async def delete_user(self) -&gt; str:\n        return 'ok'\n\nrapidy = Rapidy(http_route_handlers=[UserController])\n</code></pre> \u0420\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u0431\u0435\u0437 \u0434\u0435\u043a\u043e\u0440\u0430\u0442\u043e\u0440\u0430 <pre><code>from rapidy import Rapidy\nfrom rapidy.http import PathParam, controller, get\n\nclass UserController:\n    @get('/{user_id}')\n    async def get_by_id(self, user_id: str = PathParam()) -&gt; dict[str, str]:\n        return {'user_id': user_id}\n\n    @get()\n    async def get_all_users(self) -&gt; list[dict[str, str]]:\n        return [{'name': 'John'}, {'name': 'Felix'}]\n\nrapidy = Rapidy(\n    http_route_handlers=[\n        controller.reg('/', UserController),\n    ]\n)\n</code></pre>"},{"location":"ru/quickstart/#middleware","title":"Middleware","text":"<p>Middleware \u2014 \u044d\u0442\u043e \u043f\u0440\u043e\u043c\u0435\u0436\u0443\u0442\u043e\u0447\u043d\u044b\u0435 \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u044b, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u044e\u0442 \u0437\u0430\u043f\u0440\u043e\u0441\u044b \u0438 \u043e\u0442\u0432\u0435\u0442\u044b \u043d\u0430 \u0443\u0440\u043e\u0432\u043d\u0435 \u0432\u0435\u0431-\u0444\u0440\u0435\u0439\u043c\u0432\u043e\u0440\u043a\u0430.</p> <p>\u041e\u043d\u0438 \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u044e\u0442 \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0442\u044c \u0434\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f \u0434\u043e \u0438/\u0438\u043b\u0438 \u043f\u043e\u0441\u043b\u0435 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u0437\u0430\u043f\u0440\u043e\u0441\u0430 \u043e\u0441\u043d\u043e\u0432\u043d\u044b\u043c \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u043e\u043c.</p> <pre><code>from rapidy import Rapidy\nfrom rapidy.http import Request, StreamResponse, get, middleware\nfrom rapidy.typedefs import CallNext\n\n@middleware\nasync def hello_middleware(request: Request, call_next: CallNext) -&gt; StreamResponse:\n    request['data'] = {'hello': 'rapidy'}\n    return await call_next(request)\n\n@get('/')\nasync def handler(request: Request) -&gt; dict[str, str]:\n    return request['data']\n\nrapidy = Rapidy(\n    http_route_handlers=[handler],\n    middlewares=[hello_middleware],\n)\n</code></pre> <p>\u041f\u0440\u0438\u043c\u0435\u0447\u0430\u043d\u0438\u0435</p> <p>\u0412 middleware-\u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u0435 \u043f\u0435\u0440\u0432\u044b\u043c \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u043e\u043c \u0432\u0441\u0435\u0433\u0434\u0430 \u0434\u043e\u043b\u0436\u0435\u043d \u0431\u044b\u0442\u044c Request, \u0430 \u0432\u0442\u043e\u0440\u044b\u043c \u2014 call_next.</p>"},{"location":"ru/quickstart/#httproute","title":"HTTPRoute","text":"<p><code>HTTPRoute</code> \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0433\u0440\u0443\u043f\u043f\u044b \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u043e\u0432 \u0438 \u0438\u0433\u0440\u0430\u0435\u0442 \u043a\u043b\u044e\u0447\u0435\u0432\u0443\u044e \u0440\u043e\u043b\u044c \u0432 \u043c\u0430\u0440\u0448\u0440\u0443\u0442\u0438\u0437\u0430\u0446\u0438\u0438 (routing), \u043f\u043e\u043c\u043e\u0433\u0430\u044f \u043d\u0430\u043f\u0440\u0430\u0432\u043b\u044f\u0442\u044c \u0437\u0430\u043f\u0440\u043e\u0441\u044b \u043a \u043d\u0443\u0436\u043d\u044b\u043c \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u0430\u043c \u0432 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0438 \u043e\u0442 HTTP-\u043c\u0435\u0442\u043e\u0434\u0430, \u043f\u0443\u0442\u0438, \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u0432 \u0438 \u0434\u0440\u0443\u0433\u0438\u0445 \u0443\u0441\u043b\u043e\u0432\u0438\u0439.</p> <p><code>HTTPRoute</code> \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0438\u0440\u0443\u0435\u0442\u0441\u044f \u0442\u043e\u0447\u043d\u043e \u0442\u0430\u043a \u0436\u0435, \u043a\u0430\u043a \u0438 \u043b\u044e\u0431\u043e\u0439 HTTP-\u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a.</p> <pre><code>from rapidy import Rapidy\nfrom rapidy.http import HTTPRouter, controller, get\n\n@get('/hello')\nasync def hello_handler() -&gt; dict[str, str]:\n    return {'hello': 'rapidy'}\n\n@controller('/hello_controller')\nclass HelloController:\n    @get()\n    async def get_hello(self) -&gt; dict[str, str]:\n        return {'hello': 'rapidy'}\n\napi_router = HTTPRouter('/api', [hello_handler, HelloController])\n\nrapidy = Rapidy(http_route_handlers=[api_router])\n</code></pre> \u0420\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u043e\u0432 \u0432 \u0440\u043e\u0443\u0442\u0435\u0440\u0435 \u0431\u0435\u0437 \u0434\u0435\u043a\u043e\u0440\u0430\u0442\u043e\u0440\u0430 <pre><code>from rapidy import Rapidy\nfrom rapidy.http import HTTPRouter, controller, get\n\nasync def hello_handler() -&gt; dict[str, str]:\n    return {'hello': 'rapidy'}\n\nclass HelloController:\n    @get()\n    async def get_hello(self) -&gt; dict[str, str]:\n        return {'hello': 'rapidy'}\n\napi_router = HTTPRouter(\n    '/api',\n    [\n        get.reg('/hello', hello_handler),\n        controller.reg('/hello_controller', HelloController),\n    ]\n)\n\nrapidy = Rapidy(http_route_handlers=[api_router])\n</code></pre> \u041f\u043e\u043b\u043d\u044b\u0439 \u043f\u0440\u0438\u043c\u0435\u0440 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438 \u0440\u043e\u0443\u0442\u0435\u0440\u0430 \u0438 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u043e\u0432 <pre><code>from rapidy import Rapidy\nfrom rapidy.http import controller, get, HTTPRouter\n\n@get('/hello')\nasync def hello_handler() -&gt; dict[str, str]:\n    return {'hello': 'rapidy'}\n\n@controller('/hello_controller')\nclass HelloController:\n    @get()\n    async def get(self) -&gt; dict[str, str]:\n        return {'hello': 'rapidy'}\n\n@get('/hi')\nasync def hi_handler() -&gt; dict[str, str]:\n    return {'hi': 'rapidy'}\n\n@controller('/hi_controller')\nclass HiController:\n    @get()\n    async def get(self) -&gt; dict[str, str]:\n        return {'hi': 'rapidy'}\n\nhello_api_router = HTTPRouter('/hello_api', [hello_handler, HelloController])\n\nrapidy = Rapidy(\n    http_route_handlers=[\n        hello_api_router,\n        hi_handler,\n        HiController,\n    ]\n)\n</code></pre>"},{"location":"ru/quickstart/#_5","title":"\u041f\u0440\u0438\u043c\u0435\u0440 \u043f\u0440\u043e\u0441\u0442\u043e\u0439 \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u0438","text":"<pre><code>from pydantic import BaseModel\nfrom rapidy import Rapidy\nfrom rapidy.http import Body, Request, Header, StreamResponse, middleware, post\nfrom rapidy.typedefs import CallNext\n\nTOKEN_REGEXP = '^[Bb]earer (?P&lt;token&gt;[A-Za-z0-9-_=.]*)'\n\nclass RequestBody(BaseModel):\n    username: str\n    password: str\n\nclass ResponseBody(BaseModel):\n    hello: str = 'rapidy'\n\n@middleware\nasync def get_bearer_middleware(\n        request: Request,\n        call_next: CallNext,\n        bearer_token: str = Header(alias='Authorization', pattern=TOKEN_REGEXP),\n) -&gt; StreamResponse:\n    # process token here ...\n    return await call_next(request)\n\n@post('/')\nasync def handler(body: RequestBody = Body()) -&gt; ResponseBody:\n    return ResponseBody()\n\napp = Rapidy(middlewares=[get_bearer_middleware], http_route_handlers=[handler])\n</code></pre>"},{"location":"ru/quickstart/#-","title":"\u0417\u0430\u043f\u0443\u0441\u043a \u0432\u0435\u0431-\u0441\u0435\u0440\u0432\u0435\u0440\u0430","text":""},{"location":"ru/quickstart/#_6","title":"\u041f\u0440\u043e\u0441\u0442\u043e\u0439 \u0437\u0430\u043f\u0443\u0441\u043a","text":"<p>\u0421\u043a\u043e\u043f\u0438\u0440\u0443\u0439\u0442\u0435 \u043a\u043e\u0434 \u0432 \u0444\u0430\u0439\u043b <code>main.py</code>. <pre><code>from rapidy import Rapidy, run_app\nfrom rapidy.http import post\n\n@post('/')\nasync def handler() -&gt; dict[str, str]:\n    return {'hello': 'rapidy'}\n\nrapidy = Rapidy()\nrapidy.add_http_router(handler)\n\nif __name__ == '__main__':\n    run_app(rapidy)\n</code></pre></p> <p>\u0417\u0430\u043f\u0443\u0441\u0442\u0438\u0442\u0435 \u0441\u0435\u0440\u0432\u0435\u0440 \u0432 \u0440\u0435\u0436\u0438\u043c\u0435 \u0440\u0435\u0430\u043b\u044c\u043d\u043e\u0433\u043e \u0432\u0440\u0435\u043c\u0435\u043d\u0438: <pre><code>python3 main.py\n</code></pre></p> <p>\u0422\u0430\u043a\u0436\u0435 \u0432\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u0443\u043a\u0430\u0437\u0430\u0442\u044c \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0435 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u0437\u0430\u043f\u0443\u0441\u043a\u0430, \u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, <code>host</code> \u0438\u043b\u0438 <code>port</code>.</p> <pre><code>run_app(app, host='0.0.0.0', port=8080)\n</code></pre>"},{"location":"ru/quickstart/#wsgi-gunicorn","title":"WSGI-\u0437\u0430\u043f\u0443\u0441\u043a (Gunicorn)","text":"<p>Gunicorn \u2014 \u044d\u0442\u043e Python WSGI HTTP-\u0441\u0435\u0440\u0432\u0435\u0440 \u0434\u043b\u044f UNIX.</p> \u0427\u0442\u043e \u0442\u0430\u043a\u043e\u0435 WSGI <p>WSGI (Web Server Gateway Interface \u2014 \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441 \u0448\u043b\u044e\u0437\u0430 Web-\u0441\u0435\u0440\u0432\u0435\u0440\u0430) \u2014 \u044d\u0442\u043e \u043f\u0440\u043e\u0441\u0442\u043e\u0439 \u0438 \u0443\u043d\u0438\u0432\u0435\u0440\u0441\u0430\u043b\u044c\u043d\u044b\u0439 \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441 \u0432\u0437\u0430\u0438\u043c\u043e\u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f \u043c\u0435\u0436\u0434\u0443 Web-\u0441\u0435\u0440\u0432\u0435\u0440\u043e\u043c \u0438 Web-\u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435\u043c, \u0432\u043f\u0435\u0440\u0432\u044b\u0435 \u043e\u043f\u0438\u0441\u0430\u043d\u043d\u044b\u0439 \u0432 PEP-333.</p> <p>\u041f\u043e\u0434\u0440\u043e\u0431\u043d\u0435\u0435 \u043f\u0440\u043e gunicorn.org</p> <p>\u0414\u043e\u0431\u0430\u0432\u044c\u0442\u0435 Gunicorn \u0432 \u0432\u0430\u0448 \u043f\u0440\u043e\u0435\u043a\u0442:</p> <pre><code>pip install gunicorn\n</code></pre> <p>\u0421\u043a\u043e\u043f\u0438\u0440\u0443\u0439\u0442\u0435 \u043a\u043e\u0434 \u0432 \u0444\u0430\u0439\u043b <code>main.py</code>. <pre><code>from rapidy import Rapidy\nfrom rapidy.http import post\n\n@post('/')\nasync def handler() -&gt; dict[str, str]:\n    return {'hello': 'rapidy'}\n\nrapidy = Rapidy()\nrapidy.add_http_router(handler)\n</code></pre></p> <p>\u0417\u0430\u043f\u0443\u0441\u0442\u0438\u0442\u0435 \u043a\u043e\u043c\u0430\u043d\u0434\u0443 \u0432 \u043a\u043e\u043d\u0441\u043e\u043b\u0438: <pre><code>gunicorn main:rapidy --bind localhost:8080 --reload --worker-class aiohttp.GunicornWebWorker\n</code></pre></p> <p>\u041a\u043e\u043c\u0430\u043d\u0434\u0430 <code>gunicorn main:rapidy</code> \u043e\u0431\u0440\u0430\u0449\u0430\u0435\u0442\u0441\u044f \u043a:</p> <ul> <li><code>main</code>: \u0444\u0430\u0439\u043b <code>main.py</code> (\u043c\u043e\u0434\u0443\u043b\u044c Python).</li> <li><code>rapidy</code>: \u043e\u0431\u044a\u0435\u043a\u0442, \u0441\u043e\u0437\u0434\u0430\u043d\u043d\u044b\u0439 \u0432\u043d\u0443\u0442\u0440\u0438 \u0444\u0430\u0439\u043b\u0430 <code>main.py</code> \u0432 \u0441\u0442\u0440\u043e\u043a\u0435 <code>rapidy = Rapidy()</code>.</li> <li><code>--reload</code>: \u043f\u0435\u0440\u0435\u0437\u0430\u043f\u0443\u0441\u043a\u0430\u0435\u0442 \u0441\u0435\u0440\u0432\u0435\u0440 \u043f\u043e\u0441\u043b\u0435 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f \u043a\u043e\u0434\u0430. \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435 \u0442\u043e\u043b\u044c\u043a\u043e \u0434\u043b\u044f \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u043a\u0438.</li> </ul>"},{"location":"ru/why/","title":"\u041f\u043e\u0447\u0435\u043c\u0443 Rapidy?","text":"<p>Rapidy \u2014 \u044d\u0442\u043e \u043d\u0435 \u043f\u0440\u043e\u0441\u0442\u043e \u0435\u0449\u0451 \u043e\u0434\u0438\u043d \u0444\u0440\u0435\u0439\u043c\u0432\u043e\u0440\u043a. \u042d\u0442\u043e \u043b\u0451\u0433\u043a\u0438\u0439, \u0431\u044b\u0441\u0442\u0440\u044b\u0439 \u0438 \u043c\u043e\u0449\u043d\u044b\u0439 \u0438\u043d\u0441\u0442\u0440\u0443\u043c\u0435\u043d\u0442 \u0434\u043b\u044f \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u044b\u0445 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0439, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043e\u0431\u044a\u0435\u0434\u0438\u043d\u044f\u0435\u0442 \u0432 \u0441\u0435\u0431\u0435 \u0433\u0438\u0431\u043a\u043e\u0441\u0442\u044c, \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c \u0438 \u0443\u0434\u043e\u0431\u0441\u0442\u0432\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f.</p> <p>\u26a1 \u0410\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u044b\u0439, \u0431\u044b\u0441\u0442\u0440\u044b\u0439, \u0443\u0434\u043e\u0431\u043d\u044b\u0439 \u2014 \u0432\u0441\u0451, \u0447\u0442\u043e \u043d\u0443\u0436\u043d\u043e \u0434\u043b\u044f \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u0441\u043e\u0432\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0445 API.</p>"},{"location":"ru/why/#rapidy_1","title":"\u0427\u0435\u043c Rapidy \u043b\u0443\u0447\u0448\u0435 \u0434\u0440\u0443\u0433\u0438\u0445?","text":"\u0424\u0440\u0435\u0439\u043c\u0432\u043e\u0440\u043a \u0410\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e\u0441\u0442\u044c \u041f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c \u041f\u0440\u043e\u0441\u0442\u043e\u0442\u0430 \u0410\u0432\u0442\u043e-\u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u044f API \u0412\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u044f \u0438 \u0441\u0435\u0440\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0432 middleware \u0415\u0434\u0438\u043d\u044b\u0439 \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441 \u0440\u0430\u0437\u0431\u043e\u0440\u0430 body \u0413\u0438\u0431\u043a\u043e\u0441\u0442\u044c \u043c\u0430\u0440\u0448\u0440\u0443\u0442\u043e\u0432 \u041a\u043b\u0438\u0435\u043d\u0442 \u0438 \u0421\u0435\u0440\u0432\u0435\u0440 \u041d\u0430\u0442\u0438\u0432\u043d\u044b\u0435 Python-\u0442\u0438\u043f\u044b \u041a\u043e\u043d\u0442\u0440\u043e\u043b\u044c \u0436\u0438\u0437\u043d\u0435\u043d\u043d\u043e\u0433\u043e \u0446\u0438\u043a\u043b\u0430 \u0411\u044b\u0441\u0442\u0440\u0430\u044f \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u044f \u0438 \u0441\u0435\u0440\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f rAPIdy \u2705 \u0412\u044b\u0441\u043e\u043a\u0430\u044f (Aiohttp) \u2705 \u041f\u0440\u043e\u0441\u0442\u043e\u0442\u0430 \u274c (\u0441\u043a\u043e\u0440\u043e) \u2705 \u2705 \u2705 \u2705 (\u043a\u043b\u0438\u0435\u043d\u0442 aiohttp) \u2705 \u2705 \u2705 \u0412\u044b\u0441\u043e\u043a\u0430\u044f FastAPI \u2705 \u041e\u0447\u0435\u043d\u044c \u0432\u044b\u0441\u043e\u043a\u0430\u044f (Starlette) \u2705 \u041f\u0440\u043e\u0441\u0442\u043e\u0442\u0430 \u2705 \u274c \u274c \ud83d\udfe1 (\u043e\u0433\u0440\u0430\u043d\u0438\u0447\u0435\u043d\u0438\u044f \u043a\u043b\u0430\u0441\u0441\u043e\u0432\u044b\u0445 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u043e\u0432) \u274c (\u0442\u043e\u043b\u044c\u043a\u043e \u0441\u0435\u0440\u0432\u0435\u0440) \u2705 \u2705 \u2705 \u0412\u044b\u0441\u043e\u043a\u0430\u044f Litestar \u2705 \u041e\u0447\u0435\u043d\u044c \u0432\u044b\u0441\u043e\u043a\u0430\u044f \u2705 \u041f\u0440\u043e\u0441\u0442\u043e\u0442\u0430 \u2705 \u274c \u2705 \u2705 \u274c (\u0442\u043e\u043b\u044c\u043a\u043e \u0441\u0435\u0440\u0432\u0435\u0440) \u2705 \u2705 \ud83d\ude80 \u041e\u0447\u0435\u043d\u044c \u0432\u044b\u0441\u043e\u043a\u0430\u044f (msgspec) Aiohttp \u2705 \u0412\u044b\u0441\u043e\u043a\u0430\u044f \ud83d\udfe1 \u0421\u0440\u0435\u0434\u043d\u044f\u044f \u274c \u274c \u274c \ud83d\udfe1 (\u043e\u0433\u0440\u0430\u043d\u0438\u0447\u0435\u043d\u0438\u044f \u043a\u043b\u0430\u0441\u0441\u043e\u0432\u044b\u0445 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u043e\u0432) \u2705 \u274c \ud83d\udfe1 \u274c \u041d\u0435\u0442 Flask \ud83d\udfe1 (ver &gt;= 2.0) \u0421\u0440\u0435\u0434\u043d\u044f\u044f \u2705 \u041f\u0440\u043e\u0441\u0442\u043e\u0442\u0430 \ud83d\udfe1 (\u0447\u0435\u0440\u0435\u0437 \u0440\u0430\u0441\u0448\u0438\u0440\u0435\u043d\u0438\u044f) \u274c \u274c \ud83d\udfe1 (\u043e\u0433\u0440\u0430\u043d\u0438\u0447\u0435\u043d\u043d\u0430\u044f \u043c\u0430\u0440\u0448\u0440\u0443\u0442\u0438\u0437\u0430\u0446\u0438\u044f) \u274c (\u0442\u043e\u043b\u044c\u043a\u043e \u0441\u0435\u0440\u0432\u0435\u0440) \u274c \u274c \u274c \u041d\u0435\u0442 Django \ud83d\udfe1 (ver &gt;= 3.1) \u041d\u0438\u0437\u043a\u0430\u044f \u2705 \u041f\u0440\u043e\u0441\u0442\u043e\u0442\u0430 \ud83d\udfe1 (\u0447\u0435\u0440\u0435\u0437 \u0440\u0430\u0441\u0448\u0438\u0440\u0435\u043d\u0438\u044f) \u274c \u274c \u2705 \u274c (\u0442\u043e\u043b\u044c\u043a\u043e \u0441\u0435\u0440\u0432\u0435\u0440) \u274c \u274c \ud83d\udc0c \u041d\u0438\u0437\u043a\u0430\u044f (\u043c\u0435\u0434\u043b\u0435\u043d\u043d\u044b\u0435 \u0441\u0435\u0440\u0438\u0430\u043b\u0438\u0437\u0430\u0442\u043e\u0440\u044b)"},{"location":"ru/why/#rapidy_2","title":"\u041f\u0440\u0438\u0447\u0438\u043d\u044b \u0432\u044b\u0431\u0440\u0430\u0442\u044c Rapidy","text":"<p>\u2705 \u041c\u043e\u0449\u043d\u0430\u044f \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e\u0441\u0442\u044c \u043d\u0430 \u0431\u0430\u0437\u0435 Aiohttp \u2014 \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435 async/await \u043d\u0430 \u0432\u0441\u0435\u0445 \u0443\u0440\u043e\u0432\u043d\u044f\u0445 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u0437\u0430\u043f\u0440\u043e\u0441\u0430.</p> <p>\u2705 \u0413\u0438\u0431\u043a\u043e\u0441\u0442\u044c \u0438 \u0443\u043d\u0438\u0432\u0435\u0440\u0441\u0430\u043b\u044c\u043d\u043e\u0441\u0442\u044c \u2014 \u041f\u043e\u0434\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u0435\u0442 \u0438 \u043a\u043b\u0438\u0435\u043d\u0442, \u0438 \u0441\u0435\u0440\u0432\u0435\u0440 (FastAPI \u0438 Litestar \u044d\u0442\u043e\u0433\u043e \u043d\u0435 \u0443\u043c\u0435\u044e\u0442). \u2014 \u0411\u043e\u043b\u0435\u0435 \u0433\u0438\u0431\u043a\u0430\u044f \u043c\u0430\u0440\u0448\u0440\u0443\u0442\u0438\u0437\u0430\u0446\u0438\u044f, \u0447\u0435\u043c \u0443 FastAPI \u0438 Aiohttp.</p> <p>\u2705 \u0427\u0438\u0441\u0442\u044b\u0439 \u0438 \u0443\u0434\u043e\u0431\u043d\u044b\u0439 API \u2014 \u0420\u0430\u0437\u0431\u0438\u0440\u0430\u0435\u0442 <code>body</code> \u0435\u0434\u0438\u043d\u043e\u043e\u0431\u0440\u0430\u0437\u043d\u043e \u0434\u043b\u044f \u0432\u0441\u0435\u0445 \u0442\u0438\u043f\u043e\u0432 \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432. \u2014 \u041f\u043e\u043b\u043d\u043e\u0441\u0442\u044c\u044e \u0441\u043e\u0432\u043c\u0435\u0441\u0442\u0438\u043c \u0441 Python-\u0442\u0438\u043f\u0430\u043c\u0438 (\u0430\u043d\u0430\u043b\u043e\u0433\u0438\u0447\u043d\u043e FastAPI \u0438 Litestar).</p> <p>\u2705 \u0412\u044b\u0441\u043e\u043a\u0430\u044f \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c \u2014 \u0420\u0430\u0431\u043e\u0442\u0430\u0435\u0442 \u0431\u044b\u0441\u0442\u0440\u0435\u0435 Flask \u0438 Django. \u2014 \u0412\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u044f \u0438 \u0441\u0435\u0440\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u043d\u0430 \u0443\u0440\u043e\u0432\u043d\u0435 FastAPI.</p> <p>\u2705 \u041f\u0440\u043e\u0441\u0442\u043e\u0442\u0430 \u0431\u0435\u0437 \u043f\u043e\u0442\u0435\u0440\u0438 \u043c\u043e\u0449\u043d\u043e\u0441\u0442\u0438 \u2014 \u041f\u0440\u043e\u0441\u0442\u043e\u0435 \u043d\u0430\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0438 \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u043a\u0430 \u043a\u043e\u0434\u0430</p> <p>\u2705 \u0410\u0440\u0445\u0438\u0442\u0435\u043a\u0442\u0443\u0440\u0430 \u0444\u0440\u0435\u0439\u043c\u0432\u043e\u0440\u043a\u0430 \u2014 \u0418\u0441\u0445\u043e\u0434\u043d\u044b\u0439 \u043a\u043e\u0434 Rapidy \u043f\u043e\u043b\u043d\u043e\u0441\u0442\u044c\u044e \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0438\u0440\u043e\u0432\u0430\u043d, \u0447\u0442\u043e \u043e\u0431\u0435\u0441\u043f\u0435\u0447\u0438\u0432\u0430\u0435\u0442 \u043f\u0440\u043e\u0437\u0440\u0430\u0447\u043d\u043e\u0441\u0442\u044c \u0438 \u0443\u0434\u043e\u0431\u0441\u0442\u0432\u043e \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u043a\u0438. \u2014 \u041a\u043e\u0434\u043e\u0432\u0430\u044f \u0431\u0430\u0437\u0430 \u0444\u0440\u0435\u0439\u043c\u0432\u043e\u0440\u043a\u0430 \u043e\u0440\u0433\u0430\u043d\u0438\u0437\u043e\u0432\u0430\u043d\u0430 \u0432 \u043c\u043e\u0434\u0443\u043b\u044c\u043d\u0443\u044e \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0443, \u0447\u0442\u043e \u0441\u043f\u043e\u0441\u043e\u0431\u0441\u0442\u0432\u0443\u0435\u0442 \u0432\u044b\u0441\u043e\u043a\u043e\u0439 \u043c\u0430\u0441\u0448\u0442\u0430\u0431\u0438\u0440\u0443\u0435\u043c\u043e\u0441\u0442\u0438 \u0438 \u0443\u043f\u0440\u043e\u0449\u0430\u0435\u0442 \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u044e \u043d\u043e\u0432\u044b\u0445 \u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u044b\u0445 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u0435\u0439.</p>"},{"location":"ru/why/#_1","title":"\u0427\u0442\u043e \u0434\u0430\u043b\u044c\u0448\u0435?","text":"<p>Rapidy \u0442\u043e\u043b\u044c\u043a\u043e \u043d\u0430\u0447\u0438\u043d\u0430\u0435\u0442 \u0441\u0432\u043e\u0439 \u043f\u0443\u0442\u044c, \u0438 \u0432\u043f\u0435\u0440\u0435\u0434\u0438 \u0435\u0449\u0451 \u0431\u043e\u043b\u044c\u0448\u0435 \u043a\u0440\u0443\u0442\u044b\u0445 \u0444\u0438\u0447:</p> <p>\ud83d\udd39 \u0410\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0430\u044f \u0433\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u044f OpenAPI (\u0443\u0436\u0435 \u0432 \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u043a\u0435!) \ud83d\udd39 HTTP-\u043a\u043b\u0438\u0435\u043d\u0442 \u0441 \u043f\u043e\u043b\u043d\u043e\u0439 \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u043a\u043e\u0439 Pydantic \ud83d\udd39 \u041f\u043e\u043b\u043d\u043e\u0446\u0435\u043d\u043d\u044b\u0439 GRPC</p> <p>\u26a1 \u041c\u044b \u0441\u043e\u0437\u0434\u0430\u0451\u043c \u0431\u0443\u0434\u0443\u0449\u0435\u0435 \u0432\u0435\u0431-\u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u043a\u0438! \u041f\u043e\u0434\u043f\u0438\u0448\u0438\u0442\u0435\u0441\u044c \u043d\u0430 \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u044f \u0438 \u0431\u0443\u0434\u044c\u0442\u0435 \u043f\u0435\u0440\u0432\u044b\u043c\u0438, \u043a\u0442\u043e \u043f\u043e\u043f\u0440\u043e\u0431\u0443\u0435\u0442 \u043d\u043e\u0432\u044b\u0435 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u0438 Rapidy.</p>"},{"location":"ru/why/#rapidy_3","title":"\u0418\u0442\u043e\u0433: Rapidy \u2014 \u0433\u0438\u0431\u043a\u043e\u0441\u0442\u044c, \u0441\u043a\u043e\u0440\u043e\u0441\u0442\u044c, \u0443\u0434\u043e\u0431\u0441\u0442\u0432\u043e.","text":"<p>\u041f\u043e\u043f\u0440\u043e\u0431\u0443\u0439\u0442\u0435 \u0435\u0433\u043e \u0443\u0436\u0435 \u0441\u0435\u0433\u043e\u0434\u043d\u044f \u0438 \u0443\u0431\u0435\u0434\u0438\u0442\u0435\u0441\u044c \u0441\u0430\u043c\u0438! \ud83d\ude80</p>"},{"location":"ru/docs/server/routing/","title":"\u041c\u0430\u0440\u0448\u0440\u0443\u0442\u0438\u0437\u0430\u0446\u0438\u044f HTTP-\u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432","text":""},{"location":"ru/docs/server/routing/#_1","title":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435","text":"<p>\u041c\u0430\u0440\u0448\u0440\u0443\u0442\u0438\u0437\u0430\u0446\u0438\u044f \u0432 <code>Rapidy</code> \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u0443\u043f\u0440\u0430\u0432\u043b\u044f\u0442\u044c \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u043e\u0439 HTTP-\u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432, \u0441\u043e\u043f\u043e\u0441\u0442\u0430\u0432\u043b\u044f\u044f \u0438\u0445 \u0441 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u043c\u0438 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u0430\u043c\u0438.</p>"},{"location":"ru/docs/server/routing/#_2","title":"\u041e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u043c\u0430\u0440\u0448\u0440\u0443\u0442\u043e\u0432","text":"<p>\u041f\u0440\u043e\u0441\u0442\u0435\u0439\u0448\u0438\u0439 \u0441\u043f\u043e\u0441\u043e\u0431 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u044f \u043c\u0430\u0440\u0448\u0440\u0443\u0442\u043e\u0432 \u2014 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 \u0434\u0435\u043a\u043e\u0440\u0430\u0442\u043e\u0440\u043e\u0432 <code>get</code>, <code>post</code>, <code>put</code>, <code>delete</code>, <code>head</code>, <code>options</code>.</p> <pre><code>from rapidy.http import get, post, put, delete, head, options\n\n@get('/')\nasync def get_handler() -&gt; ...:\n    ...\n\n@post('/')\nasync def post_handler() -&gt; ...:\n    ...\n\n@put('/')\nasync def put_handler() -&gt; ...:\n    ...\n\n@delete('/')\nasync def delete_handler() -&gt; ...:\n    ...\n\n@head('/')\nasync def head_handler() -&gt; ...:\n    ...\n\n@options('/')\nasync def options_handler() -&gt; ...:\n    ...\n</code></pre>"},{"location":"ru/examples/","title":"\u041f\u0440\u0438\u043c\u0435\u0440\u044b \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0439","text":"<p>\u0412 \u0434\u0430\u043d\u043d\u043e\u043c \u0440\u0430\u0437\u0434\u0435\u043b\u0435 \u0432\u044b \u043d\u0430\u0439\u0434\u0435\u0442\u0435 \u043f\u0440\u0438\u043c\u0435\u0440\u044b \u0434\u043b\u044f \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u0432\u0430\u0448\u0438\u0445 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0439.</p> <p>\u0412\u0441\u0435 \u043f\u0440\u0438\u043c\u0435\u0440\u044b \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u044b \u0434\u043b\u044f \u0432\u0435\u0440\u0441\u0438\u0438 <code>python3.12</code>.</p>"},{"location":"ru/examples/templates/","title":"\u0428\u0430\u0431\u043b\u043e\u043d\u044b \u0433\u043e\u0442\u043e\u0432\u044b\u0445 \u0440\u0435\u0448\u0435\u043d\u0438\u0439 \u043d\u0430 Rapidy","text":"<p>\u0412 \u0434\u0430\u043d\u043d\u043e\u043c \u0440\u0430\u0437\u0434\u0435\u043b\u0435 \u0432\u044b \u043d\u0430\u0439\u0434\u0435\u0442\u0435 \u0448\u0430\u0431\u043b\u043e\u043d\u044b \u0434\u043b\u044f \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u0432\u0430\u0448\u0438\u0445 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0439.</p> <p>\u0412\u0441\u0435 \u0448\u0430\u0431\u043b\u043e\u043d\u044b \u043f\u0440\u0435\u0434\u043e\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u044b \u0434\u043b\u044f \u0432\u0435\u0440\u0441\u0438\u0438 <code>python3.12</code>.</p> <p>\u041b\u044e\u0431\u043e\u0439 \u0448\u0430\u0431\u043b\u043e\u043d \u043c\u043e\u0436\u043d\u043e \u0432\u0437\u044f\u0442\u044c \u0438 \u0441\u0440\u0430\u0437\u0443 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0434\u043b\u044f \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u0432\u0430\u0448\u0438\u0445 \u0440\u0435\u0448\u0435\u043d\u0438\u0439.</p>"},{"location":"ru/examples/templates/#run-any-template","title":"Run any template","text":"<p>\u041b\u044e\u0431\u043e\u0439 \u0448\u0430\u0431\u043b\u043e\u043d \u043c\u043e\u0436\u043d\u043e \u0437\u0430\u043f\u0443\u0441\u0442\u0438\u0442\u044c \u043a\u043e\u043c\u0430\u043d\u0434\u043e\u0439: <pre><code>python -m src\n</code></pre></p>"},{"location":"ru/examples/templates/#dependency-management","title":"Dependency management","text":"<p>\u0412\u0441\u0435 \u0448\u0430\u0431\u043b\u043e\u043d\u044b \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044e\u0442 poetry \u0434\u043b\u044f \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u044f\u043c\u0438.</p> <p>\u041f\u0435\u0440\u0435\u0434 \u0437\u0430\u043f\u0443\u0441\u043a\u043e\u043c \u043b\u044e\u0431\u043e\u0433\u043e \u0448\u0430\u0431\u043b\u043e\u043d\u0430 \u0441\u043a\u043e\u043f\u0438\u0440\u0443\u0439\u0442\u0435 \u0435\u0433\u043e \u0438 \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e \u0432\u044b\u043f\u043e\u043b\u043d\u0438\u0442\u0435 \u043a\u043e\u043c\u0430\u043d\u0434\u044b: <pre><code>poetry env use python3.12\npoetry lock\npoetry install\n</code></pre></p>"},{"location":"ru/examples/templates/#dependency-injection","title":"Dependency Injection","text":"<p>\u041f\u043e\u0441\u043a\u043e\u043b\u044c\u043a\u0443 <code>rapidy</code> \u043d\u0430 \u0442\u0435\u043a\u0443\u0449\u0438\u0439 \u043c\u043e\u043c\u0435\u043d\u0442 \u043d\u0435 \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u0435\u0442 \u0441\u043e\u0431\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u0439 <code>di</code>, \u0432 \u0448\u0430\u0431\u043b\u043e\u043d\u0430\u0445 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f dishka.</p> <p>dishka \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u0435\u0442 <code>python</code> \u0441 \u0432\u0435\u0440\u0441\u0438\u0438 <code>3.10</code>, \u0430 <code>rapidy</code> \u0441 <code>3.8</code>.</p>"},{"location":"ru/examples/templates/#env-variable-config","title":"Env variable config","text":"<p>\u0414\u043b\u044f \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u0438 <code>env</code> \u0431\u044b\u043b \u0432\u044b\u0431\u0440\u0430\u043d pydantic_settings.</p>"},{"location":"ru/examples/templates/#_1","title":"\u0428\u0430\u0431\u043b\u043e\u043d\u044b:","text":""},{"location":"ru/examples/templates/#base","title":"Base","text":"<p>Base App - \u0431\u0430\u0437\u043e\u0432\u044b\u0439 \u043f\u0440\u043e\u0441\u0442\u043e\u0439 \u0448\u0430\u0431\u043b\u043e\u043d \u0432\u0435\u0431-\u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f.</p> <p>\u0428\u0430\u0431\u043b\u043e\u043d \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442:</p> <ul> <li>\u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435 web-\u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f</li> <li><code>middleware</code> \u0434\u043b\u044f \u043e\u0442\u043b\u0430\u0432\u043b\u0438\u0432\u0430\u043d\u0438\u044f \u043e\u0448\u0438\u0431\u043e\u043a \u0432 http-\u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u0430\u0445</li> <li>\u043f\u0440\u0435\u0434\u0443\u0441\u0442\u0430\u043d\u043e\u0432\u043b\u0435\u043d\u043d\u044b\u0439 DI (<code>dishka</code>)</li> <li>env-\u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u044e (<code>pydantic-settings</code>)</li> <li>\u043f\u0440\u0435\u0434\u0432\u0430\u0440\u0438\u0442\u0435\u043b\u044c\u043d\u043e \u043d\u0430\u0441\u0442\u0440\u043e\u0435\u043d\u043d\u044b\u0435 \u0442\u0435\u0441\u0442\u044b</li> <li>\u043f\u0440\u0435\u0434\u0432\u0430\u0440\u0438\u0442\u0435\u043b\u044c\u043d\u043e \u043d\u0430\u0441\u0442\u0440\u043e\u0435\u043d\u043d\u044b\u0435 \u043b\u0438\u043d\u0442\u0435\u0440\u044b \u0438 \u0441\u0442\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0439 \u0430\u043d\u0430\u043b\u0438\u0437\u0430\u0442\u043e\u0440 \u043a\u043e\u0434\u0430 (<code>ruff</code>, <code>mypy</code>)</li> </ul> <p>\u0411\u0430\u0437\u043e\u0432\u044b\u0439 \u0448\u0430\u0431\u043b\u043e\u043d \u043f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442 \u043a\u0430\u043a \u0431\u044b\u0441\u0442\u0440\u043e \u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c \u0441 \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u0430\u043c\u0438 <code>Rapidy</code>.</p> <p>\u0411\u0430\u0437\u043e\u0432\u044b\u0439 \u0448\u0430\u0431\u043b\u043e\u043d \u043e\u0442\u043b\u0438\u0447\u043d\u043e \u043f\u043e\u0434\u043e\u0439\u0434\u0435\u0442 \u0434\u043b\u044f \u0431\u044b\u0441\u0442\u0440\u043e\u0433\u043e \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f/\u043f\u0440\u043e\u0442\u043e\u0442\u0438\u043f\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u043d\u0435\u0431\u043e\u043b\u044c\u0448\u0438\u0445 \u0432\u0435\u0431-\u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0439.</p> <p>\u0411\u0430\u0437\u043e\u0432\u044b\u0439 \u0448\u0430\u0431\u043b\u043e\u043d \u043d\u0435 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f \u043a \u0431\u0434 \u0438\u043b\u0438 \u0434\u0440\u0443\u0433\u0438\u043c \u0441\u0438\u0441\u0442\u0435\u043c\u0430\u043c.</p> <p>\u0415\u0441\u043b\u0438 \u0432\u0430\u043c \u043d\u0443\u0436\u043d\u043e \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435 \u043a \u0431\u0434 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435 \u0434\u0440\u0443\u0433\u0438\u0435 \u0448\u0430\u0431\u043b\u043e\u043d\u044b \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u043d\u044b\u0435 \u043d\u0438\u0436\u0435.</p>"},{"location":"ru/examples/templates/#advanced","title":"Advanced","text":"<p>Advanced App - \u043f\u0440\u043e\u0434\u0432\u0438\u043d\u0443\u0442\u044b\u0439 \u0448\u0430\u0431\u043b\u043e\u043d \u0432\u0435\u0431-\u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f \u0441 \u043f\u0440\u0435\u0434\u0443\u0441\u0442\u0430\u043d\u043e\u0432\u043b\u0435\u043d\u043d\u044b\u043c DI, \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u0435\u0439, \u043d\u0430\u0441\u0442\u0440\u043e\u0435\u043d\u043d\u044b\u043c\u0438 \u043f\u0440\u0435\u0434\u0432\u0430\u0440\u0438\u0442\u0435\u043b\u044c\u043d\u043e \u043b\u0438\u043d\u0442\u0435\u0440\u0430\u043c\u0438, \u0442\u0435\u0441\u0442\u0430\u043c\u0438, \u0431\u0430\u0437\u043e\u0439 \u0434\u0430\u043d\u043d\u044b\u0445 \u0438 \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0449\u0438\u0439 \u043f\u0440\u043e\u0441\u0442\u044b\u0435 \u0438 \u043d\u0430\u0433\u043b\u044f\u0434\u043d\u044b\u0435 \u0442\u0435\u0441\u0442\u044b.</p> <p>\u0428\u0430\u0431\u043b\u043e\u043d \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442:</p> <ul> <li>\u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435 web-\u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f</li> <li>\u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435 \u043a \u0431\u0430\u0437\u0435 \u0434\u0430\u043d\u043d\u044b\u0445 (<code>postgres+asyncpg</code>)</li> <li>\u0440\u0430\u0431\u043e\u0442\u0430 \u0441 \u0441\u0435\u0441\u0441\u0438\u0435\u0439 \u0431\u0434 (<code>sqlalchemy</code>)</li> <li>\u043f\u0440\u0438\u043c\u0435\u0440\u044b \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u043f\u0440\u043e\u0441\u0442\u044b\u0445 CRUD</li> <li><code>middleware</code> \u0434\u043b\u044f \u043e\u0442\u043b\u0430\u0432\u043b\u0438\u0432\u0430\u043d\u0438\u044f \u043e\u0448\u0438\u0431\u043e\u043a \u0432 http-\u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u0430\u0445</li> <li>\u043f\u0440\u0435\u0434\u0443\u0441\u0442\u0430\u043d\u043e\u0432\u043b\u0435\u043d\u043d\u044b\u0439 DI (<code>dishka</code>)</li> <li>env-\u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u044e (<code>pydantic-settings</code>)</li> <li>\u043f\u0440\u0435\u0434\u0432\u0430\u0440\u0438\u0442\u0435\u043b\u044c\u043d\u043e \u043d\u0430\u0441\u0442\u0440\u043e\u0435\u043d\u043d\u044b\u0435 \u0442\u0435\u0441\u0442\u044b</li> <li>\u043f\u0440\u0435\u0434\u0432\u0430\u0440\u0438\u0442\u0435\u043b\u044c\u043d\u043e \u043d\u0430\u0441\u0442\u0440\u043e\u0435\u043d\u043d\u044b\u0435 \u043b\u0438\u043d\u0442\u0435\u0440\u044b \u0438 \u0441\u0442\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0439 \u0430\u043d\u0430\u043b\u0438\u0437\u0430\u0442\u043e\u0440 \u043a\u043e\u0434\u0430 (<code>ruff</code>, <code>mypy</code>)</li> </ul>"},{"location":"ru/examples/templates/base/","title":"\u0411\u0430\u0437\u043e\u0432\u044b\u0439 \u043f\u0440\u0438\u043c\u0435\u0440-\u0448\u0430\u0431\u043b\u043e\u043d \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f","text":"<p>\u041f\u043e\u043b\u043d\u043e\u0441\u0442\u044c\u044e \u043f\u0440\u0438\u043c\u0435\u0440 \u043c\u043e\u0436\u043d\u043e \u043d\u0430\u0439\u0442\u0438 \u0437\u0434\u0435\u0441\u044c (<code>docs/examples/projects/base</code>).</p> <p>\u0412\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u0431\u0440\u0430\u0442\u044c \u044d\u0442\u043e\u0442 \u0448\u0430\u0431\u043b\u043e\u043d \u0438 \u043f\u0440\u043e\u0434\u043e\u043b\u0436\u0430\u0442\u044c \u0432 \u043d\u0435\u043c \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u043a\u0443 \u043a\u0430\u043a \u0435\u0441\u0442\u044c.</p>"},{"location":"ru/examples/templates/base/#structure","title":"Structure","text":"<p>\u0421\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0430 \u043f\u0440\u043e\u0435\u043a\u0442\u0430 <pre><code>\u251c\u2500\u2500 .gitignore\n\u251c\u2500\u2500 .pre-commit-config.yaml\n\u251c\u2500\u2500 .env\n\u251c\u2500\u2500 pyproject.toml\n\u251c\u2500\u2500 src\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 __init__.py\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 __main__.py\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 api.py\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 application.py\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 config.py\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 di.py\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 providers.py\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 middlewares.py\n\u2514\u2500\u2500 tests\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 conftest.py\n    \u251c\u2500\u2500 pytest.ini\n    \u2514\u2500\u2500 test_api\n        \u251c\u2500\u2500 __init__.py\n        \u2514\u2500\u2500 test_hello.py\n</code></pre></p>"},{"location":"ru/examples/templates/base/#gitignore","title":".gitignore","text":"<p><code>.gitignore</code> - \u0444\u0430\u0439\u043b \u0441\u043e\u043e\u0431\u0449\u0430\u0435\u0442 Git, \u043a\u0430\u043a\u0438\u0435 \u0444\u0430\u0439\u043b\u044b \u0438 \u043a\u0430\u0442\u0430\u043b\u043e\u0433\u0438 \u0438\u0433\u043d\u043e\u0440\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u043f\u0440\u0438 \u0444\u0438\u043a\u0441\u0430\u0446\u0438\u0438 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0439.</p>"},{"location":"ru/examples/templates/base/#pre-commit-configyaml","title":".pre-commit-config.yaml","text":"<p><code>.pre-commit-config.yaml</code> - \u0444\u0430\u0439\u043b \u0441 \u043f\u0440\u0435\u0434\u0443\u0441\u0442\u0430\u043d\u043e\u0432\u043b\u0435\u043d\u043d\u044b\u043c\u0438 \u0444\u043e\u0440\u043c\u0430\u0442\u0435\u0440\u0430\u043c\u0438, \u043b\u0438\u043d\u0442\u0435\u0440\u0430\u043c\u0438 \u0438 \u0442\u0430\u0439\u043f-\u0447\u0435\u043a\u0435\u0440\u0430\u043c\u0438. <pre><code>\n</code></pre></p>"},{"location":"ru/examples/templates/base/#env","title":".env","text":"<p><code>.env</code> - \u0444\u0430\u0439\u043b \u0441 <code>env</code> \u0434\u043b\u044f \u043b\u043e\u043a\u0430\u043b\u044c\u043d\u043e\u0439 \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u043a\u0438 (\u043d\u0435 \u0444\u0438\u043a\u0441\u0438\u0440\u0443\u0439\u0442\u0435 \u0438 \u043d\u0435 \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442\u0435 \u0435\u0433\u043e \u043d\u0430 \u0433\u0438\u0442). <pre><code>\n</code></pre></p>"},{"location":"ru/examples/templates/base/#pyprojecttoml","title":"pyproject.toml","text":"<p><code>pyproject.toml</code> - \u0444\u0430\u0439\u043b \u043e\u043f\u0438\u0441\u044b\u0432\u0430\u044e\u0449\u0438\u0439 \u0432\u0441\u044e \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u044e \u043f\u0440\u043e\u0435\u043a\u0442\u0430: \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0438, \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u0438 \u043b\u0438\u043d\u0442\u0435\u0440\u043e\u0432 \u0438 \u043f\u0440\u043e\u0447\u0435\u0435. <pre><code>\n</code></pre></p>"},{"location":"ru/examples/templates/base/#src","title":"src","text":"<p><code>src</code> - \u043e\u0441\u043d\u043e\u0432\u043d\u0430\u044f \u043f\u0430\u043f\u043a\u0430 \u043f\u0440\u043e\u0435\u043a\u0442\u0430.</p>"},{"location":"ru/examples/templates/base/#__main__py","title":"<code>__main__.py</code>","text":"<p><code>__main__.py</code> - \u0442\u043e\u0447\u043a\u0430 \u0432\u0445\u043e\u0434\u0430 / \u0437\u0430\u043f\u0443\u0441\u043a\u0430 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f. <pre><code>\n</code></pre></p>"},{"location":"ru/examples/templates/base/#apipy","title":"api.py","text":"<p><code>api.py</code> - \u043a\u043e\u043d\u0435\u0447\u043d\u044b\u0435 http-\u0442\u043e\u0447\u043a\u0438 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f. <pre><code>\n</code></pre></p>"},{"location":"ru/examples/templates/base/#applicationpy","title":"application.py","text":"<p><code>application.py</code> - \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f. <pre><code>\n</code></pre></p>"},{"location":"ru/examples/templates/base/#configpy","title":"config.py","text":"<p><code>config.py</code> - \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u044f \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f.</p> <p>\u0414\u043b\u044f \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u0438 <code>env</code> \u0431\u044b\u043b \u0432\u044b\u0431\u0440\u0430\u043d pydantic_settings.</p> <pre><code>\n</code></pre>"},{"location":"ru/examples/templates/base/#dipy","title":"di.py","text":"<p><code>di.py</code> - \u0444\u0443\u043d\u043a\u0446\u0438\u0438 \u0434\u043b\u044f \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u0438\u043d\u044a\u0435\u043a\u0446\u0438\u0435\u0439 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0435\u0439 (DI).</p> <p>\u041d\u0430\u0434 dishka \u043f\u0440\u043e\u0432\u0435\u0434\u0435\u043d\u044b \u043d\u0435\u0431\u043e\u043b\u044c\u0448\u0438\u0435 \u043c\u0430\u043d\u0438\u043f\u0443\u043b\u044f\u0446\u0438\u0438, \u0447\u0442\u043e\u0431\u044b <code>inject</code> \u0440\u0430\u0431\u043e\u0442\u0430\u043b \u0441\u0432\u043e\u0431\u043e\u0434\u043d\u043e \u043f\u043e \u043a\u043e\u0434\u0443 \u0438 \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u043b \u0434\u0435\u043b\u0430\u0442\u044c \u0438\u043d\u0436\u0435\u043a\u0442 \u0432 \u043b\u044e\u0431\u043e\u0439 \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u0443\u044e \u0444\u0443\u043d\u043a\u0446\u0438\u044e \u0438\u043b\u0438 \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u044b\u0439 \u043c\u0435\u0442\u043e\u0434 \u043f\u0440\u043e\u0435\u043a\u0442\u0430.</p> <p>\u0415\u0441\u043b\u0438 \u0432\u0430\u043c \u043d\u0443\u0436\u0435\u043d <code>@inject</code> \u0431\u0435\u0440\u0438\u0442\u0435 \u0435\u0433\u043e \u0438\u0437 \u044d\u0442\u043e\u0433\u043e \u043c\u043e\u0434\u0443\u043b\u044f.</p> \u041f\u0440\u0438\u043c\u0435\u0440 \u0438\u043d\u0436\u0435\u043a\u0442\u0430 \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u0438: <pre><code>from dishka import FromDishka as Depends\nfrom src.di import inject\nfrom src.config import Config\n\n@inject\nasync def any_async(\n    config: Depends[Config],\n) -&gt; ...: ...\n</code></pre> <pre><code>\n</code></pre>"},{"location":"ru/examples/templates/base/#providerspy","title":"providers.py","text":"<p><code>providers.py</code> - \u043f\u0440\u043e\u0432\u0430\u0439\u0434\u0435\u0440\u044b DI. <pre><code>\n</code></pre></p>"},{"location":"ru/examples/templates/base/#middlewarespy","title":"middlewares.py","text":"<p><code>middlewares.py</code> - \u043f\u0440\u043e\u043c\u0435\u0436\u0443\u0442\u043e\u0447\u043d\u044b\u0435 \u041f\u041e \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f. <pre><code>\n</code></pre></p>"},{"location":"ru/examples/templates/base/#tests","title":"tests","text":"<p><code>tests</code> - \u043f\u0430\u043f\u043a\u0430 \u0441 \u0442\u0435\u0441\u0442\u0430\u043c\u0438 \u043f\u0440\u043e\u0435\u043a\u0442\u0430.</p>"},{"location":"ru/examples/templates/base/#conftestpy","title":"<code>conftest.py</code>","text":"<p><code>conftest.py</code> - \u043c\u043e\u0434\u0443\u043b\u044c \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0449\u0438\u0439 \u0431\u0430\u0437\u043e\u0432\u044b\u0435 \u0444\u0438\u043a\u0441\u0442\u0443\u0440\u044b, \u0438\u043c\u0435\u043d\u043d\u043e \u0432 \u043d\u0435\u043c \u0431\u0443\u0434\u0435\u0442 \u043f\u0440\u043e\u0438\u0441\u0445\u043e\u0434\u0438\u0442\u044c \u0432 \u0434\u0430\u043b\u044c\u043d\u0435\u0439\u0448\u0435\u043c \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435 \u043f\u043b\u0430\u0433\u0438\u043d\u043e\u0432. <pre><code>\n</code></pre></p>"},{"location":"ru/examples/templates/base/#pytestini","title":"<code>pytest.ini</code>","text":"<p><code>pytest.ini</code> - \u0444\u0430\u0439\u043b \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u0438 <code>pytest</code>. <pre><code>\n</code></pre></p>"},{"location":"ru/examples/templates/base/#test_api","title":"<code>test_api</code>","text":"<p><code>test_api</code> - \u043c\u043e\u0434\u0443\u043b\u044c \u0432 \u043a\u043e\u0442\u043e\u0440\u043e\u043c \u0442\u0435\u0441\u0442\u0438\u0440\u0443\u044e\u0442\u0441\u044f <code>api</code> \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f.</p>"},{"location":"ru/examples/templates/base/#test_hello","title":"<code>test_hello</code>","text":"<p><code>test_hello</code> - \u043f\u0440\u0438\u043c\u0435\u0440 \u043f\u0440\u043e\u0441\u0442\u043e\u0433\u043e \u0442\u0435\u0441\u0442\u0430. <pre><code>\n</code></pre></p>"}]}