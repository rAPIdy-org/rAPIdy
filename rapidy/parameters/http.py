from abc import ABC
from typing import Any, Dict, List, Optional, Union

from rapidy.constants import DEFAULT_JSON_DECODER
from rapidy.enums import ContentType, HTTPRequestParamType
from rapidy.fields.field_info import RapidyFieldInfo
from rapidy.typedefs import Deprecated, JSONDecoder, NoArgAnyCallable, Undefined, Unset

__all__ = (
    'PathParam',
    'PathParams',
    'Header',
    'Headers',
    'Cookie',
    'Cookies',
    'QueryParam',
    'QueryParams',
    'Body',
)


class RequestParamFieldInfo(RapidyFieldInfo, ABC):
    param_type: HTTPRequestParamType
    extract_single: bool = False


# BASE
class PathBase(RequestParamFieldInfo, ABC):
    param_type = HTTPRequestParamType.path
    can_default = False


class HeaderBase(RequestParamFieldInfo, ABC):
    param_type = HTTPRequestParamType.header


class CookieBase(RequestParamFieldInfo, ABC):
    param_type = HTTPRequestParamType.cookie


class QueryBase(RequestParamFieldInfo, ABC):
    param_type = HTTPRequestParamType.query


# PARAMS
class PathParam(PathBase):
    extract_single = True

    def __init__(
        self,
        default: Any = Undefined,
        *,
        default_factory: Optional[NoArgAnyCallable] = Unset,
        alias: Optional[str] = Unset,
        alias_priority: Optional[int] = Unset,
        validation_alias: Optional[str] = Unset,
        serialization_alias: Optional[str] = Unset,
        title: Optional[str] = Unset,
        description: Optional[str] = Unset,
        gt: Optional[float] = Unset,
        ge: Optional[float] = Unset,
        lt: Optional[float] = Unset,
        le: Optional[float] = Unset,
        min_length: Optional[int] = Unset,
        max_length: Optional[int] = Unset,
        pattern: Optional[str] = Unset,
        discriminator: Optional[str] = Unset,
        strict: Union[bool, None] = Unset,
        multiple_of: Union[float, None] = Unset,
        allow_inf_nan: Union[bool, None] = Unset,
        max_digits: Union[int, None] = Unset,
        decimal_places: Union[int, None] = Unset,
        deprecated: Union[Deprecated, str, bool, None] = Unset,
        examples: Optional[List[Any]] = Unset,
        json_schema_extra: Union[Dict[str, Any], None] = Unset,
        validate: bool = True,
        **extra: Any,
    ) -> None:
        super().__init__(
            default,
            default_factory=default_factory,
            alias=alias,
            alias_priority=alias_priority,
            validation_alias=validation_alias,
            serialization_alias=serialization_alias,
            title=title,
            description=description,
            gt=gt,
            ge=ge,
            lt=lt,
            le=le,
            min_length=min_length,
            max_length=max_length,
            pattern=pattern,
            discriminator=discriminator,
            strict=strict,
            multiple_of=multiple_of,
            allow_inf_nan=allow_inf_nan,
            max_digits=max_digits,
            decimal_places=decimal_places,
            deprecated=deprecated,
            examples=examples,
            json_schema_extra=json_schema_extra,
            validate=validate,
            **extra,
        )


class PathParams(PathBase):
    def __init__(
        self,
        default: Any = Undefined,
        *,
        default_factory: Optional[NoArgAnyCallable] = Unset,
        alias: Optional[str] = Unset,
        alias_priority: Optional[int] = Unset,
        validation_alias: Optional[str] = Unset,
        serialization_alias: Optional[str] = Unset,
        title: Optional[str] = Unset,
        description: Optional[str] = Unset,
        gt: Optional[float] = Unset,
        ge: Optional[float] = Unset,
        lt: Optional[float] = Unset,
        le: Optional[float] = Unset,
        min_length: Optional[int] = Unset,
        max_length: Optional[int] = Unset,
        pattern: Optional[str] = Unset,
        discriminator: Optional[str] = Unset,
        strict: Union[bool, None] = Unset,
        multiple_of: Union[float, None] = Unset,
        allow_inf_nan: Union[bool, None] = Unset,
        max_digits: Union[int, None] = Unset,
        decimal_places: Union[int, None] = Unset,
        deprecated: Union[Deprecated, str, bool, None] = Unset,
        examples: Optional[List[Any]] = Unset,
        json_schema_extra: Union[Dict[str, Any], None] = Unset,
        validate: bool = True,
        **extra: Any,
    ) -> None:
        super().__init__(
            default,
            default_factory=default_factory,
            alias=alias,
            alias_priority=alias_priority,
            validation_alias=validation_alias,
            serialization_alias=serialization_alias,
            title=title,
            description=description,
            gt=gt,
            ge=ge,
            lt=lt,
            le=le,
            min_length=min_length,
            max_length=max_length,
            pattern=pattern,
            discriminator=discriminator,
            strict=strict,
            multiple_of=multiple_of,
            allow_inf_nan=allow_inf_nan,
            max_digits=max_digits,
            decimal_places=decimal_places,
            deprecated=deprecated,
            examples=examples,
            json_schema_extra=json_schema_extra,
            validate=validate,
            **extra,
        )


class Header(HeaderBase):
    extract_single = True

    def __init__(
        self,
        default: Any = Undefined,
        *,
        default_factory: Optional[NoArgAnyCallable] = Unset,
        alias: Optional[str] = Unset,
        alias_priority: Optional[int] = Unset,
        validation_alias: Optional[str] = Unset,
        serialization_alias: Optional[str] = Unset,
        title: Optional[str] = Unset,
        description: Optional[str] = Unset,
        gt: Optional[float] = Unset,
        ge: Optional[float] = Unset,
        lt: Optional[float] = Unset,
        le: Optional[float] = Unset,
        min_length: Optional[int] = Unset,
        max_length: Optional[int] = Unset,
        pattern: Optional[str] = Unset,
        discriminator: Optional[str] = Unset,
        strict: Union[bool, None] = Unset,
        multiple_of: Union[float, None] = Unset,
        allow_inf_nan: Union[bool, None] = Unset,
        max_digits: Union[int, None] = Unset,
        decimal_places: Union[int, None] = Unset,
        deprecated: Union[Deprecated, str, bool, None] = Unset,
        examples: Optional[List[Any]] = Unset,
        json_schema_extra: Union[Dict[str, Any], None] = Unset,
        validate: bool = True,
        **extra: Any,
    ) -> None:
        super().__init__(
            default,
            default_factory=default_factory,
            alias=alias,
            alias_priority=alias_priority,
            validation_alias=validation_alias,
            serialization_alias=serialization_alias,
            title=title,
            description=description,
            gt=gt,
            ge=ge,
            lt=lt,
            le=le,
            min_length=min_length,
            max_length=max_length,
            pattern=pattern,
            discriminator=discriminator,
            strict=strict,
            multiple_of=multiple_of,
            allow_inf_nan=allow_inf_nan,
            max_digits=max_digits,
            decimal_places=decimal_places,
            deprecated=deprecated,
            examples=examples,
            json_schema_extra=json_schema_extra,
            validate=validate,
            **extra,
        )


class Headers(HeaderBase):
    def __init__(
        self,
        default: Any = Undefined,
        *,
        default_factory: Optional[NoArgAnyCallable] = Unset,
        alias: Optional[str] = Unset,
        alias_priority: Optional[int] = Unset,
        validation_alias: Optional[str] = Unset,
        serialization_alias: Optional[str] = Unset,
        title: Optional[str] = Unset,
        description: Optional[str] = Unset,
        gt: Optional[float] = Unset,
        ge: Optional[float] = Unset,
        lt: Optional[float] = Unset,
        le: Optional[float] = Unset,
        min_length: Optional[int] = Unset,
        max_length: Optional[int] = Unset,
        pattern: Optional[str] = Unset,
        discriminator: Optional[str] = Unset,
        strict: Union[bool, None] = Unset,
        multiple_of: Union[float, None] = Unset,
        allow_inf_nan: Union[bool, None] = Unset,
        max_digits: Union[int, None] = Unset,
        decimal_places: Union[int, None] = Unset,
        deprecated: Union[Deprecated, str, bool, None] = Unset,
        examples: Optional[List[Any]] = Unset,
        json_schema_extra: Union[Dict[str, Any], None] = Unset,
        validate: bool = True,
        **extra: Any,
    ) -> None:
        super().__init__(
            default,
            default_factory=default_factory,
            alias=alias,
            alias_priority=alias_priority,
            validation_alias=validation_alias,
            serialization_alias=serialization_alias,
            title=title,
            description=description,
            gt=gt,
            ge=ge,
            lt=lt,
            le=le,
            min_length=min_length,
            max_length=max_length,
            pattern=pattern,
            discriminator=discriminator,
            strict=strict,
            multiple_of=multiple_of,
            allow_inf_nan=allow_inf_nan,
            max_digits=max_digits,
            decimal_places=decimal_places,
            deprecated=deprecated,
            examples=examples,
            json_schema_extra=json_schema_extra,
            validate=validate,
            **extra,
        )


class Cookie(CookieBase):
    extract_single = True

    def __init__(
        self,
        default: Any = Undefined,
        *,
        default_factory: Optional[NoArgAnyCallable] = Unset,
        alias: Optional[str] = Unset,
        alias_priority: Optional[int] = Unset,
        validation_alias: Optional[str] = Unset,
        serialization_alias: Optional[str] = Unset,
        title: Optional[str] = Unset,
        description: Optional[str] = Unset,
        gt: Optional[float] = Unset,
        ge: Optional[float] = Unset,
        lt: Optional[float] = Unset,
        le: Optional[float] = Unset,
        min_length: Optional[int] = Unset,
        max_length: Optional[int] = Unset,
        pattern: Optional[str] = Unset,
        discriminator: Optional[str] = Unset,
        strict: Union[bool, None] = Unset,
        multiple_of: Union[float, None] = Unset,
        allow_inf_nan: Union[bool, None] = Unset,
        max_digits: Union[int, None] = Unset,
        decimal_places: Union[int, None] = Unset,
        deprecated: Union[Deprecated, str, bool, None] = Unset,
        examples: Optional[List[Any]] = Unset,
        json_schema_extra: Union[Dict[str, Any], None] = Unset,
        validate: bool = True,
        **extra: Any,
    ) -> None:
        super().__init__(
            default,
            default_factory=default_factory,
            alias=alias,
            alias_priority=alias_priority,
            validation_alias=validation_alias,
            serialization_alias=serialization_alias,
            title=title,
            description=description,
            gt=gt,
            ge=ge,
            lt=lt,
            le=le,
            min_length=min_length,
            max_length=max_length,
            pattern=pattern,
            discriminator=discriminator,
            strict=strict,
            multiple_of=multiple_of,
            allow_inf_nan=allow_inf_nan,
            max_digits=max_digits,
            decimal_places=decimal_places,
            deprecated=deprecated,
            examples=examples,
            json_schema_extra=json_schema_extra,
            validate=validate,
            **extra,
        )


class Cookies(CookieBase):
    def __init__(
        self,
        default: Any = Undefined,
        *,
        default_factory: Optional[NoArgAnyCallable] = Unset,
        title: Optional[str] = Unset,
        description: Optional[str] = Unset,
        gt: Optional[float] = Unset,
        ge: Optional[float] = Unset,
        lt: Optional[float] = Unset,
        le: Optional[float] = Unset,
        min_length: Optional[int] = Unset,
        max_length: Optional[int] = Unset,
        pattern: Optional[str] = Unset,
        discriminator: Optional[str] = Unset,
        strict: Union[bool, None] = Unset,
        multiple_of: Union[float, None] = Unset,
        allow_inf_nan: Union[bool, None] = Unset,
        max_digits: Union[int, None] = Unset,
        decimal_places: Union[int, None] = Unset,
        deprecated: Union[Deprecated, str, bool, None] = Unset,
        examples: Optional[List[Any]] = Unset,
        json_schema_extra: Union[Dict[str, Any], None] = Unset,
        validate: bool = True,
        **extra: Any,
    ) -> None:
        super().__init__(
            default,
            default_factory=default_factory,
            title=title,
            description=description,
            gt=gt,
            ge=ge,
            lt=lt,
            le=le,
            min_length=min_length,
            max_length=max_length,
            pattern=pattern,
            discriminator=discriminator,
            strict=strict,
            multiple_of=multiple_of,
            allow_inf_nan=allow_inf_nan,
            max_digits=max_digits,
            decimal_places=decimal_places,
            deprecated=deprecated,
            examples=examples,
            json_schema_extra=json_schema_extra,
            validate=validate,
            **extra,
        )


class QueryParam(QueryBase):
    extract_single = True

    def __init__(
        self,
        default: Any = Undefined,
        *,
        default_factory: Optional[NoArgAnyCallable] = Unset,
        alias: Optional[str] = Unset,
        alias_priority: Optional[int] = Unset,
        validation_alias: Optional[str] = Unset,
        serialization_alias: Optional[str] = Unset,
        title: Optional[str] = Unset,
        description: Optional[str] = Unset,
        gt: Optional[float] = Unset,
        ge: Optional[float] = Unset,
        lt: Optional[float] = Unset,
        le: Optional[float] = Unset,
        min_length: Optional[int] = Unset,
        max_length: Optional[int] = Unset,
        pattern: Optional[str] = Unset,
        discriminator: Optional[str] = Unset,
        strict: Union[bool, None] = Unset,
        multiple_of: Union[float, None] = Unset,
        allow_inf_nan: Union[bool, None] = Unset,
        max_digits: Union[int, None] = Unset,
        decimal_places: Union[int, None] = Unset,
        deprecated: Union[Deprecated, str, bool, None] = Unset,
        examples: Optional[List[Any]] = Unset,
        json_schema_extra: Union[Dict[str, Any], None] = Unset,
        validate: bool = True,
        **extra: Any,
    ) -> None:
        super().__init__(
            default,
            default_factory=default_factory,
            alias=alias,
            alias_priority=alias_priority,
            validation_alias=validation_alias,
            serialization_alias=serialization_alias,
            title=title,
            description=description,
            gt=gt,
            ge=ge,
            lt=lt,
            le=le,
            min_length=min_length,
            max_length=max_length,
            pattern=pattern,
            discriminator=discriminator,
            strict=strict,
            multiple_of=multiple_of,
            allow_inf_nan=allow_inf_nan,
            max_digits=max_digits,
            decimal_places=decimal_places,
            deprecated=deprecated,
            examples=examples,
            json_schema_extra=json_schema_extra,
            validate=validate,
            **extra,
        )


class QueryParams(QueryBase):
    def __init__(
        self,
        default: Any = Undefined,
        *,
        default_factory: Optional[NoArgAnyCallable] = Unset,
        title: Optional[str] = Unset,
        description: Optional[str] = Unset,
        gt: Optional[float] = Unset,
        ge: Optional[float] = Unset,
        lt: Optional[float] = Unset,
        le: Optional[float] = Unset,
        min_length: Optional[int] = Unset,
        max_length: Optional[int] = Unset,
        pattern: Optional[str] = Unset,
        discriminator: Optional[str] = Unset,
        strict: Union[bool, None] = Unset,
        multiple_of: Union[float, None] = Unset,
        allow_inf_nan: Union[bool, None] = Unset,
        max_digits: Union[int, None] = Unset,
        decimal_places: Union[int, None] = Unset,
        deprecated: Union[Deprecated, str, bool, None] = Unset,
        examples: Optional[List[Any]] = Unset,
        json_schema_extra: Union[Dict[str, Any], None] = Unset,
        validate: bool = True,
        **extra: Any,
    ) -> None:
        super().__init__(
            default,
            default_factory=default_factory,
            title=title,
            description=description,
            gt=gt,
            ge=ge,
            lt=lt,
            le=le,
            min_length=min_length,
            max_length=max_length,
            pattern=pattern,
            discriminator=discriminator,
            strict=strict,
            multiple_of=multiple_of,
            allow_inf_nan=allow_inf_nan,
            max_digits=max_digits,
            decimal_places=decimal_places,
            deprecated=deprecated,
            examples=examples,
            json_schema_extra=json_schema_extra,
            validate=validate,
            **extra,
        )


class Body(RequestParamFieldInfo):
    param_type = HTTPRequestParamType.body

    def __init__(
        self,
        default: Any = Undefined,
        *,
        default_factory: Optional[NoArgAnyCallable] = Unset,
        title: Optional[str] = Unset,
        description: Optional[str] = Unset,
        gt: Optional[float] = Unset,
        ge: Optional[float] = Unset,
        lt: Optional[float] = Unset,
        le: Optional[float] = Unset,
        min_length: Optional[int] = Unset,
        max_length: Optional[int] = Unset,
        pattern: Optional[str] = Unset,
        discriminator: Optional[str] = Unset,
        strict: Union[bool, None] = Unset,
        multiple_of: Union[float, None] = Unset,
        allow_inf_nan: Union[bool, None] = Unset,
        max_digits: Union[int, None] = Unset,
        decimal_places: Union[int, None] = Unset,
        deprecated: Union[Deprecated, str, bool, None] = Unset,
        examples: Optional[List[Any]] = Unset,
        json_schema_extra: Union[Dict[str, Any], None] = Unset,
        validate: bool = True,
        content_type: Union[str, ContentType] = ContentType.json,
        check_content_type: bool = True,
        json_decoder: JSONDecoder = DEFAULT_JSON_DECODER,
        **extra: Any,
    ) -> None:
        super().__init__(
            default,
            default_factory=default_factory,
            title=title,
            description=description,
            gt=gt,
            ge=ge,
            lt=lt,
            le=le,
            min_length=min_length,
            max_length=max_length,
            pattern=pattern,
            discriminator=discriminator,
            strict=strict,
            multiple_of=multiple_of,
            allow_inf_nan=allow_inf_nan,
            max_digits=max_digits,
            decimal_places=decimal_places,
            deprecated=deprecated,
            examples=examples,
            json_schema_extra=json_schema_extra,
            validate=validate,
            **extra,
        )

        self.content_type = content_type
        self.json_decoder = json_decoder
        self.check_content_type = check_content_type
