[tool.poetry]
name = "rAPIdy"
version = "1.0.0rc0"
description = "rAPIdy - write quickly - write beautifully"
authors = [
    "Daniil Grois <daniil.grois@gmail.com>",
    "Lev Zaplatin <lev@zaplatin.dev>",
]
keywords = [
    "rAPIdy",
    "aiohttp",
    "pydantic",
    "http",
    "server",
    "client",
    "api",
    "fast",
    "http server",
    "Daniil Grois",
    "Lev Zaplatin",
]
license = "MIT License"
readme = "README.md"

classifiers = [
    "License :: OSI Approved :: MIT License",
    "Intended Audience :: Developers",
    "Intended Audience :: Information Technology",
    "Intended Audience :: System Administrators",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python",
    "Topic :: Internet",
    "Topic :: Internet :: WWW/HTTP",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Software Development :: Libraries",
    "Topic :: Software Development",
    "Typing :: Typed",
    "Environment :: Web Environment",
    "Framework :: AsyncIO",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.9",
]
packages = [
  {include = "rapidy"},
  {include = "rapidy/py.typed"},
]

[tool.poetry.dependencies]
python = ">=3.9"
aiohttp = ">=3.8.1"
pydantic = ">=1.7.4,!=1.8,!=1.8.1,!=1.8.2,!=2.0.0,!=2.0.1,!=2.1.0,<3.0.0"
yarl = "<1.13.0"  # FIXME: 1.13.0 - aiohttp backwards compatibility broken

[tool.poetry.group.test.dependencies]
pytest = "7.*"
pytest-aiohttp = ">=1.0.5"
pytest-cov = "^4.1.0"
pytest-httpserver = ">=1.0.8"


[tool.ruff]
src = ["rapidy", "tests"]
line-length = 120
indent-width = 4
target-version = "py38"

[tool.ruff.lint]
select = [
    "ALL",
]
ignore = [
    "ANN401",   # Dynamically typed expressions (typing.Any) are disallowed in `**handler_kwargs`
    "D100",     # Missing docstring in public module
    "D104",     # Missing docstring in public package
    "EM101",    # Exception must not use a string literal, assign to variable first
    "FA100",    # Add `from __future__ import annotations` to simplify `typing.Dict`
    "FA102",    # Missing `from __future__ import annotations`, but uses PEP 604 union
    "PLR0911",  # Too many return statements (X > 6)
    "PLR0913",  # Too many arguments in function definition (X > 5)
    "RUF022",   # `__all__` is not sorted - fixme later
    "RUF023",   # `X.__slots__` is not sorted - fixme later
    "TC001",    # Move application import `X` into a type-checking block
    "TC003",    # Move standard library import `X` into a type-checking block
    "TD001",    # Invalid TODO tag: `FIXME`
    "TD003",    # Missing issue link on the line following this TODO
]

[tool.ruff.lint.flake8-quotes]
inline-quotes = "single"

[tool.ruff.lint.flake8-type-checking]
exempt-modules = ["typing", "typing_extensions"]

[tool.ruff.lint.per-file-ignores]
"rapidy/web.py" = ["F401"]
"rapidy/annotation_checkers.py" = ["D"]
"rapidy/web_exceptions.py" = ["D", "F401"]
"rapidy/fields/model_fields.py" = ["D"]
"rapidy/fields/field_info.py" = ["D"]
"rapidy/endpoint_handlers/validation.py" = ["D", "PLR0911"]
"rapidy/endpoint_handlers/*" = ["D"]
"rapidy/version.py" = ["D"]
"rapidy/mypy/*" = ["D", "S101"]
"rapidy/routing/http/routers.py" = ["D", "N801"]
"rapidy/parameters/http.py" = ["D"]
"rapidy/endpoint_handlers/http/request/data_extractors.py" = ["D"]
"rapidy/endpoint_handlers/http/request/data_validators.py" = ["D"]
"tests*" = [
    "ANN001",
    "ARG",
    "B006",
    "B008",
    "BLE001",
    "D",
    "DTZ001",
    "FBT001",
    "FBT002",   # Boolean default positional argument in function definition
    "PT006",
    "PT007",    # Wrong values type in `pytest.mark.parametrize` expected `list` of `tuple`
    "PLR2004",  # Magic value used in comparison, consider replacing `X` with a constant variable
    "S101",
    "S105",
    "UP035",    # Import from `X` instead: `X`
]



[tool.ruff.lint.isort]
known-local-folder = ["rapidy", "tests"]
extra-standard-library = ["typing_extensions"]
section-order = ["future", "standard-library", "first-party", "third-party", "local-folder"]
combine-as-imports = true
force-wrap-aliases = true
order-by-type = false

[tool.ruff.lint.pydocstyle]
# Google docstyle
# See https://sphinxcontrib-napoleon.readthedocs.io/en/latest/example_google.html
# and http://google.github.io/styleguide/pyguide.html
# https://gist.github.com/redlotus/3bc387c2591e3e908c9b63b97b11d24e
convention = "google"

[tool.ruff.format]
quote-style = "single"
indent-style = "space"

[tool.mypy]
pretty = true
ignore_missing_imports = true
check_untyped_defs = true
strict = true
show_error_codes = true
show_column_numbers = true
warn_return_any = false
allow_subclassing_any = true
implicit_reexport = true

[[tool.mypy.overrides]]
module = "tests.*"
allow_untyped_defs = true
allow_untyped_calls = true
allow_subclassing_any = true
allow_untyped_decorators = true
disable_error_code = "var-annotated, has-type, no-redef, empty-body"


[tool.pytest.ini_options]
asyncio_mode = "auto"
log_cli = true
filterwarnings = [
    "ignore::DeprecationWarning:",
]

[tool.coverage.run]
parallel = true
source = [
    "rapidy",
]
relative_files = true
context = '${CONTEXT}'

[tool.coverage.report]
exclude_also = [
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]


[build-system]
requires = ["poetry-core>=1.3.0"]
build-backend = "poetry.core.masonry.api"
